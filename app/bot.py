from telebot import TeleBot
from flask import Flask, request
import threading
import time
import requests
from app.config import TELEGRAM_BOT_TOKEN, RENDER_APP_URL

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Flask –¥–æ–¥–∞—Ç–∫—É
app = Flask(__name__)

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–∫–∑–µ–º–ø–ª—è—Ä—É –±–æ—Ç–∞
bot = TeleBot(TELEGRAM_BOT_TOKEN)

# –Ü–º–ø–æ—Ä—Ç —Ç–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤
from app.handlers.base import register_base_handlers
from app.handlers.price import register_price_handlers
from app.handlers.analysis import register_analysis_handlers
from app.handlers.chart import register_chart_handlers

# –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –≤—Å—ñ—Ö –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤
register_base_handlers(bot)
register_price_handlers(bot)
register_analysis_handlers(bot)
register_chart_handlers(bot)

# Webhook –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è Telegram
@app.route('/webhook', methods=['POST'])
def webhook():
    """–û–±—Ä–æ–±–Ω–∏–∫ –≤–µ–±—Ö—É–∫–∞ –≤—ñ–¥ Telegram"""
    if request.headers.get('content-type') == 'application/json':
        json_string = request.get_data().decode('utf-8')
        update = bot.update_de_json(json_string)
        bot.process_new_updates([update])
        return '', 200
    return 'Invalid content type', 403

# –†–æ—É—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–∞—Ü–µ–∑–¥–∞—Ç–Ω–æ—Å—Ç—ñ
@app.route('/health', methods=['GET'])
def health_check():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É –±–æ—Ç–∞"""
    return {'status': 'ok', 'bot': 'running'}, 200

# –†–æ—É—Ç –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
@app.route('/test', methods=['GET'])
def test_route():
    """–¢–µ—Å—Ç–æ–≤–∏–π —Ä–æ—É—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏"""
    return {'message': 'Bot is working!', 'timestamp': time.time()}, 200

def keep_alive():
    """–§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –∂–∏–≤–æ—Å—Ç—ñ —ñ–Ω—Å—Ç–∞–Ω—Å—É –Ω–∞ Render"""
    while True:
        try:
            if RENDER_APP_URL:
                # –ü—ñ–Ω–≥—É—î–º–æ –Ω–∞—à –≤–ª–∞—Å–Ω–∏–π –¥–æ–¥–∞—Ç–æ–∫ –∫–æ–∂–Ω—ñ 2 —Ö–≤–∏–ª–∏–Ω–∏
                health_url = f"{RENDER_APP_URL}/health"
                response = requests.get(health_url, timeout=10)
                print(f"üîÑ Keep-alive ping: {response.status_code} - {time.strftime('%H:%M:%S')}")
            time.sleep(120)  # –ü—ñ–Ω“ë –∫–æ–∂–Ω—ñ 2 —Ö–≤–∏–ª–∏–Ω–∏
        except Exception as e:
            print(f"‚ùå Keep-alive error: {e}")
            time.sleep(60)  # –ß–µ–∫–∞—î–º–æ –º–µ–Ω—à–µ –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ

def setup_webhook():
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–µ–±—Ö—É–∫–∞ –¥–ª—è Telegram"""
    try:
        if RENDER_APP_URL:
            # –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä–∏–π –≤–µ–±—Ö—É–∫
            bot.remove_webhook()
            time.sleep(1)
            
            # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –Ω–æ–≤–∏–π –≤–µ–±—Ö—É–∫
            webhook_url = f"{RENDER_APP_URL}/webhook"
            bot.set_webhook(url=webhook_url)
            print(f"‚úÖ Webhook set to: {webhook_url}")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ç—É—Å –≤–µ–±—Ö—É–∫–∞
            webhook_info = bot.get_webhook_info()
            print(f"üìä Webhook info: {webhook_info.url}")
        else:
            print("‚ÑπÔ∏è Running in polling mode (local development)")
    except Exception as e:
        print(f"‚ùå Webhook setup error: {e}")

def run_flask():
    """–ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞"""
    print("üåê Starting Flask server...")
    app.run(host='0.0.0.0', port=5000, debug=False)

def run_bot():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞"""
    print("ü§ñ Initializing Crypto Analysis Bot...")
    
    # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –≤–µ–±—Ö—É–∫
    setup_webhook()
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø—ñ–Ω“ë–µ—Ä –¥–ª—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –∂–∏–≤–æ—Å—Ç—ñ (—Ç—ñ–ª—å–∫–∏ –Ω–∞ Render)
    if RENDER_APP_URL:
        print("üîó Starting keep-alive thread for Render...")
        keep_alive_thread = threading.Thread(target=keep_alive, daemon=True)
        keep_alive_thread.start()
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ Flask —Å–µ—Ä–≤–µ—Ä
    run_flask()

# –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫
@bot.message_handler(func=lambda message: True)
def handle_all_messages(message):
    """–û–±—Ä–æ–±–∫–∞ –≤—Å—ñ—Ö –Ω–µ–≤—ñ–¥–æ–º–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
    bot.reply_to(message, "‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /help –¥–ª—è –¥–æ–≤—ñ–¥–∫–∏")

# –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫ –±–æ—Ç–∞
@bot.error_handler
def error_handler(update, error):
    """–ì–ª–æ–±–∞–ª—å–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫"""
    print(f"‚ùå Bot error: {error}")
    try:
        if update and hasattr(update, 'message'):
            bot.reply_to(update.message, "‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
    except:
        pass

# –î–æ–¥–∞—Ç–∫–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –±–æ—Ç–æ–º
def get_bot_info():
    """–û—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –±–æ—Ç–∞"""
    try:
        me = bot.get_me()
        return f"Bot: @{me.username}, ID: {me.id}"
    except Exception as e:
        return f"Error getting bot info: {e}"

def check_webhook_status():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –≤–µ–±—Ö—É–∫–∞"""
    try:
        webhook_info = bot.get_webhook_info()
        return {
            'url': webhook_info.url,
            'has_custom_certificate': webhook_info.has_custom_certificate,
            'pending_update_count': webhook_info.pending_update_count
        }
    except Exception as e:
        return f"Error checking webhook: {e}"

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤ (–¥–æ–¥–∞—Ç–∏ –≤ handlers/base.py –ø—ñ–∑–Ω—ñ—à–µ)
@bot.message_handler(commands=['admin'])
def admin_command(message):
    """–ê–¥–º—ñ–Ω—Å—å–∫–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å—É"""
    if message.from_user.id == 123456789:  # –ó–∞–º—ñ–Ω–∏—Ç–∏ –Ω–∞ –≤–∞—à Telegram ID
        bot_info = get_bot_info()
        webhook_status = check_webhook_status()
        bot.reply_to(message, f"üë®‚Äçüíª Admin Panel:\n{bot_info}\nWebhook: {webhook_status}")
    else:
        bot.reply_to(message, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ")

if __name__ == '__main__':
    run_bot()
