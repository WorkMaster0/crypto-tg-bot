from telebot import TeleBot
from flask import Flask, request
import threading
import time
import requests
from app.config import TELEGRAM_BOT_TOKEN, RENDER_APP_URL

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Flask –¥–æ–¥–∞—Ç–∫—É
app = Flask(__name__)

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–∫–∑–µ–º–ø–ª—è—Ä—É –±–æ—Ç–∞
bot = TeleBot(TELEGRAM_BOT_TOKEN)

# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —Ç–∞ —Ä–µ—î—Å—Ç—Ä—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏
from app.handlers import register_all_handlers
register_all_handlers(bot)  # ‚Üê –ø–µ—Ä–µ–¥–∞—î–º–æ bot —É —Ñ—É–Ω–∫—Ü—ñ—é

# –†–µ—à—Ç–∞ –∫–æ–¥—É (webhook, Flask routes)...

# Webhook –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è Telegram
@app.route('/webhook', methods=['POST'])
def webhook():
    """–û–±—Ä–æ–±–Ω–∏–∫ –≤–µ–±—Ö—É–∫–∞ –≤—ñ–¥ Telegram"""
    if request.headers.get('content-type') == 'application/json':
        json_string = request.get_data().decode('utf-8')
        update = bot.update_de_json(json_string)
        bot.process_new_updates([update])
        return '', 200
    return 'Invalid content type', 403

# –†–æ—É—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–∞—Ü–µ–∑–¥–∞—Ç–Ω–æ—Å—Ç—ñ
@app.route('/health', methods=['GET'])
def health_check():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É –±–æ—Ç–∞"""
    return {'status': 'ok', 'bot': 'running'}, 200

def keep_alive():
    """–§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –∂–∏–≤–æ—Å—Ç—ñ —ñ–Ω—Å—Ç–∞–Ω—Å—É –Ω–∞ Render"""
    while True:
        try:
            if RENDER_APP_URL:
                # –ü—ñ–Ω–≥—É—î–º–æ –Ω–∞—à –≤–ª–∞—Å–Ω–∏–π –¥–æ–¥–∞—Ç–æ–∫ –∫–æ–∂–Ω—ñ 2 —Ö–≤–∏–ª–∏–Ω–∏
                health_url = f"{RENDER_APP_URL}/health"
                response = requests.get(health_url, timeout=10)
                print(f"üîÑ Keep-alive ping: {response.status_code} - {time.strftime('%H:%M:%S')}")
            time.sleep(120)  # –ü—ñ–Ω“ë –∫–æ–∂–Ω—ñ 2 —Ö–≤–∏–ª–∏–Ω–∏
        except Exception as e:
            print(f"‚ùå Keep-alive error: {e}")
            time.sleep(60)

def setup_webhook():
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–µ–±—Ö—É–∫–∞ –¥–ª—è Telegram"""
    try:
        if RENDER_APP_URL:
            # –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä–∏–π –≤–µ–±—Ö—É–∫
            bot.remove_webhook()
            time.sleep(1)
            
            # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –Ω–æ–≤–∏–π –≤–µ–±—Ö—É–∫
            webhook_url = f"{RENDER_APP_URL}/webhook"
            bot.set_webhook(url=webhook_url)
            print(f"‚úÖ Webhook set to: {webhook_url}")
        else:
            print("‚ÑπÔ∏è Running in polling mode (local development)")
    except Exception as e:
        print(f"‚ùå Webhook setup error: {e}")

def run_flask():
    """–ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞"""
    print("üåê Starting Flask server...")
    app.run(host='0.0.0.0', port=5000, debug=False)

def run_bot():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞"""
    print("ü§ñ Initializing Crypto Analysis Bot...")
    
    # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –≤–µ–±—Ö—É–∫
    setup_webhook()
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø—ñ–Ω“ë–µ—Ä –¥–ª—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –∂–∏–≤–æ—Å—Ç—ñ (—Ç—ñ–ª—å–∫–∏ –Ω–∞ Render)
    if RENDER_APP_URL:
        print("üîó Starting keep-alive thread for Render...")
        keep_alive_thread = threading.Thread(target=keep_alive, daemon=True)
        keep_alive_thread.start()
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ Flask —Å–µ—Ä–≤–µ—Ä (–í–ï–ë–•–£–ö —Ä–µ–∂–∏–º)
    print("üåê Starting Flask server in WEBHOOK mode...")
    app.run(host='0.0.0.0', port=5000, debug=False)

# –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫ –±–æ—Ç–∞
@bot.error_handler
def error_handler(update, error):
    """–ì–ª–æ–±–∞–ª—å–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫"""
    print(f"‚ùå Bot error: {error}")

if __name__ == '__main__':
    run_bot()
