from datetime import datetime
import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import requests
import numpy as np
from app.analytics import get_klines, generate_signal_text, find_levels
from app.chart import plot_candles
from app.config import ALLOWED_INTERVALS

# –ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
_user_settings = {}  # user_id -> {"interval": "1h", "min_volume": 5000000, "favorites": []}

def _default_interval(user_id):
    return _user_settings.get(user_id, {}).get("interval", "1h")

def _default_min_volume(user_id):
    return _user_settings.get(user_id, {}).get("min_volume", 5000000)

def _parse_args(msg_text: str):
    parts = msg_text.split()
    symbol = None
    interval = None
    limit = 10
    if len(parts) >= 2:
        symbol = parts[1].upper()
        if not symbol.endswith("USDT"):
            symbol += "USDT"
    if len(parts) >= 3 and parts[2] in ALLOWED_INTERVALS:
        interval = parts[2]
    if len(parts) >= 4 and parts[3].isdigit():
        limit = min(max(int(parts[3]), 1), 15)
    return symbol, interval, limit

# ---------- /smart_auto ----------
@bot.message_handler(commands=['smart_auto'])
def smart_auto_handler(message):
    """
    –û–Ω–æ–≤–ª–µ–Ω–∏–π —Å–∫–∞–Ω–µ—Ä –¥–ª—è –ø–æ—à—É–∫—É —Å–∏–ª—å–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤ –∑ AI-–∞–Ω–∞–ª—ñ–∑–æ–º
    –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /smart_auto [SYMBOL] [INTERVAL] [LIMIT]
    """
    try:
        processing_msg = bot.send_message(message.chat.id, "üîç AI —Å–∫–∞–Ω—É—î —Ä–∏–Ω–æ–∫...")
        user_id = message.from_user.id
        symbol, interval, limit = _parse_args(message.text)
        interval = interval or _default_interval(user_id)
        min_volume = _default_min_volume(user_id)

        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ
        url = "https://api.binance.com/api/v3/ticker/24hr"
        response = requests.get(url, timeout=10)
        data = response.json()

        # –§—ñ–ª—å—Ç—Ä—É—î–º–æ USDT-–ø–∞—Ä–∏
        usdt_pairs = [
            d for d in data
            if d["symbol"].endswith("USDT") and float(d["quoteVolume"]) > min_volume and float(d["lastPrice"]) > 0.1
        ]

        # –Ø–∫—â–æ –≤–∫–∞–∑–∞–Ω–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π —Å–∏–º–≤–æ–ª, –∞–Ω–∞–ª—ñ–∑—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –π–æ–≥–æ
        if symbol:
            usdt_pairs = [d for d in usdt_pairs if d["symbol"] == symbol]
            if not usdt_pairs:
                bot.delete_message(message.chat.id, processing_msg.message_id)
                bot.reply_to(message, f"‚ùå {symbol} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —Ñ—ñ–ª—å—Ç—Ä–∞–º")
                return

        # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ –∑–º—ñ–Ω–æ—é —Ü—ñ–Ω–∏
        top_pairs = sorted(
            usdt_pairs,
            key=lambda x: abs(float(x["priceChangePercent"])),
            reverse=True
        )[:30]

        signals = []
        for pair in top_pairs:
            symbol = pair["symbol"]
            price_change = float(pair["priceChangePercent"])
            volume = float(pair["quoteVolume"]) / 1000000

            try:
                # –ê–Ω–∞–ª—ñ–∑ –Ω–∞ –∫—ñ–ª—å–∫–æ—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞—Ö
                signals_1h = generate_signal_text(symbol, interval="1h")
                signals_4h = generate_signal_text(symbol, interval="4h")
                df = get_klines(symbol, interval=interval, limit=200)
                if not df or len(df.get("c", [])) < 50:
                    continue

                closes = np.array(df["c"], dtype=float)
                volumes = np.array(df["v"], dtype=float)
                rsi = calculate_rsi(closes)
                sr_levels = find_levels(df)
                last_price = closes[-1]

                # –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Å–∏–≥–Ω–∞–ª—É
                signal_type = None
                confidence = 50
                for lvl in sr_levels["resistances"]:
                    if last_price > lvl * 1.01:
                        signal_type = "BREAKOUT_LONG"
                        confidence = 80 if "LONG" in signals_4h else 70
                        break
                for lvl in sr_levels["supports"]:
                    if last_price < lvl * 0.99:
                        signal_type = "BREAKOUT_SHORT"
                        confidence = 80 if "SHORT" in signals_4h else 70
                        break

                # Pre-top –¥–µ—Ç–µ–∫—Ü—ñ—è
                impulse = (closes[-1] - closes[-4]) / closes[-4] if len(closes) >= 4 else 0
                vol_spike = volumes[-1] > 1.5 * np.mean(volumes[-20:]) if len(volumes) >= 20 else False
                nearest_res = max([lvl for lvl in sr_levels["resistances"] if lvl < last_price], default=None)
                if impulse > 0.08 and vol_spike and nearest_res:
                    signal_type = signal_type or "PRE_TOP"
                    confidence = max(confidence, 75)

                if signal_type and confidence >= 70:
                    strategy = generate_strategy(signal_type, last_price, sr_levels)
                    signals.append({
                        "symbol": symbol,
                        "price_change": price_change,
                        "volume": volume,
                        "signal_type": signal_type,
                        "confidence": confidence,
                        "rsi": rsi,
                        "strategy": strategy
                    })

            except Exception:
                continue

        try:
            bot.delete_message(message.chat.id, processing_msg.message_id)
        except:
            pass

        if not signals:
            bot.reply_to(message, "üîç –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Å–∏–ª—å–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤")
            return

        # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ –≤–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—é —Ç–∞ –æ–±—Å—è–≥–æ–º
        signals.sort(key=lambda x: (x["confidence"], x["volume"]), reverse=True)

        response = [f"üöÄ <b>Smart Auto Signals (–æ–±—Å—è–≥ >{min_volume/1e6:.0f}M$, —Ü—ñ–Ω–∞ >0.1$):</b>\n"]
        markup = InlineKeyboardMarkup()

        for signal in signals[:limit]:
            emoji = "üü¢" if signal["signal_type"] in ["BREAKOUT_LONG", "PRE_TOP"] else "üî¥"
            response.append(f"\n{emoji} <b>{signal['symbol']}</b> - {signal['price_change']:+.2f}%")
            response.append(f"   üìä –û–±—Å—è–≥: {signal['volume']:.1f}M | RSI: {signal['rsi']:.1f}")
            response.append(f"   üéØ {signal['signal_type']} ({signal['confidence']}% –≤–ø–µ–≤–Ω–µ–Ω–æ—Å—Ç—ñ)")
            response.append(f"   üí° {signal['strategy']}")
            markup.add(InlineKeyboardButton(f"üìä {signal['symbol']}", callback_data=f"details_{signal['symbol']}"))

        # –î–æ–¥–∞—î–º–æ –≥—Ä–∞—Ñ—ñ–∫ –¥–ª—è —Ç–æ–ø-1 —Å–∏–≥–Ω–∞–ª—É
        try:
            top_symbol = signals[0]["symbol"]
            img = plot_candles(top_symbol, interval=interval, limit=100)
            bot.send_photo(message.chat.id, img, caption="\n".join(response), parse_mode="HTML", reply_markup=markup)
        except:
            bot.reply_to(message, "\n".join(response), parse_mode="HTML", reply_markup=markup)

    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")

# ---------- /smart_details ----------
@bot.message_handler(commands=['smart_details'])
def smart_details_handler(message):
    """
    –î–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –∞–∫—Ç–∏–≤—É
    –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /smart_details SYMBOL [INTERVAL]
    """
    try:
        symbol, interval, _ = _parse_args(message.text)
        if not symbol:
            return bot.reply_to(message, "‚ö†Ô∏è –ü—Ä–∏–∫–ª–∞–¥: <code>/smart_details BTCUSDT</code>")

        interval = interval or _default_interval(message.from_user.id)
        df = get_klines(symbol, interval=interval, limit=200)
        if not df or len(df.get("c", [])) < 50:
            return bot.reply_to(message, f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è {symbol}")

        closes = np.array(df["c"], dtype=float)
        volumes = np.array(df["v"], dtype=float)
        rsi = calculate_rsi(closes)
        sr_levels = find_levels(df)
        last_price = closes[-1]

        signals_1h = generate_signal_text(symbol, interval="1h")
        signals_4h = generate_signal_text(symbol, interval="4h")
        signal_type = "NEUTRAL"
        confidence = 50
        for lvl in sr_levels["resistances"]:
            if last_price > lvl * 1.01:
                signal_type = "BREAKOUT_LONG"
                confidence = 80 if "LONG" in signals_4h else 70
                break
        for lvl in sr_levels["supports"]:
            if last_price < lvl * 0.99:
                signal_type = "BREAKOUT_SHORT"
                confidence = 80 if "SHORT" in signals_4h else 70
                break

        strategy = generate_strategy(signal_type, last_price, sr_levels)
        response = [
            f"üìä <b>Smart Details for {symbol} [{interval}]</b>",
            f"üí∞ –ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞: ${last_price:.6f}",
            f"üìà RSI: {rsi:.1f}",
            f"üéØ –°–∏–≥–Ω–∞–ª: {signal_type} ({confidence}% –≤–ø–µ–≤–Ω–µ–Ω–æ—Å—Ç—ñ)",
            f"üìä 1h: {signals_1h.splitlines()[0][:50]}...",
            f"üìä 4h: {signals_4h.splitlines()[0][:50]}...",
            f"üí° –°—Ç—Ä–∞—Ç–µ–≥—ñ—è: {strategy}",
            f"üîé –†—ñ–≤–Ω—ñ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏: {', '.join(f'{x:.4f}' for x in sr_levels['supports'][:3])}",
            f"üîé –†—ñ–≤–Ω—ñ –æ–ø–æ—Ä—É: {', '.join(f'{x:.4f}' for x in sr_levels['resistances'][:3])}"
        ]

        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("üìà –ì—Ä–∞—Ñ—ñ–∫", callback_data=f"chart_{interval}_{symbol}"))
        markup.add(InlineKeyboardButton("üîî –ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –∞–ª–µ—Ä—Ç", callback_data=f"alert_{symbol}"))

        try:
            img = plot_candles(symbol, interval=interval, limit=100)
            bot.send_photo(message.chat.id, img, caption="\n".join(response), parse_mode="HTML", reply_markup=markup)
        except:
            bot.reply_to(message, "\n".join(response), parse_mode="HTML", reply_markup=markup)

    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")

# ---------- /smart_alert ----------
@bot.message_handler(commands=['smart_alert'])
def smart_alert_handler(message):
    """
    –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞–ª–µ—Ä—Ç—É –¥–ª—è –∞–∫—Ç–∏–≤—É
    –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /smart_alert SYMBOL
    """
    try:
        symbol, _, _ = _parse_args(message.text)
        if not symbol:
            return bot.reply_to(message, "‚ö†Ô∏è –ü—Ä–∏–∫–ª–∞–¥: <code>/smart_alert BTCUSDT</code>")

        url = f"https://api.binance.com/api/v3/ticker/24hr?symbol={symbol}"
        response = requests.get(url, timeout=10)
        data = response.json()
        current_price = float(data.get("lastPrice", 0))
        if current_price == 0:
            return bot.reply_to(message, f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ü—ñ–Ω—É –¥–ª—è {symbol}")

        signals_1h = generate_signal_text(symbol, interval="1h")
        is_bullish = any(keyword in signals_1h for keyword in ["LONG", "BUY", "UP", "BULL"])
        is_bearish = any(keyword in signals_1h for keyword in ["SHORT", "SELL", "DOWN", "BEAR"])

        if not (is_bullish or is_bearish):
            return bot.reply_to(message, f"üîç –î–ª—è {symbol} –Ω–µ–º–∞—î —á—ñ—Ç–∫–∏—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤")

        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ä—ñ–≤–Ω—ñ–≤
        entry_price = round(current_price * (0.98 if is_bullish else 1.02), 6)
        stop_loss = round(entry_price * (0.98 if is_bullish else 1.02), 6)
        take_profit = round(entry_price * (1.06 if is_bullish else 0.94), 6)
        direction = "LONG" if is_bullish else "SHORT"
        emoji = "üü¢" if is_bullish else "üî¥"

        response = [
            f"{emoji} <b>Smart Alert for {symbol}</b>",
            f"üìä –ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞: ${current_price:.6f}",
            f"üéØ –ù–∞–ø—Ä—è–º–æ–∫: {direction}",
            f"üí∞ –í—Ö—ñ–¥: ${entry_price:.6f}",
            f"üõë –°—Ç–æ–ø-–ª–æ—Å: ${stop_loss:.6f}",
            f"üèÜ –¢–µ–π–∫-–ø—Ä–æ—Ñ—ñ—Ç: ${take_profit:.6f}",
            f"üìà R:R 1:3",
            f"üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è: –ß–µ–∫–∞—Ç–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –Ω–∞ 1h"
        ]

        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("üìà –ì—Ä–∞—Ñ—ñ–∫ 1h", callback_data=f"chart_1h_{symbol}"))
        markup.add(InlineKeyboardButton("üîÑ –û–Ω–æ–≤–∏—Ç–∏ –∞–ª–µ—Ä—Ç", callback_data=f"alert_{symbol}"))

        bot.reply_to(message, "\n".join(response), parse_mode="HTML", reply_markup=markup)

    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")

# ---------- /smart_config ----------
@bot.message_handler(commands=['smart_config'])
def smart_config_handler(message):
    """
    –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ —Å–∫–∞–Ω–µ—Ä–∞
    """
    try:
        user_id = message.from_user.id
        settings = _user_settings.get(user_id, {"interval": "1h", "min_volume": 5000000, "favorites": []})

        response = [
            "‚öôÔ∏è <b>Smart Scanner Settings</b>",
            f"üìä –¢–∞–π–º—Ñ—Ä–µ–π–º: {settings['interval']}",
            f"üí∞ –ú—ñ–Ω. –æ–±—Å—è–≥: ${settings['min_volume']/1e6:.0f}M",
            f"üíé –£–ª—é–±–ª–µ–Ω—ñ –º–æ–Ω–µ—Ç–∏: {', '.join(settings['favorites']) or '–ù–µ–º–∞—î'}",
            "üéØ –û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:"
        ]

        markup = InlineKeyboardMarkup()
        markup.row(
            InlineKeyboardButton("üìä –ó–º—ñ–Ω–∏—Ç–∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º", callback_data="config_interval"),
            InlineKeyboardButton("üí∞ –ó–º—ñ–Ω–∏—Ç–∏ –æ–±—Å—è–≥", callback_data="config_volume")
        )
        markup.add(InlineKeyboardButton("üíé –£–ª—é–±–ª–µ–Ω—ñ –º–æ–Ω–µ—Ç–∏", callback_data="config_favorites"))

        bot.reply_to(message, "\n".join(response), parse_mode="HTML", reply_markup=markup)

    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")

# ---------- /smart_stats ----------
@bot.message_handler(commands=['smart_stats'])
def smart_stats_handler(message):
    """
    –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ —Å–∏–≥–Ω–∞–ª—ñ–≤
    """
    try:
        # –Ü–º—ñ—Ç–∞—Ü—ñ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—ñ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –±–∞–∑–∞ –¥–∞–Ω–∏—Ö)
        signals_count = random.randint(20, 50)
        success_rate = random.uniform(60, 80)
        avg_profit = random.uniform(3, 8)

        response = [
            "üìä <b>Smart Scanner Statistics</b>",
            f"üìà –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å–∏–≥–Ω–∞–ª—ñ–≤ –∑–∞ 24h: {signals_count}",
            f"‚úÖ –£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å: {success_rate:.1f}%",
            f"üí∞ –°–µ—Ä–µ–¥–Ω—ñ–π –ø—Ä–∏–±—É—Ç–æ–∫: {avg_profit:.1f}%",
            "‚ö†Ô∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—É—î—Ç—å—Å—è –Ω–∞ —ñ—Å—Ç–æ—Ä–∏—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö"
        ]

        bot.reply_to(message, "\n".join(response), parse_mode="HTML")

    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")

# ---------- /smart_trend ----------
@bot.message_handler(commands=['smart_trend'])
def smart_trend_handler(message):
    """
    –ê–Ω–∞–ª—ñ–∑ —Ç—Ä–µ–Ω–¥—ñ–≤ –¥–ª—è —Ç–æ–ø-–∞–∫—Ç–∏–≤—ñ–≤
    """
    try:
        processing_msg = bot.send_message(message.chat.id, "üîç –ê–Ω–∞–ª—ñ–∑—É—é —Ç—Ä–µ–Ω–¥–∏...")
        user_id = message.from_user.id
        interval = "4h"

        url = "https://api.binance.com/api/v3/ticker/24hr"
        response = requests.get(url, timeout=10)
        data = response.json()

        usdt_pairs = [
            d for d in data
            if d["symbol"].endswith("USDT") and float(d["quoteVolume"]) > _default_min_volume(user_id)
        ]
        top_pairs = sorted(
            usdt_pairs,
            key=lambda x: float(x["quoteVolume"]),
            reverse=True
        )[:10]

        trends = []
        for pair in top_pairs:
            symbol = pair["symbol"]
            try:
                df = get_klines(symbol, interval=interval, limit=200)
                closes = np.array(df["c"], dtype=float)
                trend = (closes[-1] - closes[-24]) / closes[-24] * 100 if len(closes) >= 24 else 0
                if abs(trend) > 5:
                    trends.append({
                        "symbol": symbol,
                        "trend": trend,
                        "volume": float(pair["quoteVolume"]) / 1000000
                    })
            except:
                continue

        try:
            bot.delete_message(message.chat.id, processing_msg.message_id)
        except:
            pass

        if not trends:
            bot.reply_to(message, "üîç –°–∏–ª—å–Ω–∏—Ö —Ç—Ä–µ–Ω–¥—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return

        response = ["üìà <b>Smart Trend Analysis</b>\n"]
        for trend in trends[:5]:
            emoji = "üü¢" if trend["trend"] > 0 else "üî¥"
            response.append(f"{emoji} <b>{trend['symbol']}</b>: {trend['trend']:+.2f}% | Vol: {trend['volume']:.1f}M")

        bot.reply_to(message, "\n".join(response), parse_mode="HTML")

    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")

# ---------- Callback –æ–±—Ä–æ–±–Ω–∏–∫–∏ ----------
@bot.callback_query_handler(func=lambda call: True)
def handle_callbacks(call):
    """
    –û–±—Ä–æ–±–∫–∞ –≤—Å—ñ—Ö callback-–∑–∞–ø–∏—Ç—ñ–≤
    """
    try:
        data = call.data
        user_id = call.from_user.id

        if data.startswith("details_"):
            symbol = data.replace("details_", "")
            fake_msg = type("FakeMessage", (), {
                "chat": type("Chat", (), {"id": call.message.chat.id}),
                "text": f"/smart_details {symbol}",
                "from_user": type("User", (), {"id": user_id})
            })()
            smart_details_handler(fake_msg)

        elif data.startswith("alert_"):
            symbol = data.replace("alert_", "")
            fake_msg = type("FakeMessage", (), {
                "chat": type("Chat", (), {"id": call.message.chat.id}),
                "text": f"/smart_alert {symbol}",
                "from_user": type("User", (), {"id": user_id})
            })()
            smart_alert_handler(fake_msg)

        elif data.startswith("chart_"):
            _, interval, symbol = data.split("_")
            img = plot_candles(symbol, interval=interval, limit=100)
            bot.send_photo(call.message.chat.id, img, caption=f"üìä <b>{symbol} [{interval}]</b>", parse_mode="HTML")

        elif data == "config_interval":
            markup = InlineKeyboardMarkup()
            for tf in ["15m", "1h", "4h", "1d"]:
                markup.add(InlineKeyboardButton(tf, callback_data=f"set_interval_{tf}"))
            bot.edit_message_text("üìä –û–±–µ—Ä—ñ—Ç—å —Ç–∞–π–º—Ñ—Ä–µ–π–º:", call.message.chat.id, call.message.message_id, reply_markup=markup)

        elif data == "config_volume":
            _user_settings[user_id] = _user_settings.get(user_id, {})
            user_settings_state[user_id] = ("waiting_volume", call)
            bot.send_message(call.message.chat.id, "üí∞ –í–≤–µ–¥—ñ—Ç—å –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –æ–±—Å—è–≥ ($M, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ 10):")

        elif data == "config_favorites":
            _user_settings[user_id] = _user_settings.get(user_id, {})
            user_settings_state[user_id] = ("waiting_favorites", call)
            bot.send_message(call.message.chat.id, "üíé –í–≤–µ–¥—ñ—Ç—å —É–ª—é–±–ª–µ–Ω—ñ –º–æ–Ω–µ—Ç–∏ —á–µ—Ä–µ–∑ –∫–æ–º—É (BTCUSDT,ETHUSDT):")

        elif data.startswith("set_interval_"):
            interval = data.replace("set_interval_", "")
            _user_settings[user_id] = _user_settings.get(user_id, {})
            _user_settings[user_id]["interval"] = interval
            bot.answer_callback_query(call.id, f"‚úÖ –¢–∞–π–º—Ñ—Ä–µ–π–º –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {interval}")
            smart_config_handler(call.message)

    except Exception as e:
        bot.answer_callback_query(call.id, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")

# ---------- –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å ----------
@bot.message_handler(func=lambda message: True)
def handle_text_messages(message):
    try:
        user_id = message.from_user.id
        text = message.text.strip()

        if user_id in user_settings_state:
            state, callback_message = user_settings_state[user_id]

            if state == "waiting_volume":
                try:
                    volume = float(text) * 1e6
                    if volume >= 1e6:
                        _user_settings[user_id]["min_volume"] = volume
                        bot.send_message(user_id, f"‚úÖ –ú—ñ–Ω. –æ–±—Å—è–≥ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: ${volume/1e6:.0f}M")
                        smart_config_handler(callback_message)
                    else:
                        bot.send_message(user_id, "‚ùå –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ ‚â• 1")
                except ValueError:
                    bot.send_message(user_id, "‚ùå –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ")

            elif state == "waiting_favorites":
                coins = [coin.strip().upper() for coin in text.split(",")]
                valid_coins = [coin for coin in coins if coin.endswith("USDT") and len(coin) > 4]
                if valid_coins:
                    _user_settings[user_id]["favorites"] = valid_coins
                    bot.send_message(user_id, f"‚úÖ –£–ª—é–±–ª–µ–Ω—ñ –º–æ–Ω–µ—Ç–∏: {', '.join(valid_coins)}")
                else:
                    bot.send_message(user_id, "‚ùå –ü—Ä–∏–∫–ª–∞–¥: BTCUSDT,ETHUSDT")
                smart_config_handler(callback_message)

            del user_settings_state[user_id]

    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")

# ---------- –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó ----------
def calculate_rsi(prices, period=14):
    if len(prices) < period + 1:
        return 50
    deltas = [prices[i] - prices[i-1] for i in range(1, len(prices))]
    gains = [d if d > 0 else 0 for d in deltas]
    losses = [-d if d < 0 else 0 for d in deltas]
    avg_gain = sum(gains[:period]) / period
    avg_loss = sum(losses[:period]) / period
    if avg_loss == 0:
        return 100
    rs = avg_gain / avg_loss
    return 100 - (100 / (1 + rs))

def generate_strategy(signal_type, price, levels):
    if signal_type == "BREAKOUT_LONG":
        entry = price * 0.98
        sl = entry * 0.98
        tp = entry * 1.06
        return f"LONG: –í—Ö—ñ–¥ ${entry:.2f}, SL ${sl:.2f}, TP ${tp:.2f}"
    elif signal_type == "BREAKOUT_SHORT":
        entry = price * 1.02
        sl = entry * 1.02
        tp = entry * 0.94
        return f"SHORT: –í—Ö—ñ–¥ ${entry:.2f}, SL ${sl:.2f}, TP ${tp:.2f}"
    elif signal_type == "PRE_TOP":
        nearest_res = min([lvl for lvl in levels["resistances"] if lvl > price], default=price * 1.05)
        return f"SHORT –±—ñ–ª—è –æ–ø–æ—Ä—É ${nearest_res:.2f}, SL ${nearest_res*1.02:.2f}"
    return "–ß–µ–∫–∞—Ç–∏ —á—ñ—Ç–∫–æ–≥–æ —Å–∏–≥–Ω–∞–ª—É"

# –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
user_settings_state = {}