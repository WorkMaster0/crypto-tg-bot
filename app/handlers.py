from datetime import datetime
import numpy as np
import requests
from telebot import types
from app.analytics import get_klines, generate_signal_text
from app.config import ALLOWED_INTERVALS

# –ì–ª–æ–±–∞–ª—å–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
_user_defaults = {}

def _default_interval(chat_id):
    return _user_defaults.get(chat_id, {}).get("interval", "1h")

def find_support_resistance(prices, window=20, delta=0.005):
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ñ S/R —Ä—ñ–≤–Ω—ñ
    """
    sr_levels = []
    for i in range(window, len(prices)-window):
        local_max = max(prices[i-window:i+window+1])
        local_min = min(prices[i-window:i+window+1])
        if prices[i] == local_max:
            if all(abs(prices[i]-lvl)/lvl > delta for lvl in sr_levels):
                sr_levels.append(prices[i])
        elif prices[i] == local_min:
            if all(abs(prices[i]-lvl)/lvl > delta for lvl in sr_levels):
                sr_levels.append(prices[i])
    return sorted(sr_levels)

# ---------- /smart_auto (–ü–û–ö–†–ê–©–ï–ù–ê –í–ï–†–°–Ü–Ø) ----------
@bot.message_handler(commands=['smart_auto'])
def smart_auto_handler(message):
    """
    –ü–æ–∫—Ä–∞—â–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è S/R —Ä—ñ–≤–Ω—ñ–≤
    –î–æ–¥–∞–Ω–æ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—é –∑–∞ –æ–±—Å—è–≥–æ–º, –∫—Ä–∞—â—É –∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—é —Å–∏–≥–Ω–∞–ª—ñ–≤
    """
    try:
        processing_msg = bot.send_message(message.chat.id, "üîç AI —Å–∫–∞–Ω—É—î —Ä–∏–Ω–æ–∫ –¥–ª—è S/R —Å–∏–≥–Ω–∞–ª—ñ–≤...")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑ Binance API
        url = "https://api.binance.com/api/v3/ticker/24hr"
        response = requests.get(url, timeout=10)
        data = response.json()

        # –§—ñ–ª—å—Ç—Ä—É—î–º–æ —è–∫—ñ—Å–Ω—ñ –ø–∞—Ä–∏: USDT, –æ–±—Å—è–≥ > 10M, —Ü—ñ–Ω–∞ > 0.01
        symbols = [
            d for d in data
            if (d["symbol"].endswith("USDT") and 
                float(d["quoteVolume"]) > 10000000 and
                float(d["lastPrice"]) > 0.01)
        ]

        # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ –∞–±—Å–æ–ª—é—Ç–Ω–æ—é –∑–º—ñ–Ω–æ—é —Ü—ñ–Ω–∏ (–Ω–∞–π–±—ñ–ª—å—à –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ñ)
        symbols = sorted(
            symbols,
            key=lambda x: abs(float(x["priceChangePercent"])),
            reverse=True
        )

        # –ë–µ—Ä–µ–º–æ —Ç–æ–ø-25 –Ω–∞–π–∞–∫—Ç–∏–≤–Ω—ñ—à–∏—Ö
        top_symbols = [s["symbol"] for s in symbols[:25]]
        
        signals = []
        
        for symbol in top_symbols:
            try:
                # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –¥–ª—è —Ç–µ—Ö–Ω—ñ—á–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É
                df = get_klines(symbol, interval="1h", limit=100)
                if not df or len(df.get("c", [])) < 50:
                    continue

                closes = np.array(df["c"], dtype=float)
                volumes = np.array(df["v"], dtype=float)
                
                # –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Ä—ñ–≤–Ω—ñ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏/–æ–ø–æ—Ä—É
                sr_levels = find_support_resistance(closes, window=20, delta=0.005)
                if not sr_levels:
                    continue
                    
                last_price = closes[-1]
                current_volume = volumes[-1]
                avg_volume = np.mean(volumes[-20:])
                
                # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –∫–æ–∂–µ–Ω —Ä—ñ–≤–µ–Ω—å
                for level in sr_levels:
                    diff_pct = (last_price - level) / level * 100
                    
                    # –°–∏–≥–Ω–∞–ª –ø—Ä–æ–±–æ—é –æ–ø–æ—Ä—É (LONG)
                    if last_price > level * 1.01 and abs(diff_pct) < 5:
                        signal_type = "RESISTANCE_BREAKOUT"
                        direction = "LONG"
                        strength = "STRONG" if current_volume > avg_volume * 1.5 else "MODERATE"
                        
                        signals.append({
                            'symbol': symbol,
                            'level': level,
                            'current_price': last_price,
                            'signal_type': signal_type,
                            'direction': direction,
                            'strength': strength,
                            'volume_ratio': current_volume / avg_volume,
                            'change_pct': diff_pct
                        })
                    
                    # –°–∏–≥–Ω–∞–ª –ø—Ä–æ–±–æ—é –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ (SHORT)
                    elif last_price < level * 0.99 and abs(diff_pct) < 5:
                        signal_type = "SUPPORT_BREAKOUT"
                        direction = "SHORT"
                        strength = "STRONG" if current_volume > avg_volume * 1.5 else "MODERATE"
                        
                        signals.append({
                            'symbol': symbol,
                            'level': level,
                            'current_price': last_price,
                            'signal_type': signal_type,
                            'direction': direction,
                            'strength': strength,
                            'volume_ratio': current_volume / avg_volume,
                            'change_pct': diff_pct
                        })
                        
            except Exception as e:
                continue

        # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –æ–±—Ä–æ–±–∫—É
        try:
            bot.delete_message(message.chat.id, processing_msg.message_id)
        except:
            pass

        if not signals:
            bot.send_message(message.chat.id, "‚ÑπÔ∏è –ñ–æ–¥–Ω–∏—Ö S/R —Å–∏–≥–Ω–∞–ª—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            return

        # –°–æ—Ä—Ç—É—î–º–æ —Å–∏–≥–Ω–∞–ª–∏ –∑–∞ —Å–∏–ª–æ—é —Ç–∞ –æ–±—Å—è–≥–æ–º
        signals.sort(key=lambda x: (x['strength'] == "STRONG", x['volume_ratio']), reverse=True)
        
        # –§–æ—Ä–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        response = ["üéØ <b>Smart Auto S/R Signals</b>\n\n"]
        response.append("<i>–ó–Ω–∞–π–¥–µ–Ω—ñ –ø—Ä–æ–±–æ—ó —Ä—ñ–≤–Ω—ñ–≤ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏/–æ–ø–æ—Ä—É</i>\n")
        
        for i, signal in enumerate(signals[:15]):  # –û–±–º–µ–∂—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å
            emoji = "üü¢" if signal['direction'] == "LONG" else "üî¥"
            strength_emoji = "üî•" if signal['strength'] == "STRONG" else "‚ö°"
            
            response.append(
                f"\n{emoji} {strength_emoji} <b>{signal['symbol']}</b>"
            )
            response.append(f"   üìä –¢–∏–ø: {signal['signal_type']}")
            response.append(f"   üí∞ –¶—ñ–Ω–∞: {signal['current_price']:.6f}")
            response.append(f"   üéØ –†—ñ–≤–µ–Ω—å: {signal['level']:.6f}")
            response.append(f"   üìà –í—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è: {signal['change_pct']:+.2f}%")
            response.append(f"   üîä –û–±—Å—è–≥: x{signal['volume_ratio']:.1f}")
            
            # –î–æ–¥–∞—î–º–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—é
            if signal['direction'] == "LONG":
                response.append("   üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è: LONG, —Å—Ç–æ–ø-–ª–æ—Å—Å –Ω–∏–∂—á–µ —Ä—ñ–≤–Ω—è")
            else:
                response.append("   üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è: SHORT, —Å—Ç–æ–ø-–ª–æ—Å—Å –≤–∏—â–µ —Ä—ñ–≤–Ω—è")
                
            if i < len(signals[:15]) - 1:
                response.append("   ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ")

        # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É
        markup = types.InlineKeyboardMarkup()
        for signal in signals[:3]:
            markup.add(types.InlineKeyboardButton(
                f"üìä {signal['symbol']}", 
                callback_data=f"analyze_{signal['symbol']}"
            ))
        
        markup.add(types.InlineKeyboardButton(
            "üîÑ –û–Ω–æ–≤–∏—Ç–∏ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è", 
            callback_data="rescan_smart_auto"
        ))

        bot.send_message(message.chat.id, "\n".join(response), 
                        parse_mode="HTML", reply_markup=markup)

    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")

# ---------- /smart_scan (–î–õ–Ø –°–ö–ê–ù–£–í–ê–ù–ù–Ø –ó –§–Ü–õ–¨–¢–†–ê–ú–ò) ----------
@bot.message_handler(commands=['smart_scan'])
def smart_scan_handler(message):
    """
    –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è –∑ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏ –∑–∞ –Ω–∞–ø—Ä—è–º–∫–æ–º, —Å–∏–ª–æ—é —Å–∏–≥–Ω–∞–ª—É
    –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /smart_scan [long/short] [strong/moderate]
    """
    try:
        parts = message.text.split()
        direction_filter = None
        strength_filter = None
        
        if len(parts) >= 2:
            if parts[1].lower() in ['long', 'buy', 'bull']:
                direction_filter = 'LONG'
            elif parts[1].lower() in ['short', 'sell', 'bear']:
                direction_filter = 'SHORT'
                
        if len(parts) >= 3:
            if parts[2].lower() in ['strong', 'high']:
                strength_filter = 'STRONG'
            elif parts[2].lower() in ['moderate', 'medium']:
                strength_filter = 'MODERATE'
        
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç—É —Å–∞–º—É –ª–æ–≥—ñ–∫—É, —â–æ –π –≤ smart_auto
        processing_msg = bot.send_message(message.chat.id, f"üîç –°–∫–∞–Ω—É—é –∑ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏...")
        
        # –¢—É—Ç –±—É–¥–µ —Ç–∞ –∂ –ª–æ–≥—ñ–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö, —â–æ –π –≤ smart_auto
        # –∞–ª–µ –∑ –¥–æ–¥–∞—Ç–∫–æ–≤–∏–º —Ñ—ñ–ª—å—Ç—Ä—É–≤–∞–Ω–Ω—è–º –∑–∞ direction_filter —Ç–∞ strength_filter
        
        # –î–ª—è –ø—Ä–∏–∫–ª–∞–¥—É –ø—Ä–æ—Å—Ç–æ –≤–∏–∫–ª–∏–∫–∞—î–º–æ smart_auto —Ç–∞ —Ñ—ñ–ª—å—Ç—Ä—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
        bot.send_message(message.chat.id, 
                       f"üîç –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è –∑ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏: {direction_filter or '–í—Å—ñ'} {strength_filter or '–í—Å—ñ'}\n\n"
                       f"‚ÑπÔ∏è –§—É–Ω–∫—Ü—ñ—è –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ...",
                       parse_mode="HTML")
        
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")

# ---------- /smart_levels (–î–ï–¢–ê–õ–¨–ù–ò–ô –ê–ù–ê–õ–Ü–ó –ö–û–ù–ö–†–ï–¢–ù–û–ì–û –¢–û–ö–ï–ù–ê) ----------
@bot.message_handler(commands=['smart_levels'])
def smart_levels_handler(message):
    """
    –î–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ —Ä—ñ–≤–Ω—ñ–≤ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏/–æ–ø–æ—Ä—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
    –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /smart_levels BTCUSDT
    """
    try:
        parts = message.text.split()
        if len(parts) < 2:
            return bot.send_message(message.chat.id, "‚ö†Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /smart_levels BTCUSDT")
        
        symbol = parts[1].upper()
        if not symbol.endswith('USDT'):
            symbol += 'USDT'
            
        processing_msg = bot.send_message(message.chat.id, f"üîç –ê–Ω–∞–ª—ñ–∑—É—é —Ä—ñ–≤–Ω—ñ –¥–ª—è {symbol}...")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ
        df = get_klines(symbol, interval="1h", limit=200)
        if not df or len(df.get('c', [])) == 0:
            return bot.send_message(message.chat.id, f"‚ùå –î–∞–Ω—ñ –¥–ª—è {symbol} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ")

        closes = np.array(df['c'], dtype=float)
        highs = np.array(df['h'], dtype=float)
        lows = np.array(df['l'], dtype=float)
        
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Ä—ñ–≤–Ω—ñ
        sr_levels = find_support_resistance(closes, window=20, delta=0.005)
        last_price = closes[-1]
        
        if not sr_levels:
            return bot.send_message(message.chat.id, f"‚ùå –î–ª—è {symbol} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —á—ñ—Ç–∫–∏—Ö —Ä—ñ–≤–Ω—ñ–≤")
        
        # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –≤—ñ–¥–Ω–æ—Å–Ω–æ –ø–æ—Ç–æ—á–Ω–æ—ó —Ü—ñ–Ω–∏
        supports = [lvl for lvl in sr_levels if lvl < last_price]
        resistances = [lvl for lvl in sr_levels if lvl > last_price]
        
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –Ω–∞–π–±–ª–∏–∂—á—ñ —Ä—ñ–≤–Ω—ñ
        nearest_support = max(supports) if supports else None
        nearest_resistance = min(resistances) if resistances else None
        
        # –§–æ—Ä–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        response = [
            f"üìä <b>–î–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ —Ä—ñ–≤–Ω—ñ–≤ –¥–ª—è {symbol}</b>",
            f"üí∞ –ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞: {last_price:.6f}",
            f"",
            f"üéØ <b>–†—ñ–≤–Ω—ñ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏:</b>",
            *[f"‚Ä¢ {level:.6f} ({((last_price - level)/level*100):.2f}% –Ω–∏–∂—á–µ)" for level in sorted(supports, reverse=True)[:5]],
            f"",
            f"üéØ <b>–†—ñ–≤–Ω—ñ –æ–ø–æ—Ä—É:</b>",
            *[f"‚Ä¢ {level:.6f} ({((level - last_price)/last_price*100):.2f}% –≤–∏—â–µ)" for level in sorted(resistances)[:5]],
            f"",
            f"üìà <b>–ù–∞–π–±–ª–∏–∂—á—ñ —Ä—ñ–≤–Ω—ñ:</b>",
            f"‚Ä¢ –ü—ñ–¥—Ç—Ä–∏–º–∫–∞: {nearest_support:.6f if nearest_support else 'N/A'}",
            f"‚Ä¢ –û–ø—ñ—Ä: {nearest_resistance:.6f if nearest_resistance else 'N/A'}",
            f"",
            f"üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:</b>",
            f"‚Ä¢ –ö—É–ø—É–≤–∞—Ç–∏ –±—ñ–ª—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏" if nearest_support else "",
            f"‚Ä¢ –ü—Ä–æ–¥–∞–≤–∞—Ç–∏ –±—ñ–ª—è –æ–ø–æ—Ä—É" if nearest_resistance else "",
            f"‚Ä¢ –°—Ç–æ–ø-–ª–æ—Å—Å –∑–∞ —Ä—ñ–≤–Ω—è–º–∏"
        ]
        
        try:
            bot.delete_message(message.chat.id, processing_msg.message_id)
        except:
            pass
            
        bot.send_message(message.chat.id, "\n".join(response), parse_mode="HTML")
        
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")

# ---------- CALLBACK HANDLERS ----------
@bot.callback_query_handler(func=lambda call: call.data.startswith('analyze_'))
def analyze_callback(call):
    """–û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫ –∞–Ω–∞–ª—ñ–∑—É"""
    try:
        symbol = call.data.replace('analyze_', '')
        bot.send_message(call.message.chat.id, f"üîç –î–µ—Ç–∞–ª—å–Ω–æ –∞–Ω–∞–ª—ñ–∑—É—é {symbol}...")
        
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –≤–∞—à—É —ñ—Å–Ω—É—é—á—É —Ñ—É–Ω–∫—Ü—ñ—é –∞–Ω–∞–ª—ñ–∑—É
        signal_text = generate_signal_text(symbol, interval="1h")
        
        response = [
            f"üìä <b>–î–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ {symbol}:</b>",
            f"",
            f"{signal_text}",
            f"",
            f"üí° <i>–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /smart_levels {symbol} –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É —Ä—ñ–≤–Ω—ñ–≤</i>"
        ]
        
        bot.send_message(call.message.chat.id, "\n".join(response), parse_mode="HTML")
        
    except Exception as e:
        bot.send_message(call.message.chat.id, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")

@bot.callback_query_handler(func=lambda call: call.data == 'rescan_smart_auto')
def rescan_smart_auto_callback(call):
    """–ü–µ—Ä–µ—Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è"""
    try:
        bot.delete_message(call.message.chat.id, call.message.message_id)
        smart_auto_handler(call.message)
    except:
        bot.send_message(call.message.chat.id, "üîÑ –ó–∞–ø—É—Å–∫–∞—é –Ω–æ–≤–µ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è...")
        smart_auto_handler(call.message)

# ---------- /help (–û–ù–û–í–õ–ï–ù–ê –í–ï–†–°–Ü–Ø) ----------
@bot.message_handler(commands=['help'])
def help_cmd(message):
    """–û–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ–≤—ñ–¥–∫–∞ –∑ –Ω–æ–≤–∏–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏"""
    help_text = """
<b>Smart Trading Commands:</b>

üéØ <b>–û—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:</b>
<code>/smart_auto</code> - –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è S/R —Å–∏–≥–Ω–∞–ª—ñ–≤
<code>/smart_levels SYMBOL</code> - –î–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ —Ä—ñ–≤–Ω—ñ–≤
<code>/smart_scan [long/short] [strong/moderate]</code> - –§—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–µ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è

üìä <b>–ü—Ä–∏–∫–ª–∞–¥–∏:</b>
<code>/smart_auto</code> - –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤
<code>/smart_levels BTCUSDT</code> - –†—ñ–≤–Ω—ñ –¥–ª—è BTC
<code>/smart_scan long strong</code> - –¢—ñ–ª—å–∫–∏ —Å–∏–ª—å–Ω—ñ LONG —Å–∏–≥–Ω–∞–ª–∏

üí° <b>–°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª—ñ–≤:</b>
üî• STRONG - –í–∏—Å–æ–∫–∏–π –æ–±—Å—è–≥, —á—ñ—Ç–∫–∏–π –ø—Ä–æ–±—ñ–π
‚ö° MODERATE - –ü–æ–º—ñ—Ä–Ω–∏–π –æ–±—Å—è–≥, –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–∏–π –ø—Ä–æ–±—ñ–π
"""
    bot.reply_to(message, help_text)

# ---------- /start (–û–ù–û–í–õ–ï–ù–ê –í–ï–†–°–Ü–Ø) ----------
@bot.message_handler(commands=['start'])
def start(message):
    """–û–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç–∞—Ä—Ç–æ–≤–∞ –∫–æ–º–∞–Ω–¥–∞"""
    start_text = """
üöÄ <b>Smart Trading Bot</b> –∑–∞–ø—É—â–µ–Ω–æ!

–û—Å–Ω–æ–≤–Ω–∏–π —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª:
‚Ä¢ <code>/smart_auto</code> - –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è
‚Ä¢ <code>/smart_levels SYMBOL</code> - –ê–Ω–∞–ª—ñ–∑ —Ä—ñ–≤–Ω—ñ–≤
‚Ä¢ <code>/smart_scan</code> - –§—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–µ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è

–î–æ–≤—ñ–¥–∫–∞: <code>/help</code>
"""
    bot.reply_to(message, start_text)