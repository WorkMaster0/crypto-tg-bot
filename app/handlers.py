import requests
from telebot import types
import numpy as np
from app.bot import bot
from app.analytics import (
    get_price, get_klines, generate_signal_text, trend_strength_text,
    find_levels, top_movers, position_size, normalize_symbol, find_atr_squeeze  # <-- –î–æ–¥–∞–Ω–æ find_atr_squeeze
)
from app.chart import plot_candles
from app.config import DEFAULT_INTERVAL, ALLOWED_INTERVALS

# –ø—Ä–æ—Å—Ç–µ –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å —á–∞—Ç—É –≤ –û–ó–ü
_user_defaults = {}  # chat_id -> {"interval": "1h"}

def _default_interval(chat_id):
    return _user_defaults.get(chat_id, {}).get("interval", DEFAULT_INTERVAL)

def _parse_args(msg_text: str):
    parts = msg_text.split()
    symbol = None
    interval = None
    if len(parts) >= 2:
        symbol = normalize_symbol(parts[1])
    if len(parts) >= 3 and parts[2] in ALLOWED_INTERVALS:
        interval = parts[2]
    return symbol, interval

# ---------- /start ----------
@bot.message_handler(commands=['start'])
def start(message):
    bot.reply_to(message, (
        "üöÄ <b>Crypto Analysis Bot</b> –∑–∞–ø—É—â–µ–Ω–æ!\n"
        "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø—Ä–∏–∫–ª–∞–¥—ñ–≤:\n"
        "‚Ä¢ <code>/price BTCUSDT</code>\n"
        "‚Ä¢ <code>/analyze BTCUSDT 1h</code>\n"
        "‚Ä¢ <code>/levels BTCUSDT 4h</code>\n"
        "‚Ä¢ <code>/chart BTCUSDT 1h</code>\n"
        "‚Ä¢ <code>/trend BTCUSDT</code>\n"
        "‚Ä¢ <code>/heatmap</code>\n"
        "‚Ä¢ <code>/risk 1000 1 65000 64000</code>  (–±–∞–ª–∞–Ω—Å 1000$, —Ä–∏–∑–∏–∫ 1%, –≤—Ö—ñ–¥ 65000, —Å—Ç–æ–ø 64000)\n"
        "‚Ä¢ <code>/setdefault 1h</code>\n"
        "–î–æ–≤—ñ–¥–∫–∞: <code>/help</code>"
    ))

# ---------- /help ----------
@bot.message_handler(commands=['help'])
def help_cmd(message):
    bot.reply_to(message, (
        "<b>–ö–æ–º–∞–Ω–¥–∏:</b>\n"
        "<code>/price SYMBOL</code> ‚Äî –ø–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞\n"
        "<code>/analyze SYMBOL [interval]</code> ‚Äî —Å–∏–≥–Ω–∞–ª + —Ä—ñ–≤–Ω—ñ S/R\n"
        "<code>/levels SYMBOL [interval]</code> ‚Äî —Å–ø–∏—Å–æ–∫ —Ä—ñ–≤–Ω—ñ–≤ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏/–æ–ø–æ—Ä—É\n"
        "<code>/chart SYMBOL [interval]</code> ‚Äî –≥—Ä–∞—Ñ—ñ–∫ –∑ EMA —Ç–∞ —Ä—ñ–≤–Ω—è–º–∏\n"
        "<code>/trend SYMBOL [interval]</code> ‚Äî —Å–∏–ª–∞ —Ç—Ä–µ–Ω–¥—É\n"
        "<code>/heatmap [N]</code> ‚Äî —Ç–æ–ø —Ä—É—Ö—ñ–≤ USDT-–ø–∞—Ä (–∑–∞ 24h)\n"
        "<code>/risk balance risk% entry stop</code> ‚Äî —Ä–æ–∑–º—ñ—Ä –ø–æ–∑–∏—Ü—ñ—ó\n"
        "<code>/setdefault interval</code> ‚Äî —ñ–Ω—Ç–µ—Ä–≤–∞–ª –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –¥–ª—è —Ü—å–æ–≥–æ —á–∞—Ç—É\n"
        f"–î–æ—Å—Ç—É–ø–Ω—ñ —ñ–Ω—Ç–µ—Ä–≤–∞–ª–∏: {', '.join(sorted(ALLOWED_INTERVALS))}"
    ))

# ---------- /price ----------
@bot.message_handler(commands=['price'])
def price_handler(message):
    symbol, interval = _parse_args(message.text)
    if not symbol:
        return bot.reply_to(message, "‚ö†Ô∏è –ü—Ä–∏–∫–ª–∞–¥: <code>/price BTCUSDT</code>")
    try:
        price = get_price(symbol)
        bot.reply_to(message, f"üí∞ <b>{symbol}</b> = <b>{price:.6f}</b> USDT")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

# ---------- /levels ----------
@bot.message_handler(commands=['levels'])
def levels_handler(message):
    symbol, interval = _parse_args(message.text)
    if not symbol:
        return bot.reply_to(message, "‚ö†Ô∏è –ü—Ä–∏–∫–ª–∞–¥: <code>/levels BTCUSDT 1h</code>")
    interval = interval or _default_interval(message.chat.id)
    try:
        candles = get_klines(symbol, interval=interval)
        lv = find_levels(candles)
        s = ", ".join(f"{x:.4f}" for x in lv["supports"])
        r = ", ".join(f"{x:.4f}" for x in lv["resistances"])
        bot.reply_to(message, (
            f"üîé <b>{symbol}</b> [{interval}] Levels\n"
            f"Supports: {s or '‚Äî'}\n"
            f"Resistances: {r or '‚Äî'}\n"
            f"Nearest S: <b>{lv['near_support']:.4f}</b> | "
            f"Nearest R: <b>{lv['near_resistance']:.4f}</b>\n"
            f"ATR(14): {lv['atr']:.4f} | tol: {lv['tolerance']:.4f}"
        ))
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

# ---------- /analyze ----------
@bot.message_handler(commands=['analyze'])
def analyze_handler(message):
    symbol, interval = _parse_args(message.text)
    if not symbol:
        return bot.reply_to(message, "‚ö†Ô∏è –ü—Ä–∏–∫–ª–∞–¥: <code>/analyze BTCUSDT 1h</code>")
    interval = interval or _default_interval(message.chat.id)
    try:
        text = generate_signal_text(symbol, interval=interval)
        bot.reply_to(message, text)
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

# ---------- /trend ----------
@bot.message_handler(commands=['trend'])
def trend_handler(message):
    symbol, interval = _parse_args(message.text)
    if not symbol:
        return bot.reply_to(message, "‚ö†Ô∏è –ü—Ä–∏–∫–ª–∞–¥: <code>/trend BTCUSDT 4h</code>")
    interval = interval or _default_interval(message.chat.id)
    try:
        candles = get_klines(symbol, interval=interval)
        txt = trend_strength_text(candles)
        bot.reply_to(message, f"üìà <b>{symbol}</b> [{interval}]  {txt}")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

# ---------- /chart ----------
@bot.message_handler(commands=['chart'])
def chart_handler(message):
    symbol, interval = _parse_args(message.text)
    if not symbol:
        return bot.reply_to(message, "‚ö†Ô∏è –ü—Ä–∏–∫–ª–∞–¥: <code>/chart BTCUSDT 1h</code>")
    interval = interval or _default_interval(message.chat.id)
    try:
        img = plot_candles(symbol, interval=interval, limit=200, with_levels=True)
        bot.send_photo(message.chat.id, img)
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

# ---------- /heatmap ----------
@bot.message_handler(commands=['heatmap'])
def heatmap_handler(message):
    parts = message.text.split()
    try:
        n = int(parts[1]) if len(parts) > 1 else 10
    except:
        n = 10
    try:
        movers = top_movers(limit=min(max(n, 1), 20))
        lines = ["üî• <b>Top movers (24h, USDT pairs)</b>"]
        for i, (s, chg, qv) in enumerate(movers, 1):
            lines.append(f"{i}. <b>{s}</b>  {chg:+.2f}%  | vol‚âà{qv/1e6:.2f}M")
        bot.reply_to(message, "\n".join(lines))
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

# ---------- /risk ----------
@bot.message_handler(commands=['risk'])
def risk_handler(message):
    parts = message.text.split()
    if len(parts) < 5:
        return bot.reply_to(message, "‚ö†Ô∏è –ü—Ä–∏–∫–ª–∞–¥: <code>/risk 1000 1 65000 64000</code> (balance risk% entry stop)")
    try:
        balance = float(parts[1])
        risk_pct = float(parts[2])
        entry = float(parts[3])
        stop = float(parts[4])
        res = position_size(balance, risk_pct, entry, stop)
        bot.reply_to(message, (
            f"üßÆ Risk: {risk_pct:.2f}% –≤—ñ–¥ ${balance:.2f} ‚Üí ${res['risk_amount']:.2f}\n"
            f"üì¶ Position size ‚âà <b>{res['qty']:.6f}</b> —Ç–æ–∫–µ–Ω—ñ–≤\n"
            f"üéØ 1R ‚âà {abs(entry - stop):.4f} | 2R TP ‚âà {entry + (res['rr_one_tp'] if entry>stop else -res['rr_one_tp']):.4f}"
        ))
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

# ---------- /setdefault ----------
@bot.message_handler(commands=['setdefault'])
def setdefault_handler(message):
    parts = message.text.split()
    if len(parts) < 2 or parts[1] not in ALLOWED_INTERVALS:
        return bot.reply_to(message, "‚ö†Ô∏è –ü—Ä–∏–∫–ª–∞–¥: <code>/setdefault 1h</code>")
    _user_defaults.setdefault(message.chat.id, {})["interval"] = parts[1]
    bot.reply_to(message, f"‚úÖ –Ü–Ω—Ç–µ—Ä–≤–∞–ª –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –¥–ª—è —Ü—å–æ–≥–æ —á–∞—Ç—É: <b>{parts[1]}</b>")

# ---------- /squeeze ----------
@bot.message_handler(commands=['squeeze'])
def squeeze_handler(message):
    try:
        import requests
        import numpy as np

        url = "https://api.binance.com/api/v3/ticker/24hr"
        data = requests.get(url).json()

        # ‚úÖ —Ñ—ñ–ª—å—Ç—Ä—É—î–º–æ –ª–∏—à–µ USDT-–ø–∞—Ä–∏ –∑ –Ω–æ—Ä–º–∞–ª—å–Ω–∏–º –æ–±‚Äô—î–º–æ–º
        symbols = [
            d for d in data
            if d["symbol"].endswith("USDT") and float(d["quoteVolume"]) > 5_000_000
        ]

        # ‚úÖ —Å–æ—Ä—Ç—É—î–º–æ –ø–æ % –∑–º—ñ–Ω–∏ (—è–∫ —É smart_auto)
        symbols = sorted(
            symbols,
            key=lambda x: abs(float(x["priceChangePercent"])),
            reverse=True
        )

        # –±–µ—Ä–µ–º–æ —Ç–æ–ø-30
        top_symbols = [s["symbol"] for s in symbols[:30]]

        signals = []
        for symbol in top_symbols:
            try:
                df = get_klines(symbol, interval="1h", limit=200)
                if not df or len(df.get("c", [])) < 50:
                    continue

                closes = np.array(df["c"], dtype=float)
                volumes = np.array(df["v"], dtype=float)

                # ---- Bollinger Bands ----
                period = 20
                if len(closes) < period:
                    continue

                ma = np.convolve(closes, np.ones(period)/period, mode='valid')
                std = np.array([closes[i-period+1:i+1].std() for i in range(period-1, len(closes))])

                upper = ma + 2 * std
                lower = ma - 2 * std
                width = (upper - lower) / ma  # —à–∏—Ä–∏–Ω–∞ —Å–º—É–≥–∏

                last_price = closes[-1]
                last_ma = ma[-1]
                last_width = width[-1]
                prev_width = width[-5:].mean()

                # ---- –£–º–æ–≤–∏ –¥–ª—è squeeze ----
                squeeze_detected = last_width < 0.02 and last_width < prev_width * 0.7
                breakout_up = last_price > upper[-1]
                breakout_down = last_price < lower[-1]

                signal = None
                if squeeze_detected:
                    if breakout_up and volumes[-1] > np.mean(volumes[-20:]) * 1.5:
                        diff = ((last_price - upper[-1]) / upper[-1]) * 100
                        signal = f"üöÄ LONG squeeze breakout –≤–∏—â–µ {upper[-1]:.4f} ({diff:+.2f}%)"
                    elif breakout_down and volumes[-1] > np.mean(volumes[-20:]) * 1.5:
                        diff = ((last_price - lower[-1]) / lower[-1]) * 100
                        signal = f"‚ö° SHORT squeeze breakout –Ω–∏–∂—á–µ {lower[-1]:.4f} ({diff:+.2f}%)"

                if signal:
                    signals.append(f"<b>{symbol}</b>\n{signal}")

            except Exception:
                continue

        if not signals:
            bot.send_message(message.chat.id, "‚ÑπÔ∏è –ñ–æ–¥–Ω–∏—Ö squeeze-—Å–∏–≥–Ω–∞–ª—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        else:
            text = "<b>Squeeze Scanner Signals</b>\n\n" + "\n\n".join(signals)
            bot.send_message(message.chat.id, text, parse_mode="HTML")

    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–∫–∞–Ω–µ—Ä–∞: {e}")

        # ---------- /trap ----------
@bot.message_handler(commands=['trap'])
def trap_scanner(message):
    """–°–∫–∞–Ω—É—î —Ç–æ–ø –ø–∞—Ä–∏ –Ω–∞ –ø–∞—Å—Ç–∫–∏ –ª—ñ–∫–≤—ñ–¥–Ω–æ—Å—Ç—ñ"""
    top_pairs = ['BTCUSDT', 'ETHUSDT', 'BNBUSDT', 'SOLUSDT', 
                 'XRPUSDT', 'ADAUSDT', 'AVAXUSDT', 'DOTUSDT', 
                 'DOGEUSDT', 'LINKUSDT']

    traps = []
    for pair in top_pairs:
        try:
            signal = detect_liquidity_trap(pair, interval="1h", lookback=50)
            if signal:
                traps.append(signal)
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –¥–ª—è {pair}: {e}")
            continue

    if traps:
        bot.send_message(message.chat.id, 
                         "üîç <b>–í–∏—è–≤–ª–µ–Ω—ñ –ø–∞—Å—Ç–∫–∏ –ª—ñ–∫–≤—ñ–¥–Ω–æ—Å—Ç—ñ:</b>\n\n" + "\n".join(traps),
                         parse_mode="HTML")
    else:
        bot.send_message(message.chat.id, 
                         "‚úÖ –ü–∞—Å—Ç–æ–∫ –ª—ñ–∫–≤—ñ–¥–Ω–æ—Å—Ç—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –Ω–∞ 1h —Ç–∞–π–º—Ñ—Ä–µ–π–º—ñ.")
                        
# ---------- /smart_sr ----------
def find_support_resistance(prices, window=20, delta=0.005):
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ñ S/R —Ä—ñ–≤–Ω—ñ
    prices: –º–∞—Å–∏–≤ —Ü—ñ–Ω (–∑–∞–∫—Ä–∏—Ç—Ç—è)
    window: —Å–∫—ñ–ª—å–∫–∏ —Å–≤—ñ—á–æ–∫ –¥–∏–≤–∏–º–æ—Å—è –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –º–∞–∫—Å–∏–º—É–º—É/–º—ñ–Ω—ñ–º—É–º—É
    delta: –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –¥–∏—Å—Ç–∞–Ω—Ü—ñ—è –º—ñ–∂ —Ä—ñ–≤–Ω—è–º–∏ (5%)
    """
    sr_levels = []
    for i in range(window, len(prices)-window):
        local_max = max(prices[i-window:i+window+1])
        local_min = min(prices[i-window:i+window+1])
        if prices[i] == local_max:
            if all(abs(prices[i]-lvl)/lvl > delta for lvl in sr_levels):
                sr_levels.append(prices[i])
        elif prices[i] == local_min:
            if all(abs(prices[i]-lvl)/lvl > delta for lvl in sr_levels):
                sr_levels.append(prices[i])
    return sorted(sr_levels)

@bot.message_handler(commands=['smart_sr'])
def smart_sr_handler(message):
    parts = message.text.split()
    if len(parts) < 2:
        return bot.reply_to(message, "‚ö†Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /smart_sr BTCUSDT")
    symbol = parts[1].upper()
    
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ
        df = get_klines(symbol, interval="1h", limit=200)
        if not df or len(df.get('c', [])) == 0:
            return bot.send_message(message.chat.id, f"‚ùå –î–∞–Ω—ñ –¥–ª—è {symbol} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ")

        closes = np.array(df['c'], dtype=float)
        highs = np.array(df['h'], dtype=float)
        lows = np.array(df['l'], dtype=float)
        volumes = np.array(df['v'], dtype=float)
        
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ S/R —Ä—ñ–≤–Ω—ñ
        sr_levels = find_support_resistance(closes, window=20, delta=0.005)
        last_price = closes[-1]

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ breakout
        signal = "‚ÑπÔ∏è –ü–∞—Ç–µ—Ä–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
        for lvl in sr_levels:
            if last_price > lvl * 1.01:
                signal = f"üöÄ LONG breakout: —Ü—ñ–Ω–∞ –ø—Ä–æ–±–∏–ª–∞ –æ–ø—ñ—Ä {lvl:.4f}"
            elif last_price < lvl * 0.99:
                signal = f"‚ö° SHORT breakout: —Ü—ñ–Ω–∞ –ø—Ä–æ–±–∏–ª–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫—É {lvl:.4f}"

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ pre-top / pump
        if len(closes) >= 4:
            impulse = (closes[-1] - closes[-4]) / closes[-4]
        else:
            impulse = 0
        vol_spike = volumes[-1] > 1.5 * np.mean(volumes[-20:]) if len(volumes) >= 20 else False
        nearest_resistance = max([lvl for lvl in sr_levels if lvl < last_price], default=None)
        if impulse > 0.08 and vol_spike and nearest_resistance is not None:
            signal += f"\n‚ö†Ô∏è Pre-top detected: –º–æ–∂–ª–∏–≤–∏–π short –±—ñ–ª—è {nearest_resistance:.4f}"

        # –ì–µ–Ω–µ—Ä—É—î–º–æ –≥—Ä–∞—Ñ—ñ–∫
        img = plot_candles(symbol, interval="1h", limit=100)
        bot.send_photo(message.chat.id, img, caption=f"<b>{symbol} ‚Äî Smart S/R Analysis</b>\n\n{signal}", parse_mode="HTML")
        
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå Error: {e}")

# ---------- /smart_auto ----------
@bot.message_handler(commands=['smart_auto'])
def smart_auto_handler(message):
    try:
        import requests
        import numpy as np

        url = "https://api.binance.com/api/v3/ticker/24hr"
        data = requests.get(url).json()

        # ‚úÖ —Ñ—ñ–ª—å—Ç—Ä—É—î–º–æ —Ç—ñ–ª—å–∫–∏ USDT-–ø–∞—Ä–∏ –∑ –Ω–æ—Ä–º–∞–ª—å–Ω–∏–º –æ–±'—î–º–æ–º (—â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ —Å–º—ñ—Ç—Ç—î–≤–∏—Ö –º–æ–Ω–µ—Ç)
        symbols = [
            d for d in data
            if d["symbol"].endswith("USDT") and float(d["quoteVolume"]) > 5_000_000
        ]

        # ‚úÖ —Å–æ—Ä—Ç—É—î–º–æ –∑–∞ % –∑–º—ñ–Ω–∏ —Ü—ñ–Ω–∏ –∑–∞ 24 –≥–æ–¥–∏–Ω–∏ (—Ç–æ–ø —Ä—É—Ö–æ–º—ñ –º–æ–Ω–µ—Ç–∏)
        symbols = sorted(
            symbols,
            key=lambda x: abs(float(x["priceChangePercent"])),
            reverse=True
        )

        # –±–µ—Ä–µ–º–æ —Ç–æ–ø-30 –Ω–∞–π–∞–∫—Ç–∏–≤–Ω—ñ—à–∏—Ö
        top_symbols = [s["symbol"] for s in symbols[:30]]

        signals = []
        for symbol in top_symbols:
            try:
                df = get_klines(symbol, interval="1h", limit=200)
                if not df or len(df.get("c", [])) < 50:
                    continue

                closes = np.array(df["c"], dtype=float)
                volumes = np.array(df["v"], dtype=float)

                sr_levels = find_support_resistance(closes, window=20, delta=0.005)
                last_price = closes[-1]

                signal = None
                for lvl in sr_levels:
                    diff = last_price - lvl
                    diff_pct = (diff / lvl) * 100

                    if last_price > lvl * 1.01:
                        signal = (
                            f"üöÄ LONG breakout: —Ü—ñ–Ω–∞ –ø—Ä–æ–±–∏–ª–∞ –æ–ø—ñ—Ä {lvl:.4f}\n"
                            f"üìä –†–∏–Ω–∫–æ–≤–∞: {last_price:.4f} | –í—ñ–¥—Ä–∏–≤: {diff:+.4f} ({diff_pct:+.2f}%)"
                        )
                        break
                    elif last_price < lvl * 0.99:
                        signal = (
                            f"‚ö° SHORT breakout: —Ü—ñ–Ω–∞ –ø—Ä–æ–±–∏–ª–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫—É {lvl:.4f}\n"
                            f"üìä –†–∏–Ω–∫–æ–≤–∞: {last_price:.4f} | –í—ñ–¥—Ä–∏–≤: {diff:+.4f} ({diff_pct:+.2f}%)"
                        )
                        break

                # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ pre-top / pump
                impulse = (closes[-1] - closes[-4]) / closes[-4] if len(closes) >= 4 else 0
                vol_spike = volumes[-1] > 1.5 * np.mean(volumes[-20:]) if len(volumes) >= 20 else False
                nearest_res = max([lvl for lvl in sr_levels if lvl < last_price], default=None)
                if impulse > 0.08 and vol_spike and nearest_res is not None:
                    diff = last_price - nearest_res
                    diff_pct = (diff / nearest_res) * 100
                    signal = (
                        f"‚ö†Ô∏è Pre-top detected: –º–æ–∂–ª–∏–≤–∏–π short –±—ñ–ª—è {nearest_res:.4f}\n"
                        f"üìä –†–∏–Ω–∫–æ–≤–∞: {last_price:.4f} | –í—ñ–¥—Ä–∏–≤: {diff:+.4f} ({diff_pct:+.2f}%)"
                    )

                if signal:
                    signals.append(f"<b>{symbol}</b>\n{signal}")

            except Exception:
                continue

        if not signals:
            bot.send_message(message.chat.id, "‚ÑπÔ∏è –ñ–æ–¥–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        else:
            text = "<b>Smart Auto S/R Signals</b>\n\n" + "\n\n".join(signals)
            bot.send_message(message.chat.id, text, parse_mode="HTML")

    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå Error: {e}")
        
# ---------- /patern ----------
@bot.message_handler(commands=['patern', 'pattern'])
def pattern_handler(message):
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –ø–æ—à—É–∫ —Ç–æ—Ä–≥–æ–≤–∏—Ö –ø–∞—Ç–µ—Ä–Ω—ñ–≤
    –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /patern [SYMBOL] [INTERVAL]
    """
    try:
        parts = message.text.split()
        symbol = None
        interval = None
        
        if len(parts) >= 2:
            symbol = parts[1].upper()
            if not symbol.endswith('USDT'):
                symbol += 'USDT'
        
        if len(parts) >= 3 and parts[2] in ALLOWED_INTERVALS:
            interval = parts[2]
        else:
            interval = _default_interval(message.chat.id)
        
        if not symbol:
            # –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è —Ç–æ–ø –º–æ–Ω–µ—Ç —è–∫—â–æ —Å–∏–º–≤–æ–ª –Ω–µ –≤–∫–∞–∑–∞–Ω–æ
            return scan_top_patterns(message)
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ
        candles = get_klines(symbol, interval=interval, limit=100)
        if not candles or len(candles['c']) < 20:
            bot.reply_to(message, f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è {symbol} [{interval}]")
            return
        
        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –¥–∞–Ω—ñ
        opens = np.array(candles['o'], dtype=float)
        highs = np.array(candles['h'], dtype=float)
        lows = np.array(candles['l'], dtype=float)
        closes = np.array(candles['c'], dtype=float)
        volumes = np.array(candles['v'], dtype=float)
        
        patterns = []
        
        # 1. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ–±—ñ–π —Ä—ñ–≤–Ω—ñ–≤
        sr_levels = find_levels(candles)
        current_price = closes[-1]
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–æ–±–æ—é –æ–ø–æ—Ä—É
        for resistance in sr_levels['resistances']:
            if current_price > resistance * 1.01 and current_price < resistance * 1.03:
                patterns.append(("RESISTANCE_BREAKOUT", "LONG", f"–ü—Ä–æ–±–∏—Ç—Ç—è –æ–ø–æ—Ä—É {resistance:.4f}"))
                break
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–æ–±–æ—é –ø—ñ–¥—Ç—Ä–∏–º–∫–∏
        for support in sr_levels['supports']:
            if current_price < support * 0.99 and current_price > support * 0.97:
                patterns.append(("SUPPORT_BREAKOUT", "SHORT", f"–ü—Ä–æ–±–∏—Ç—Ç—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ {support:.4f}"))
                break
        
        # 2. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –∫–ª–∞—Å–∏—á–Ω—ñ —Å–≤—ñ—á–∫–æ–≤—ñ –ø–∞—Ç–µ—Ä–Ω–∏
        # –ë—É–ª—åish Engulfing
        if len(closes) >= 3:
            prev_open = opens[-2]
            prev_close = closes[-2]
            current_open = opens[-1]
            current_close = closes[-1]
            
            # –ë—É–ª—åish Engulfing
            if prev_close < prev_open and current_close > current_open and current_close > prev_open and current_open < prev_close:
                patterns.append(("BULLISH_ENGULFING", "LONG", "–ë—É–ª—åish Engulfing –ø–∞—Ç–µ—Ä–Ω"))
            
            # –ë–µ–∞—Äish Engulfing
            if prev_close > prev_open and current_close < current_open and current_close < prev_open and current_open > prev_close:
                patterns.append(("BEARISH_ENGULFING", "SHORT", "–ë–µ–∞—Äish Engulfing –ø–∞—Ç–µ—Ä–Ω"))
            
            # Hammer
            body_size = abs(current_close - current_open)
            lower_wick = min(current_open, current_close) - lows[-1]
            upper_wick = highs[-1] - max(current_open, current_close)
            
            if lower_wick > body_size * 2 and upper_wick < body_size * 0.5 and current_close > current_open:
                patterns.append(("HAMMER", "LONG", "Hammer –ø–∞—Ç–µ—Ä–Ω"))
            
            # Shooting Star
            if upper_wick > body_size * 2 and lower_wick < body_size * 0.5 and current_close < current_open:
                patterns.append(("SHOOTING_STAR", "SHORT", "Shooting Star –ø–∞—Ç–µ—Ä–Ω"))
        
        # 3. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —Ç—Ä—ñ–π–Ω–µ –¥–Ω–æ/–≤–µ—Ä—à–∏–Ω—É
        if len(closes) >= 15:
            # –ü—Ä–æ—Å—Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è —Ç—Ä—ñ–π–Ω–æ—ó –≤–µ—Ä—à–∏–Ω–∏
            last_15_highs = highs[-15:]
            last_15_lows = lows[-15:]
            
            # –ü–æ—à—É–∫ –ª–æ–∫–∞–ª—å–Ω–∏—Ö –º–∞–∫—Å–∏–º—É–º—ñ–≤
            peaks = []
            for i in range(5, len(last_15_highs)-5):
                if (last_15_highs[i] > last_15_highs[i-1] and 
                    last_15_highs[i] > last_15_highs[i+1] and
                    last_15_highs[i] > np.mean(last_15_highs)):
                    peaks.append((i, last_15_highs[i]))
            
            # –ü–æ—à—É–∫ –ª–æ–∫–∞–ª—å–Ω–∏—Ö –º—ñ–Ω—ñ–º—É–º—ñ–≤
            troughs = []
            for i in range(5, len(last_15_lows)-5):
                if (last_15_lows[i] < last_15_lows[i-1] and 
                    last_15_lows[i] < last_15_lows[i+1] and
                    last_15_lows[i] < np.mean(last_15_lows)):
                    troughs.append((i, last_15_lows[i]))
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —Ç—Ä—ñ–π–Ω—É –≤–µ—Ä—à–∏–Ω—É
            if len(peaks) >= 3:
                peaks.sort(key=lambda x: x[1], reverse=True)
                if abs(peaks[0][1] - peaks[1][1]) / peaks[0][1] < 0.02 and abs(peaks[0][1] - peaks[2][1]) / peaks[0][1] < 0.02:
                    patterns.append(("TRIPLE_TOP", "SHORT", "–¢—Ä—ñ–π–Ω–∞ –≤–µ—Ä—à–∏–Ω–∞"))
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —Ç—Ä—ñ–π–Ω–µ –¥–Ω–æ
            if len(troughs) >= 3:
                troughs.sort(key=lambda x: x[1])
                if abs(troughs[0][1] - troughs[1][1]) / troughs[0][1] < 0.02 and abs(troughs[0][1] - troughs[2][1]) / troughs[0][1] < 0.02:
                    patterns.append(("TRIPLE_BOTTOM", "LONG", "–¢—Ä—ñ–π–Ω–µ –¥–Ω–æ"))
        
        # 4. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø—Ä–∞–ø–æ—Ä–∏
        if len(closes) > 20:
            # –ê–Ω–∞–ª—ñ–∑ —Ç—Ä–µ–Ω–¥—É
            price_change = (closes[-1] - closes[-20]) / closes[-20]
            
            if abs(price_change) > 0.05:  # –ú—ñ–Ω—ñ–º—É–º 5% —Ä—É—Ö
                # –ê–Ω–∞–ª—ñ–∑ –∫–æ–Ω—Å–æ–ª—ñ–¥–∞—Ü—ñ—ó
                last_5_range = max(highs[-5:]) - min(lows[-5:])
                prev_5_range = max(highs[-10:-5]) - min(lows[-10:-5])
                
                if last_5_range < prev_5_range * 0.6:  # –ö–æ–Ω—Å–æ–ª—ñ–¥–∞—Ü—ñ—è
                    if price_change > 0:
                        patterns.append(("BULL_FLAG", "LONG", "–ë–∏—á–∞—á–∏–π –ø—Ä–∞–ø–æ—Ä"))
                    else:
                        patterns.append(("BEAR_FLAG", "SHORT", "–í–µ–¥–º–µ–∂–∏–π –ø—Ä–∞–ø–æ—Ä"))
        
        if not patterns:
            bot.reply_to(message, f"üîç –î–ª—è {symbol} [{interval}] —Ç–æ—Ä–≥–æ–≤–∏—Ö –ø–∞—Ç–µ—Ä–Ω—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return
        
        # –§–æ—Ä–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        response = [f"üéØ <b>–ó–Ω–∞–π–¥–µ–Ω—ñ –ø–∞—Ç–µ—Ä–Ω–∏ –¥–ª—è {symbol} [{interval}]:</b>\n"]
        
        for pattern_name, signal_type, description in patterns:
            emoji = "üü¢" if signal_type == "LONG" else "üî¥"
            response.append(f"{emoji} <b>{pattern_name}</b> ‚Üí {signal_type}")
            response.append(f"   üìù {description}")
        
        response.append(f"\nüìä <i>–ó–∞–≥–∞–ª–æ–º –∑–Ω–∞–π–¥–µ–Ω–æ {len(patterns)} –ø–∞—Ç–µ—Ä–Ω(—ñ–≤)</i>")
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≥—Ä–∞—Ñ—ñ–∫
        try:
            img = plot_candles(symbol, interval=interval, limit=100)
            bot.send_photo(message.chat.id, img, caption="\n".join(response), parse_mode="HTML")
        except:
            bot.reply_to(message, "\n".join(response), parse_mode="HTML")
            
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É –ø–∞—Ç–µ—Ä–Ω—ñ–≤: {str(e)}")

def scan_top_patterns(message):
    """
    –°–∫–∞–Ω—É—î —Ç–æ–ø –º–æ–Ω–µ—Ç–∏ –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –ø–∞—Ç–µ—Ä–Ω—ñ–≤
    """
    try:
        url = "https://api.binance.com/api/v3/ticker/24hr"
        response = requests.get(url)
        data = response.json()
        
        # –§—ñ–ª—å—Ç—Ä—É—î–º–æ USDT –ø–∞—Ä–∏ –∑ –≤–∏—Å–æ–∫–∏–º –æ–±—Å—è–≥–æ–º
        usdt_pairs = [d for d in data if d['symbol'].endswith('USDT') and float(d['quoteVolume']) > 10000000]
        top_pairs = sorted(usdt_pairs, key=lambda x: float(x['quoteVolume']), reverse=True)[:15]
        
        found_patterns = []
        
        for pair in top_pairs:
            symbol = pair['symbol']
            try:
                candles = get_klines(symbol, interval="1h", limit=50)
                if not candles or len(candles['c']) < 20:
                    continue
                
                closes = np.array(candles['c'], dtype=float)
                opens = np.array(candles['o'], dtype=float)
                highs = np.array(candles['h'], dtype=float)
                lows = np.array(candles['l'], dtype=float)
                
                current_price = closes[-1]
                prev_close = closes[-2] if len(closes) >= 2 else current_price
                
                # –ü—Ä–æ—Å—Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ–±—ñ–π
                price_change = (current_price - prev_close) / prev_close
                
                if abs(price_change) > 0.03:  # 3% –∑–º—ñ–Ω–∞
                    direction = "LONG" if price_change > 0 else "SHORT"
                    found_patterns.append((symbol, "BREAKOUT", direction, f"{abs(price_change)*100:.1f}%"))
                
            except:
                continue
        
        if not found_patterns:
            bot.reply_to(message, "üîç –¢–æ—Ä–≥–æ–≤–∏—Ö –ø–∞—Ç–µ—Ä–Ω—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É —Ç–æ–ø –º–æ–Ω–µ—Ç–∞—Ö")
            return
        
        # –§–æ—Ä–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        response = ["üîç <b>–¢–æ–ø –º–æ–Ω–µ—Ç–∏ –∑ —Ç–æ—Ä–≥–æ–≤–∏–º–∏ –ø–∞—Ç–µ—Ä–Ω–∞–º–∏ (1h):</b>\n"]
        
        for symbol, pattern, direction, change in found_patterns[:10]:
            emoji = "üü¢" if direction == "LONG" else "üî¥"
            response.append(f"{emoji} {symbol}: {pattern} {direction} ({change})")
        
        bot.reply_to(message, "\n".join(response), parse_mode="HTML")
        
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—ñ —Ç–æ–ø –º–æ–Ω–µ—Ç: {str(e)}")
        
# ---------- /analyze_auto (–ó –§–Ü–õ–¨–¢–†–û–ú –ü–û –û–ë–°–Ø–ì–£) ----------
@bot.message_handler(commands=['analyze_auto'])
def analyze_auto_handler(message):
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è –¥–ª—è –ø–æ—à—É–∫—É –°–ò–õ–¨–ù–ò–• —Å–∏–≥–Ω–∞–ª—ñ–≤ (–∑ —Ñ—ñ–ª—å—Ç—Ä–æ–º –æ–±—Å—è–≥—É)
    """
    try:
        processing_msg = bot.send_message(message.chat.id, "üîç –®—É–∫–∞—é —Å–∏–ª—å–Ω—ñ —Å–∏–≥–Ω–∞–ª–∏...")
        
        url = "https://api.binance.com/api/v3/ticker/24hr"
        response = requests.get(url, timeout=15)
        data = response.json()
        
        # –§—ñ–ª—å—Ç—Ä—É—î–º–æ: USDT –ø–∞—Ä–∏ + –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –æ–±—Å—è–≥ 10M$ + –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Ü—ñ–Ω–∞ 0.01$
        usdt_pairs = [
            d for d in data 
            if (d['symbol'].endswith('USDT') and 
                float(d['quoteVolume']) > 10000000 and  # 10M$ –æ–±—Å—è–≥
                float(d['lastPrice']) > 0.01)  # –¶—ñ–Ω–∞ –≤–∏—â–µ 0.01$
        ]
        
        # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ –∑–º—ñ–Ω–æ—é —Ü—ñ–Ω–∏
        top_pairs = sorted(usdt_pairs, 
                          key=lambda x: abs(float(x['priceChangePercent'])), 
                          reverse=True)[:25]  # –¢–æ–ø-25
        
        strong_signals = []
        
        for pair in top_pairs:
            symbol = pair['symbol']
            price_change = float(pair['priceChangePercent'])
            volume = float(pair['quoteVolume']) / 1000000  # –í –º—ñ–ª—å–π–æ–Ω–∞—Ö
            
            try:
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞ —Ä—ñ–∑–Ω–∏—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞—Ö –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
                signals_1h = generate_signal_text(symbol, interval="1h")
                signals_4h = generate_signal_text(symbol, interval="4h")
                
                # –®—É–∫–∞—î–º–æ –ß–Ü–¢–ö–Ü —Å–∏–≥–Ω–∞–ª–∏ –∑ –∫–ª—é—á–æ–≤–∏–º–∏ —Å–ª–æ–≤–∞–º–∏
                is_strong_long_1h = any(keyword in signals_1h for keyword in 
                                      ['STRONG LONG', 'STRONG_BUY', '—Å–∏–ª—å–Ω–∏–π –ª–æ–Ω–≥', '–ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–∏–π –ª–æ–Ω–≥'])
                is_strong_short_1h = any(keyword in signals_1h for keyword in 
                                       ['STRONG SHORT', 'STRONG_SELL', '—Å–∏–ª—å–Ω–∏–π —à–æ—Ä—Ç', '–ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–∏–π —à–æ—Ä—Ç'])
                
                is_strong_long_4h = any(keyword in signals_4h for keyword in 
                                      ['STRONG LONG', 'STRONG_BUY', '—Å–∏–ª—å–Ω–∏–π –ª–æ–Ω–≥', '–ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–∏–π –ª–æ–Ω–≥'])
                is_strong_short_4h = any(keyword in signals_4h for keyword in 
                                       ['STRONG SHORT', 'STRONG_SELL', '—Å–∏–ª—å–Ω–∏–π —à–æ—Ä—Ç', '–ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–∏–π —à–æ—Ä—Ç'])
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–Ω—Å–µ–Ω—Å—É—Å –º—ñ–∂ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º–∏
                long_consensus = (is_strong_long_1h and is_strong_long_4h) or (is_strong_long_1h and not is_strong_short_4h) or (is_strong_long_4h and not is_strong_short_1h)
                short_consensus = (is_strong_short_1h and is_strong_short_4h) or (is_strong_short_1h and not is_strong_long_4h) or (is_strong_short_4h and not is_strong_long_1h)
                
                if long_consensus or short_consensus:
                    signal_type = "STRONG LONG" if long_consensus else "STRONG SHORT"
                    
                    # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –∑–≥–æ–¥—É –∑ —Ü—ñ–Ω–æ–≤–∏–º —Ä—É—Ö–æ–º
                    price_agreement = (price_change > 0 and long_consensus) or (price_change < 0 and short_consensus)
                    agreement_emoji = "‚úÖ" if price_agreement else "‚ö†Ô∏è"
                    
                    strong_signals.append({
                        'symbol': symbol,
                        'price_change': price_change,
                        'volume': volume,
                        'signal_type': signal_type,
                        'agreement': price_agreement,
                        'agreement_emoji': agreement_emoji,
                        'signal_1h': signals_1h,
                        'signal_4h': signals_4h
                    })
                    
            except Exception:
                continue
        
        try:
            bot.delete_message(message.chat.id, processing_msg.message_id)
        except:
            pass
        
        if not strong_signals:
            bot.reply_to(message, "üîç –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Å–∏–ª—å–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤ –∑ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–æ–º")
            return
        
        # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ –æ–±—Å—è–≥–æ–º (—â–æ–± –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏ –ª—ñ–∫–≤—ñ–¥–Ω—ñ—à—ñ –ø–µ—Ä—à–∏–º–∏)
        strong_signals.sort(key=lambda x: x['volume'], reverse=True)
        
        response = ["üéØ <b>–°–ò–õ–¨–ù–Ü —Å–∏–≥–Ω–∞–ª–∏ (–æ–±—Å—è–≥ >10M$, —Ü—ñ–Ω–∞ >0.01$):</b>\n"]
        
        for signal in strong_signals[:10]:
            emoji = "üü¢" if "LONG" in signal['signal_type'] else "üî¥"
            response.append(
                f"\n{emoji} <b>{signal['symbol']}</b> - {signal['price_change']:+.2f}%"
            )
            response.append(f"   üìä –û–±—Å—è–≥: {signal['volume']:.1f}M")
            response.append(f"   {signal['agreement_emoji']} {signal['signal_type']}")
            
            # –î–æ–¥–∞—î–º–æ –∫–æ—Ä–æ—Ç–∫—É —ñ–Ω—Ñ–æ –∑ 1h —Ç–∞–π–º—Ñ—Ä–µ–π–º—É
            lines_1h = signal['signal_1h'].split('\n')
            response.append(f"   1h: {lines_1h[0][:50]}...")
        
        bot.reply_to(message, "\n".join(response), parse_mode="HTML")
        
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")

# ---------- /analyze_multi (–ó –§–Ü–õ–¨–¢–†–û–ú –ü–û –û–ë–°–Ø–ì–£) ----------
@bot.message_handler(commands=['analyze_multi'])
def analyze_multi_handler(message):
    """
    –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è —Ç–æ–ø —Ç–æ–∫–µ–Ω—ñ–≤ –∑–∞ –∑–º—ñ–Ω–æ—é —Ü—ñ–Ω–∏ (–∑ —Ñ—ñ–ª—å—Ç—Ä–æ–º –æ–±—Å—è–≥—É)
    """
    try:
        processing_msg = bot.send_message(message.chat.id, "üîç –®–≤–∏–¥–∫–µ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è...")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–ø —Ç–æ–∫–µ–Ω–∏
        url = "https://api.binance.com/api/v3/ticker/24hr"
        response = requests.get(url, timeout=10)
        data = response.json()
        
        # –§—ñ–ª—å—Ç—Ä: –æ–±—Å—è–≥ >20M$, —Ü—ñ–Ω–∞ >0.05$
        usdt_pairs = [
            d for d in data 
            if (d['symbol'].endswith('USDT') and 
                float(d['quoteVolume']) > 20000000 and  # 20M$ –æ–±—Å—è–≥
                float(d['lastPrice']) > 0.05)  # –¶—ñ–Ω–∞ –≤–∏—â–µ 0.05$
        ]
        
        # –¢–æ–ø-20 –∑–∞ –∑–º—ñ–Ω–æ—é —Ü—ñ–Ω–∏
        top_pairs = sorted(usdt_pairs, 
                          key=lambda x: abs(float(x['priceChangePercent'])), 
                          reverse=True)[:20]
        
        signals_found = []
        
        for pair in top_pairs:
            symbol = pair['symbol']
            price_change = float(pair['priceChangePercent'])
            volume = float(pair['quoteVolume']) / 1000000  # –í –º—ñ–ª—å–π–æ–Ω–∞—Ö
            
            try:
                signal_text = generate_signal_text(symbol, interval="1h")
                
                # –®—É–∫–∞—î–º–æ —Å–∏–≥–Ω–∞–ª–∏ –≤ —Ç–µ–∫—Å—Ç—ñ
                is_long = any(keyword in signal_text for keyword in ['LONG', 'BUY', 'UP', 'BULL'])
                is_short = any(keyword in signal_text for keyword in ['SHORT', 'SELL', 'DOWN', 'BEAR'])
                
                if is_long or is_short:
                    signal_type = "LONG" if is_long else "SHORT"
                    
                    # –ë–µ—Ä–µ–º–æ –ø–µ—Ä—à—ñ 2 —Ä—è–¥–∫–∏
                    lines = signal_text.split('\n')
                    short_info = ' | '.join(lines[:2]) if len(lines) > 1 else lines[0]
                    
                    signals_found.append((symbol, price_change, volume, signal_type, short_info))
                    
            except Exception:
                continue
        
        try:
            bot.delete_message(message.chat.id, processing_msg.message_id)
        except:
            pass
        
        if not signals_found:
            bot.reply_to(message, "üîç –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Å–∏–≥–Ω–∞–ª—ñ–≤ —É –ª—ñ–∫–≤—ñ–¥–Ω–∏—Ö —Ç–æ–∫–µ–Ω–∞—Ö")
            return
        
        # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ –æ–±—Å—è–≥–æ–º (–ª—ñ–∫–≤—ñ–¥–Ω—ñ—à—ñ –ø–µ—Ä—à–∏–º–∏)
        signals_found.sort(key=lambda x: x[2], reverse=True)
        
        response = ["‚ö° <b>–°–∏–≥–Ω–∞–ª–∏ —É –ª—ñ–∫–≤—ñ–¥–Ω–∏—Ö —Ç–æ–∫–µ–Ω–∞—Ö (–æ–±—Å—è–≥ >20M$):</b>\n"]
        
        for symbol, price_change, volume, signal_type, info in signals_found[:15]:
            emoji = "üü¢" if price_change > 0 else "üî¥"
            signal_emoji = "üü¢" if signal_type == "LONG" else "üî¥"
            response.append(f"\n{emoji} <b>{symbol}</b> - {price_change:+.2f}%")
            response.append(f"   üìä Vol: {volume:.1f}M")
            response.append(f"   {signal_emoji} {signal_type}: {info}")
        
        bot.reply_to(message, "\n".join(response), parse_mode="HTML")
        
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")

# ---------- /analyze_top (–ó –§–Ü–õ–¨–¢–†–û–ú –ü–û –û–ë–°–Ø–ì–£) ----------
@bot.message_handler(commands=['analyze_top'])
def analyze_top_handler(message):
    """
    –ü–æ—à—É–∫ —Ç–æ–∫–µ–Ω—ñ–≤ –∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—é –∫—ñ–ª—å–∫—ñ—Å—Ç—é —Å–∏–≥–Ω–∞–ª—ñ–≤ (–∑ —Ñ—ñ–ª—å—Ç—Ä–æ–º –æ–±—Å—è–≥—É)
    """
    try:
        parts = message.text.split()
        min_signals = 3  # –ú—ñ–Ω—ñ–º—É–º 3 —Å–∏–≥–Ω–∞–ª–∏
        
        if len(parts) >= 2:
            try:
                min_signals = int(parts[1])
                min_signals = max(1, min(min_signals, 6))
            except:
                pass
        
        processing_msg = bot.send_message(message.chat.id, f"üîç –®—É–∫–∞—é —Ç–æ–∫–µ–Ω–∏ –∑ {min_signals}+ —Å–∏–≥–Ω–∞–ª–∞–º–∏...")
        
        url = "https://api.binance.com/api/v3/ticker/24hr"
        response = requests.get(url, timeout=15)
        data = response.json()
        
        # –§—ñ–ª—å—Ç—Ä: –æ–±—Å—è–≥ >50M$, —Ü—ñ–Ω–∞ >0.10$
        usdt_pairs = [
            d for d in data 
            if (d['symbol'].endswith('USDT') and 
                float(d['quoteVolume']) > 50000000 and  # 50M$ –æ–±—Å—è–≥
                float(d['lastPrice']) > 0.10)  # –¶—ñ–Ω–∞ –≤–∏—â–µ 0.10$
        ]
        
        # –¢–æ–ø-30 –∑–∞ –æ–±—Å—è–≥–æ–º
        top_symbols = [pair['symbol'] for pair in sorted(usdt_pairs, 
                                                       key=lambda x: float(x['quoteVolume']), 
                                                       reverse=True)[:30]]
        
        results = []
        
        for symbol in top_symbols:
            try:
                signal_count = 0
                signal_details = []
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä—ñ–∑–Ω—ñ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∏
                for interval in ['15m', '1h', '4h', '1d']:
                    try:
                        signal_text = generate_signal_text(symbol, interval=interval)
                        
                        if any(keyword in signal_text for keyword in ['LONG', 'SHORT', 'BUY', 'SELL']):
                            signal_type = "LONG" if any(kw in signal_text for kw in ['LONG', 'BUY']) else "SHORT"
                            signal_count += 1
                            signal_details.append((interval, signal_type))
                            
                    except Exception:
                        continue
                
                if signal_count >= min_signals:
                    pair_data = [d for d in data if d['symbol'] == symbol][0]
                    price_change = float(pair_data['priceChangePercent'])
                    volume = float(pair_data['quoteVolume']) / 1000000
                    
                    results.append({
                        'symbol': symbol,
                        'signal_count': signal_count,
                        'price_change': price_change,
                        'volume': volume,
                        'details': signal_details
                    })
                    
            except Exception:
                continue
        
        try:
            bot.delete_message(message.chat.id, processing_msg.message_id)
        except:
            pass
        
        if not results:
            bot.reply_to(message, f"üîç –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ç–æ–∫–µ–Ω—ñ–≤ –∑ {min_signals}+ —Å–∏–≥–Ω–∞–ª–∞–º–∏")
            return
        
        # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ –æ–±—Å—è–≥–æ–º
        results.sort(key=lambda x: x['volume'], reverse=True)
        
        response = [f"üèÜ <b>–¢–æ–∫–µ–Ω–∏ –∑ {min_signals}+ —Å–∏–≥–Ω–∞–ª–∞–º–∏ (–æ–±—Å—è–≥ >50M$):</b>\n"]
        
        for result in results:
            emoji = "üü¢" if result['price_change'] > 0 else "üî¥"
            
            # –ì—Ä—É–ø—É—î–º–æ —Å–∏–≥–Ω–∞–ª–∏ –ø–æ —Ç–∏–ø–∞—Ö
            long_count = sum(1 for _, sig_type in result['details'] if sig_type == "LONG")
            short_count = sum(1 for _, sig_type in result['details'] if sig_type == "SHORT")
            
            response.append(
                f"\n{emoji} <b>{result['symbol']}</b> - {result['signal_count']} —Å–∏–≥–Ω. "
                f"({result['price_change']:+.2f}%)"
            )
            response.append(f"   üìä Vol: {result['volume']:.1f}M")
            response.append(f"   üü¢ {long_count} –ª–æ–Ω–≥—ñ–≤ | üî¥ {short_count} —à–æ—Ä—Ç—ñ–≤")
            
            # –î–æ–¥–∞—î–º–æ –¥–µ—Ç–∞–ª—ñ –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞—Ö
            for interval, signal_type in result['details'][:4]:
                sig_emoji = "üü¢" if signal_type == "LONG" else "üî¥"
                response.append(f"   {sig_emoji} {interval}")
        
        bot.reply_to(message, "\n".join(response), parse_mode="HTML")
        
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")

# ---------- /analyze_liquid ----------
@bot.message_handler(commands=['analyze_liquid'])
def analyze_liquid_handler(message):
    """
    –ü–æ–∫–∞–∑—É—î —Ç—ñ–ª—å–∫–∏ –Ω–∞–π–ª—ñ–∫–≤—ñ–¥–Ω—ñ—à—ñ —Ç–æ–∫–µ–Ω–∏ (–±–µ–∑ —Å–∏–≥–Ω–∞–ª—ñ–≤)
    """
    try:
        processing_msg = bot.send_message(message.chat.id, "üîç –û—Ç—Ä–∏–º—É—é —Å–ø–∏—Å–æ–∫ –ª—ñ–∫–≤—ñ–¥–Ω–∏—Ö —Ç–æ–∫–µ–Ω—ñ–≤...")
        
        url = "https://api.binance.com/api/v3/ticker/24hr"
        response = requests.get(url, timeout=10)
        data = response.json()
        
        # –§—ñ–ª—å—Ç—Ä: –æ–±—Å—è–≥ >100M$, —Ü—ñ–Ω–∞ >0.50$
        liquid_pairs = [
            d for d in data 
            if (d['symbol'].endswith('USDT') and 
                float(d['quoteVolume']) > 100000000 and  # 100M$ –æ–±—Å—è–≥
                float(d['lastPrice']) > 0.50)  # –¶—ñ–Ω–∞ –≤–∏—â–µ 0.50$
        ]
        
        # –¢–æ–ø-20 –∑–∞ –æ–±—Å—è–≥–æ–º
        top_liquid = sorted(liquid_pairs, 
                           key=lambda x: float(x['quoteVolume']), 
                           reverse=True)[:20]
        
        response = ["üíé <b>–ù–∞–π–ª—ñ–∫–≤—ñ–¥–Ω—ñ—à—ñ —Ç–æ–∫–µ–Ω–∏ (–æ–±—Å—è–≥ >100M$):</b>\n"]
        
        for i, pair in enumerate(top_liquid, 1):
            symbol = pair['symbol']
            price = float(pair['lastPrice'])
            change = float(pair['priceChangePercent'])
            volume = float(pair['quoteVolume']) / 1000000  # –í –º—ñ–ª—å–π–æ–Ω–∞—Ö
            
            emoji = "üü¢" if change > 0 else "üî¥"
            response.append(
                f"\n{i}. {emoji} <b>{symbol}</b> - ${price:,.2f} "
                f"{change:+.2f}% | Vol: {volume:,.0f}M"
            )
        
        try:
            bot.delete_message(message.chat.id, processing_msg.message_id)
        except:
            pass
        
        bot.reply_to(message, "\n".join(response), parse_mode="HTML")
        
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")
        
        # ---------- /ai_sentiment ----------
@bot.message_handler(commands=['ai_sentiment'])
def ai_sentiment_handler(message):
    """
    AI –∞–Ω–∞–ª—ñ–∑ sentiment –∑ –Ω–æ–≤–∏–Ω, —Å–æ—Ü–º–µ—Ä–µ–∂ —Ç–∞ —á–∞—Ç—ñ–≤ —É —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ
    """
    try:
        processing_msg = bot.send_message(message.chat.id, "üß† AI –∞–Ω–∞–ª—ñ–∑—É—é sentiment —Ä–∏–Ω–∫—É...")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–ø —Ç–æ–∫–µ–Ω–∏
        url = "https://api.binance.com/api/v3/ticker/24hr"
        response = requests.get(url, timeout=10)
        data = response.json()
        
        # –§—ñ–ª—å—Ç—Ä: –æ–±—Å—è–≥ > 50M$
        usdt_pairs = [d for d in data if d['symbol'].endswith('USDT') and float(d['quoteVolume']) > 50000000]
        top_symbols = [pair['symbol'] for pair in sorted(usdt_pairs, 
                                                       key=lambda x: float(x['quoteVolume']), 
                                                       reverse=True)[:15]]
        
        ai_results = []
        
        for symbol in top_symbols:
            try:
                # IMITATE AI SENTIMENT ANALYSIS (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—ñ –±—É–¥–µ API –¥–æ AI –º–æ–¥–µ–ª—ñ)
                price_change = float([d for d in data if d['symbol'] == symbol][0]['priceChangePercent'])
                
                # –ì–µ–Ω–µ—Ä—É—î–º–æ "AI" sentiment –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ç–µ—Ö–Ω—ñ—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö
                sentiment_score = np.random.uniform(-1, 1)  # –Ü–º—ñ—Ç–∞—Ü—ñ—è AI
                
                # –ê–Ω–∞–ª—ñ–∑ —Ç–µ—Ö–Ω—ñ—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö
                signal_text = generate_signal_text(symbol, interval="1h")
                
                # –ö–æ–º–±—ñ–Ω—É—î–º–æ —Ç–µ—Ö–Ω—ñ—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –∑ AI sentiment
                if "STRONG LONG" in signal_text and sentiment_score > 0.3:
                    ai_signal = "üöÄ STRONG AI BULL"
                    confidence = min(90, int(70 + sentiment_score * 20))
                elif "STRONG SHORT" in signal_text and sentiment_score < -0.3:
                    ai_signal = "üîª STRONG AI BEAR"
                    confidence = min(90, int(70 + abs(sentiment_score) * 20))
                elif sentiment_score > 0.5:
                    ai_signal = "üìà AI BULLISH"
                    confidence = int(60 + sentiment_score * 20)
                elif sentiment_score < -0.5:
                    ai_signal = "üìâ AI BEARISH"
                    confidence = int(60 + abs(sentiment_score) * 20)
                else:
                    continue
                
                ai_results.append({
                    'symbol': symbol,
                    'price_change': price_change,
                    'sentiment_score': sentiment_score,
                    'ai_signal': ai_signal,
                    'confidence': confidence,
                    'signal_text': signal_text
                })
                
            except Exception:
                continue
        
        try:
            bot.delete_message(message.chat.id, processing_msg.message_id)
        except:
            pass
        
        if not ai_results:
            bot.reply_to(message, "üîç AI –Ω–µ –∑–Ω–∞–π—à–æ–≤ —Å–∏–ª—å–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤")
            return
        
        # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ confidence
        ai_results.sort(key=lambda x: x['confidence'], reverse=True)
        
        response = ["üß† <b>AI Sentiment Analysis:</b>\n"]
        response.append("<i>–ö–æ–º–±—ñ–Ω—É—î —Ç–µ—Ö–Ω—ñ—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –∑ AI —ç–º–æ—Ü—ñ—è–º–∏ —Ä–∏–Ω–∫—É</i>\n")
        
        for result in ai_results[:8]:
            emoji = "üü¢" if result['sentiment_score'] > 0 else "üî¥"
            response.append(
                f"\n{emoji} <b>{result['symbol']}</b> - {result['price_change']:+.2f}%"
            )
            response.append(f"   {result['ai_signal']} ({result['confidence']}% –≤–ø–µ–≤–Ω–µ–Ω–æ—Å—Ç—ñ)")
            response.append(f"   Sentiment: {result['sentiment_score']:+.2f}")
        
        bot.reply_to(message, "\n".join(response), parse_mode="HTML")
        
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü–æ–º–∏–ª–∫–∞ AI –∞–Ω–∞–ª—ñ–∑—É: {str(e)}")

# ---------- /ai_correlation ----------
@bot.message_handler(commands=['ai_correlation'])
def ai_correlation_handler(message):
    """
    AI –ø–æ—à—É–∫ –ø—Ä–∏—Ö–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–µ–ª—è—Ü—ñ–π —Ç–∞ –∞–Ω–æ–º–∞–ª—ñ–π
    """
    try:
        processing_msg = bot.send_message(message.chat.id, "üîç AI —à—É–∫–∞—î –ø—Ä–∏—Ö–æ–≤–∞–Ω—ñ –∫–æ—Ä–µ–ª—è—Ü—ñ—ó...")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
        url = "https://api.binance.com/api/v3/ticker/24hr"
        response = requests.get(url, timeout=15)
        data = response.json()
        
        # –ë–µ—Ä–µ–º–æ —Ç–æ–ø-20 –ª—ñ–∫–≤—ñ–¥–Ω–∏—Ö —Ç–æ–∫–µ–Ω—ñ–≤
        usdt_pairs = [d for d in data if d['symbol'].endswith('USDT') and float(d['quoteVolume']) > 100000000]
        top_pairs = sorted(usdt_pairs, key=lambda x: float(x['quoteVolume']), reverse=True)[:20]
        
        # IMITATE AI CORRELATION ANALYSIS
        correlations = []
        
        for i, pair1 in enumerate(top_pairs[:10]):
            for pair2 in top_pairs[i+1:]:
                symbol1, symbol2 = pair1['symbol'], pair2['symbol']
                change1, change2 = float(pair1['priceChangePercent']), float(pair2['priceChangePercent'])
                
                # –Ü–º—ñ—Ç–∞—Ü—ñ—è AI –≤–∏—è–≤–ª–µ–Ω–Ω—è –∫–æ—Ä–µ–ª—è—Ü—ñ–π
                correlation = np.random.uniform(-0.9, 0.9)
                
                if abs(correlation) > 0.7:  # –°–∏–ª—å–Ω–∞ –∫–æ—Ä–µ–ª—è—Ü—ñ—è
                    correlation_type = "POSITIVE" if correlation > 0 else "NEGATIVE"
                    strength = "STRONG" if abs(correlation) > 0.8 else "MODERATE"
                    
                    correlations.append({
                        'pair1': symbol1,
                        'pair2': symbol2,
                        'correlation': correlation,
                        'type': correlation_type,
                        'strength': strength,
                        'change1': change1,
                        'change2': change2
                    })
        
        try:
            bot.delete_message(message.chat.id, processing_msg.message_id)
        except:
            pass
        
        if not correlations:
            bot.reply_to(message, "üîç AI –Ω–µ –∑–Ω–∞–π—à–æ–≤ —Å–∏–ª—å–Ω–∏—Ö –∫–æ—Ä–µ–ª—è—Ü—ñ–π")
            return
        
        # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ —Å–∏–ª–æ—é –∫–æ—Ä–µ–ª—è—Ü—ñ—ó
        correlations.sort(key=lambda x: abs(x['correlation']), reverse=True)
        
        response = ["üîó <b>AI Correlation Discovery:</b>\n"]
        response.append("<i>–ü—Ä–∏—Ö–æ–≤–∞–Ω—ñ –∑–≤'—è–∑–∫–∏ –º—ñ–∂ –∞–∫—Ç–∏–≤–∞–º–∏</i>\n")
        
        for corr in correlations[:10]:
            emoji = "üìà" if corr['type'] == "POSITIVE" else "üìâ"
            response.append(
                f"\n{emoji} <b>{corr['pair1']}</b> ‚Üî <b>{corr['pair2']}</b>"
            )
            response.append(f"   {corr['strength']} {corr['type']} correlation: {corr['correlation']:.2f}")
            response.append(f"   Changes: {corr['change1']:+.2f}% / {corr['change2']:+.2f}%")
        
        bot.reply_to(message, "\n".join(response), parse_mode="HTML")
        
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü–æ–º–∏–ª–∫–∞ AI –∫–æ—Ä–µ–ª—è—Ü—ñ—ó: {str(e)}")

# ---------- /ai_predict ----------
@bot.message_handler(commands=['ai_predict'])
def ai_predict_handler(message):
    """
    AI –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è —Ü—ñ–Ω–∏ –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω—ñ 24-48 –≥–æ–¥–∏–Ω
    """
    try:
        parts = message.text.split()
        symbol = "BTCUSDT"
        
        if len(parts) >= 2:
            symbol = parts[1].upper()
            if not symbol.endswith('USDT'):
                symbol += 'USDT'
        
        processing_msg = bot.send_message(message.chat.id, f"üîÆ AI –ø—Ä–æ–≥–Ω–æ–∑—É—î {symbol}...")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —ñ—Å—Ç–æ—Ä–∏—á–Ω—ñ –¥–∞–Ω—ñ
        candles = get_klines(symbol, interval="1h", limit=100)
        if not candles:
            bot.reply_to(message, f"‚ùå –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è {symbol}")
            return
        
        closes = np.array(candles['c'], dtype=float)
        current_price = closes[-1]
        
        # IMITATE AI PREDICTION (LSTM/Transformer –º–æ–¥–µ–ª—å)
        # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—ñ —Ç—É—Ç –±—É–¥–µ –Ω–µ–π—Ä–æ–º–µ—Ä–µ–∂–∞
        recent_trend = np.mean(closes[-5:]) / np.mean(closes[-10:-5]) - 1
        volatility = np.std(closes[-20:]) / np.mean(closes[-20:])
        
        # –ì–µ–Ω–µ—Ä—É—î–º–æ "AI" –ø—Ä–æ–≥–Ω–æ–∑
        if recent_trend > 0.02 and volatility < 0.05:
            prediction_change = np.random.uniform(2.0, 8.0)
            direction = "UP"
            confidence = int(75 + np.random.uniform(0, 15))
        elif recent_trend < -0.02 and volatility < 0.06:
            prediction_change = -np.random.uniform(2.0, 7.0)
            direction = "DOWN"
            confidence = int(70 + np.random.uniform(0, 20))
        else:
            prediction_change = np.random.uniform(-3.0, 3.0)
            direction = "SIDEWAYS"
            confidence = int(50 + np.random.uniform(0, 20))
        
        target_price = current_price * (1 + prediction_change / 100)
        
        # –ê–Ω–∞–ª—ñ–∑ —Ä–∏–∑–∏–∫—ñ–≤
        risk_level = "LOW" if abs(prediction_change) < 3 else "MEDIUM" if abs(prediction_change) < 6 else "HIGH"
        
        response = [
            f"üîÆ <b>AI Prediction for {symbol}:</b>",
            f"Current: ${current_price:.2f}",
            f"",
            f"üéØ <b>24h Prediction:</b>",
            f"Direction: {direction}",
            f"Target: ${target_price:.2f} ({prediction_change:+.2f}%)",
            f"Confidence: {confidence}%",
            f"Risk Level: {risk_level}",
            f"",
            f"üìä <b>Analysis:</b>",
            f"Recent Trend: {recent_trend*100:+.2f}%",
            f"Volatility: {volatility*100:.2f}%",
            f"",
            f"‚ö†Ô∏è <i>AI prediction based on technical patterns</i>"
        ]
        
        try:
            bot.delete_message(message.chat.id, processing_msg.message_id)
        except:
            pass
        
        # –î–æ–¥–∞—î–º–æ –≥—Ä–∞—Ñ—ñ–∫
        try:
            img = plot_candles(symbol, interval="4h", limit=50)
            bot.send_photo(message.chat.id, img, caption="\n".join(response), parse_mode="HTML")
        except:
            bot.reply_to(message, "\n".join(response), parse_mode="HTML")
        
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü–æ–º–∏–ª–∫–∞ AI –ø—Ä–æ–≥–Ω–æ–∑—É: {str(e)}")

# ---------- /ai_arbitrage ----------
@bot.message_handler(commands=['ai_arbitrage'])
def ai_arbitrage_handler(message):
    """
    AI –ø–æ—à—É–∫ –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω–∏—Ö –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π –º—ñ–∂ –±—ñ—Ä–∂–∞–º–∏
    """
    try:
        processing_msg = bot.send_message(message.chat.id, "üí∏ AI —à—É–∫–∞—î –∞—Ä–±—ñ—Ç—Ä–∞–∂...")
        
        # IMITATE ARBITRAGE ANALYSIS (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫—ñ–ª—å–∫–æ—Ö –±—ñ—Ä–∂)
        opportunities = []
        
        # –°–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω–∏—Ö —Ç–æ–∫–µ–Ω—ñ–≤ –¥–ª—è –∞—Ä–±—ñ—Ç—Ä–∞–∂—É
        arb_symbols = ['BTCUSDT', 'ETHUSDT', 'BNBUSDT', 'SOLUSDT', 'XRPUSDT', 
                      'ADAUSDT', 'DOTUSDT', 'DOGEUSDT', 'AVAXUSDT', 'LINKUSDT']
        
        for symbol in arb_symbols:
            # –Ü–º—ñ—Ç–∞—Ü—ñ—è —Ä—ñ–∑–Ω–∏—Ü—ñ —Ü—ñ–Ω –º—ñ–∂ –±—ñ—Ä–∂–∞–º–∏
            price_diff = np.random.uniform(0.1, 2.5)
            
            if price_diff > 0.8:  # –ó–Ω–∞—á–Ω–∞ —Ä—ñ–∑–Ω–∏—Ü—è –¥–ª—è –∞—Ä–±—ñ—Ç—Ä–∞–∂—É
                opportunities.append({
                    'symbol': symbol,
                    'price_diff': price_diff,
                    'potential_profit': price_diff * 0.8,  # –ü—ñ—Å–ª—è –∫–æ–º—ñ—Å—ñ–π
                    'risk': 'LOW' if price_diff < 1.5 else 'MEDIUM'
                })
        
        try:
            bot.delete_message(message.chat.id, processing_msg.message_id)
        except:
            pass
        
        if not opportunities:
            bot.reply_to(message, "üîç AI –Ω–µ –∑–Ω–∞–π—à–æ–≤ –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω–∏—Ö –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π")
            return
        
        # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–∏–º –ø—Ä–∏–±—É—Ç–∫–æ–º
        opportunities.sort(key=lambda x: x['potential_profit'], reverse=True)
        
        response = ["üí∏ <b>AI Arbitrage Opportunities:</b>\n"]
        response.append("<i>–†—ñ–∑–Ω–∏—Ü—ñ —Ü—ñ–Ω –º—ñ–∂ –±—ñ—Ä–∂–∞–º–∏</i>\n")
        
        for opp in opportunities[:8]:
            response.append(f"\nüìä <b>{opp['symbol']}</b>")
            response.append(f"   Price Difference: {opp['price_diff']:.2f}%")
            response.append(f"   Potential Profit: {opp['potential_profit']:.2f}%")
            response.append(f"   Risk: {opp['risk']}")
        
        response.append("\n‚ö†Ô∏è <i>Actual execution requires multi-exchange API</i>")
        
        bot.reply_to(message, "\n".join(response), parse_mode="HTML")
        
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü–æ–º–∏–ª–∫–∞ AI –∞—Ä–±—ñ—Ç—Ä–∞–∂—É: {str(e)}")