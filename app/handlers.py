from telebot import TeleBot
from telebot.types import Message
from app.analytics import get_price, generate_signal, trend_strength

# üîπ –°—Ç–∞—Ä–∏–π /analyze (–∑–∞–≥–ª—É—à–∫–∞)
@bot.message_handler(commands=['analyze'])
def old_analyze_command(message):
    args = message.text.split()
    if len(args) == 1:
        bot.reply_to(message, "üìä Analysis feature is coming soon!")

# üîπ –ù–æ–≤–∏–π /price
@bot.message_handler(commands=['price'])
def price_handler(message):
    args = message.text.split()
    if len(args) > 1:
        symbol = args[1].upper()
        price = get_price(symbol)
        bot.reply_to(message, f"üí∞ {symbol} price: *{price:.2f}* USDT")
    else:
        bot.reply_to(message, "‚ö†Ô∏è Usage: /price BTCUSDT")

# üîπ –ù–æ–≤–∏–π /analyze –∑ —Å–∏–≥–Ω–∞–ª–∞–º–∏
@bot.message_handler(commands=['analyze'])
def analyze_handler(message):
    args = message.text.split()
    if len(args) > 1:
        symbol = args[1].upper()
        signal = generate_signal(symbol)
        bot.reply_to(message, signal)

# üîπ –ù–æ–≤–∏–π /trend
@bot.message_handler(commands=['trend'])
def trend_handler(message):
    args = message.text.split()
    if len(args) > 1:
        symbol = args[1].upper()
        trend = trend_strength(symbol)
        bot.reply_to(message, trend)
    else:
        bot.reply_to(message, "‚ö†Ô∏è Usage: /trend BTCUSDT")


"""
üìå *Available Commands:*
/start - Check bot status
/analyze BTCUSDT - Get support/resistance + signal
/price BTCUSDT - Current price
/trend BTCUSDT - Market trend
/chart BTCUSDT - Send chart
/heatmap - Top movers (coming soon üöÄ)
""")

# üîπ –ù–æ–≤–∞ –∫–æ–º–∞–Ω–¥–∞ /advanced –¥–ª—è —Ä–æ–∑—à–∏—Ä–µ–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É
@bot.message_handler(commands=['advanced'])
def advanced_handler(message):
    args = message.text.split()
    if len(args) > 1:
        symbol = args[1].upper()
        from app.analytics import advanced_analysis
        analysis = advanced_analysis(symbol)
        bot.reply_to(message, analysis, parse_mode='Markdown')
    else:
        bot.reply_to(message, "‚ö†Ô∏è Usage: /advanced BTCUSDT")

# üîπ –ù–æ–≤–∞ –∫–æ–º–∞–Ω–¥–∞ /volume –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –æ–±'—î–º—ñ–≤
@bot.message_handler(commands=['volume'])
def volume_handler(message):
    args = message.text.split()
    if len(args) > 1:
        symbol = args[1].upper()
        from app.analytics import volume_analysis
        analysis = volume_analysis(symbol)
        bot.reply_to(message, analysis, parse_mode='Markdown')
    else:
        bot.reply_to(message, "‚ö†Ô∏è Usage: /volume BTCUSDT")

# üîπ –ù–æ–≤–∞ –∫–æ–º–∞–Ω–¥–∞ /levels –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–∏—Ö —Ä—ñ–≤–Ω—ñ–≤
@bot.message_handler(commands=['levels'])
def levels_handler(message):
    args = message.text.split()
    if len(args) > 1:
        symbol = args[1].upper()
        from app.analytics import detailed_levels
        levels = detailed_levels(symbol)
        bot.reply_to(message, levels, parse_mode='Markdown')
    else:
        bot.reply_to(message, "‚ö†Ô∏è Usage: /levels BTCUSDT")

# üîπ –ù–æ–≤–∞ –∫–æ–º–∞–Ω–¥–∞ /signal –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ —Å–∏–≥–Ω–∞–ª—É
@bot.message_handler(commands=['signal'])
def signal_handler(message):
    args = message.text.split()
    if len(args) > 1:
        symbol = args[1].upper()
        from app.analytics import quick_signal
        signal = quick_signal(symbol)
        bot.reply_to(message, signal, parse_mode='Markdown')
    else:
        bot.reply_to(message, "‚ö†Ô∏è Usage: /signal BTCUSDT")

# üîπ –ù–æ–≤–∞ –∫–æ–º–∞–Ω–¥–∞ /alerts –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å
@bot.message_handler(commands=['alerts'])
def alerts_handler(message):
    bot.reply_to(message,
"""
üîî *Alert System (Coming Soon):*
- Price alerts
- Volume spike alerts  
- Breakout alerts
- Trend change alerts

Stay tuned! üöÄ
""", parse_mode='Markdown')

# üîπ –û–±—Ä–æ–±–∫–∞ –Ω–µ–≤—ñ–¥–æ–º–∏—Ö –∫–æ–º–∞–Ω–¥
@bot.message_handler(func=lambda message: True)
def handle_unknown(message):
    bot.reply_to(message, "‚ùå Unknown command. Use /help for available commands.")

def register_all_handlers(bot_instance: TeleBot):
    """–§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –≤—Å—ñ—Ö –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤"""
    global bot
    bot = bot_instance
    
    # –†–µ—î—Å—Ç—Ä—É—î–º–æ –≤—Å—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏
    bot.register_message_handler(send_welcome)
    bot.register_message_handler(old_analyze_command)
    bot.register_message_handler(price_handler)
    bot.register_message_handler(analyze_handler)
    bot.register_message_handler(trend_handler)
    bot.register_message_handler(chart_handler)
    bot.register_message_handler(send_help)
    bot.register_message_handler(advanced_handler)
    bot.register_message_handler(volume_handler)
    bot.register_message_handler(levels_handler)
    bot.register_message_handler(signal_handler)
    bot.register_message_handler(alerts_handler)
    bot.register_message_handler(handle_unknown)
