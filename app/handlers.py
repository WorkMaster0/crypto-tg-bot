import numpy as np
from app.bot import bot
from app.analytics import (
    get_price, get_klines, generate_signal_text, trend_strength_text,
    find_levels, top_movers, position_size, normalize_symbol, find_atr_squeeze  # <-- –î–æ–¥–∞–Ω–æ find_atr_squeeze
)
from app.chart import plot_candles
from app.config import DEFAULT_INTERVAL, ALLOWED_INTERVALS

# –ø—Ä–æ—Å—Ç–µ –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å —á–∞—Ç—É –≤ –û–ó–ü
_user_defaults = {}  # chat_id -> {"interval": "1h"}

def _default_interval(chat_id):
    return _user_defaults.get(chat_id, {}).get("interval", DEFAULT_INTERVAL)

def _parse_args(msg_text: str):
    parts = msg_text.split()
    symbol = None
    interval = None
    if len(parts) >= 2:
        symbol = normalize_symbol(parts[1])
    if len(parts) >= 3 and parts[2] in ALLOWED_INTERVALS:
        interval = parts[2]
    return symbol, interval

# ---------- /start ----------
@bot.message_handler(commands=['start'])
def start(message):
    bot.reply_to(message, (
        "üöÄ <b>Crypto Analysis Bot</b> –∑–∞–ø—É—â–µ–Ω–æ!\n"
        "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø—Ä–∏–∫–ª–∞–¥—ñ–≤:\n"
        "‚Ä¢ <code>/price BTCUSDT</code>\n"
        "‚Ä¢ <code>/analyze BTCUSDT 1h</code>\n"
        "‚Ä¢ <code>/levels BTCUSDT 4h</code>\n"
        "‚Ä¢ <code>/chart BTCUSDT 1h</code>\n"
        "‚Ä¢ <code>/trend BTCUSDT</code>\n"
        "‚Ä¢ <code>/heatmap</code>\n"
        "‚Ä¢ <code>/risk 1000 1 65000 64000</code>  (–±–∞–ª–∞–Ω—Å 1000$, —Ä–∏–∑–∏–∫ 1%, –≤—Ö—ñ–¥ 65000, —Å—Ç–æ–ø 64000)\n"
        "‚Ä¢ <code>/setdefault 1h</code>\n"
        "–î–æ–≤—ñ–¥–∫–∞: <code>/help</code>"
    ))

# ---------- /help ----------
@bot.message_handler(commands=['help'])
def help_cmd(message):
    bot.reply_to(message, (
        "<b>–ö–æ–º–∞–Ω–¥–∏:</b>\n"
        "<code>/price SYMBOL</code> ‚Äî –ø–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞\n"
        "<code>/analyze SYMBOL [interval]</code> ‚Äî —Å–∏–≥–Ω–∞–ª + —Ä—ñ–≤–Ω—ñ S/R\n"
        "<code>/levels SYMBOL [interval]</code> ‚Äî —Å–ø–∏—Å–æ–∫ —Ä—ñ–≤–Ω—ñ–≤ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏/–æ–ø–æ—Ä—É\n"
        "<code>/chart SYMBOL [interval]</code> ‚Äî –≥—Ä–∞—Ñ—ñ–∫ –∑ EMA —Ç–∞ —Ä—ñ–≤–Ω—è–º–∏\n"
        "<code>/trend SYMBOL [interval]</code> ‚Äî —Å–∏–ª–∞ —Ç—Ä–µ–Ω–¥—É\n"
        "<code>/heatmap [N]</code> ‚Äî —Ç–æ–ø —Ä—É—Ö—ñ–≤ USDT-–ø–∞—Ä (–∑–∞ 24h)\n"
        "<code>/risk balance risk% entry stop</code> ‚Äî —Ä–æ–∑–º—ñ—Ä –ø–æ–∑–∏—Ü—ñ—ó\n"
        "<code>/setdefault interval</code> ‚Äî —ñ–Ω—Ç–µ—Ä–≤–∞–ª –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –¥–ª—è —Ü—å–æ–≥–æ —á–∞—Ç—É\n"
        f"–î–æ—Å—Ç—É–ø–Ω—ñ —ñ–Ω—Ç–µ—Ä–≤–∞–ª–∏: {', '.join(sorted(ALLOWED_INTERVALS))}"
    ))

# ---------- /price ----------
@bot.message_handler(commands=['price'])
def price_handler(message):
    symbol, interval = _parse_args(message.text)
    if not symbol:
        return bot.reply_to(message, "‚ö†Ô∏è –ü—Ä–∏–∫–ª–∞–¥: <code>/price BTCUSDT</code>")
    try:
        price = get_price(symbol)
        bot.reply_to(message, f"üí∞ <b>{symbol}</b> = <b>{price:.6f}</b> USDT")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

# ---------- /levels ----------
@bot.message_handler(commands=['levels'])
def levels_handler(message):
    symbol, interval = _parse_args(message.text)
    if not symbol:
        return bot.reply_to(message, "‚ö†Ô∏è –ü—Ä–∏–∫–ª–∞–¥: <code>/levels BTCUSDT 1h</code>")
    interval = interval or _default_interval(message.chat.id)
    try:
        candles = get_klines(symbol, interval=interval)
        lv = find_levels(candles)
        s = ", ".join(f"{x:.4f}" for x in lv["supports"])
        r = ", ".join(f"{x:.4f}" for x in lv["resistances"])
        bot.reply_to(message, (
            f"üîé <b>{symbol}</b> [{interval}] Levels\n"
            f"Supports: {s or '‚Äî'}\n"
            f"Resistances: {r or '‚Äî'}\n"
            f"Nearest S: <b>{lv['near_support']:.4f}</b> | "
            f"Nearest R: <b>{lv['near_resistance']:.4f}</b>\n"
            f"ATR(14): {lv['atr']:.4f} | tol: {lv['tolerance']:.4f}"
        ))
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

# ---------- /analyze ----------
@bot.message_handler(commands=['analyze'])
def analyze_handler(message):
    symbol, interval = _parse_args(message.text)
    if not symbol:
        return bot.reply_to(message, "‚ö†Ô∏è –ü—Ä–∏–∫–ª–∞–¥: <code>/analyze BTCUSDT 1h</code>")
    interval = interval or _default_interval(message.chat.id)
    try:
        text = generate_signal_text(symbol, interval=interval)
        bot.reply_to(message, text)
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

# ---------- /trend ----------
@bot.message_handler(commands=['trend'])
def trend_handler(message):
    symbol, interval = _parse_args(message.text)
    if not symbol:
        return bot.reply_to(message, "‚ö†Ô∏è –ü—Ä–∏–∫–ª–∞–¥: <code>/trend BTCUSDT 4h</code>")
    interval = interval or _default_interval(message.chat.id)
    try:
        candles = get_klines(symbol, interval=interval)
        txt = trend_strength_text(candles)
        bot.reply_to(message, f"üìà <b>{symbol}</b> [{interval}]  {txt}")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

# ---------- /chart ----------
@bot.message_handler(commands=['chart'])
def chart_handler(message):
    symbol, interval = _parse_args(message.text)
    if not symbol:
        return bot.reply_to(message, "‚ö†Ô∏è –ü—Ä–∏–∫–ª–∞–¥: <code>/chart BTCUSDT 1h</code>")
    interval = interval or _default_interval(message.chat.id)
    try:
        img = plot_candles(symbol, interval=interval, limit=200, with_levels=True)
        bot.send_photo(message.chat.id, img)
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

# ---------- /heatmap ----------
@bot.message_handler(commands=['heatmap'])
def heatmap_handler(message):
    parts = message.text.split()
    try:
        n = int(parts[1]) if len(parts) > 1 else 10
    except:
        n = 10
    try:
        movers = top_movers(limit=min(max(n, 1), 20))
        lines = ["üî• <b>Top movers (24h, USDT pairs)</b>"]
        for i, (s, chg, qv) in enumerate(movers, 1):
            lines.append(f"{i}. <b>{s}</b>  {chg:+.2f}%  | vol‚âà{qv/1e6:.2f}M")
        bot.reply_to(message, "\n".join(lines))
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

# ---------- /risk ----------
@bot.message_handler(commands=['risk'])
def risk_handler(message):
    parts = message.text.split()
    if len(parts) < 5:
        return bot.reply_to(message, "‚ö†Ô∏è –ü—Ä–∏–∫–ª–∞–¥: <code>/risk 1000 1 65000 64000</code> (balance risk% entry stop)")
    try:
        balance = float(parts[1])
        risk_pct = float(parts[2])
        entry = float(parts[3])
        stop = float(parts[4])
        res = position_size(balance, risk_pct, entry, stop)
        bot.reply_to(message, (
            f"üßÆ Risk: {risk_pct:.2f}% –≤—ñ–¥ ${balance:.2f} ‚Üí ${res['risk_amount']:.2f}\n"
            f"üì¶ Position size ‚âà <b>{res['qty']:.6f}</b> —Ç–æ–∫–µ–Ω—ñ–≤\n"
            f"üéØ 1R ‚âà {abs(entry - stop):.4f} | 2R TP ‚âà {entry + (res['rr_one_tp'] if entry>stop else -res['rr_one_tp']):.4f}"
        ))
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

# ---------- /setdefault ----------
@bot.message_handler(commands=['setdefault'])
def setdefault_handler(message):
    parts = message.text.split()
    if len(parts) < 2 or parts[1] not in ALLOWED_INTERVALS:
        return bot.reply_to(message, "‚ö†Ô∏è –ü—Ä–∏–∫–ª–∞–¥: <code>/setdefault 1h</code>")
    _user_defaults.setdefault(message.chat.id, {})["interval"] = parts[1]
    bot.reply_to(message, f"‚úÖ –Ü–Ω—Ç–µ—Ä–≤–∞–ª –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –¥–ª—è —Ü—å–æ–≥–æ —á–∞—Ç—É: <b>{parts[1]}</b>")

# ---------- /squeeze ----------
@bot.message_handler(commands=['squeeze'])
def squeeze_scanner(message):
    """–°–∫–∞–Ω—É—î —Ç–æ–ø –ø–∞—Ä–∏ –Ω–∞ —Å—Ç–∏—Å–Ω–µ–Ω–Ω—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—ñ —ñ –∞–Ω–∞–ª—ñ–∑—É—î –Ω–∞–ø—Ä—è–º"""
    parts = message.text.split()
    try:
        n = int(parts[1]) if len(parts) > 1 else 5
    except:
        n = 5
    n = max(1, min(n, 10))

    try:
        top_pairs = ['BTCUSDT', 'ETHUSDT', 'BNBUSDT', 'SOLUSDT', 
                     'XRPUSDT', 'ADAUSDT', 'AVAXUSDT', 'DOTUSDT', 
                     'DOGEUSDT', 'LINKUSDT']
        squeeze_list = []

        for pair in top_pairs:
            try:
                ratio = find_atr_squeeze(pair, '1h', 50)
                if ratio < 0.8:
                    squeeze_list.append((pair, ratio))
            except Exception as e:
                print(f"–ü–æ–º–∏–ª–∫–∞ –¥–ª—è {pair}: {e}")
                continue

        squeeze_list.sort(key=lambda x: x[1])

        if squeeze_list:
            lines = [f"üîç <b>–°—Ç–∏—Å–Ω–µ–Ω–Ω—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—ñ (ATR Squeeze)</b> –Ω–∞ 1h:"]
            for i, (pair, ratio) in enumerate(squeeze_list[:n], 1):
                # –û—Ç—Ä–∏–º—É—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ
                candles = get_klines(pair, interval="1h", limit=100)
                close = np.array(candles["c"], dtype=float)

                rsi_val = rsi(close, 14)[-1]
                ema_fast = ta.trend.ema_indicator(pd.Series(close), 20).iloc[-1]
                ema_slow = ta.trend.ema_indicator(pd.Series(close), 50).iloc[-1]

                # Bollinger Bands
                bb_high = ta.volatility.BollingerBands(pd.Series(close), window=20).bollinger_hband().iloc[-1]
                bb_low  = ta.volatility.BollingerBands(pd.Series(close), window=20).bollinger_lband().iloc[-1]
                last_price = close[-1]

                # –í–∏–∑–Ω–∞—á–∞—î–º–æ –Ω–∞–ø—Ä—è–º
                signal = "‚öñÔ∏è –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ"
                if last_price > ema_fast > ema_slow and last_price > bb_high:
                    signal = "üü¢ –ô–º–æ–≤—ñ—Ä–Ω–∏–π —Ä—ñ—Å—Ç (–ø—Ä–æ–±—ñ–π –≤–≥–æ—Ä—É)"
                elif last_price < ema_fast < ema_slow and last_price < bb_low:
                    signal = "üî¥ –ô–º–æ–≤—ñ—Ä–Ω–µ –ø–∞–¥—ñ–Ω–Ω—è (–ø—Ä–æ–±—ñ–π –≤–Ω–∏–∑)"
                elif rsi_val > 65:
                    signal = "‚ö†Ô∏è RSI –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω—ñ—Å—Ç—å ‚Üí –æ–±–µ—Ä–µ–∂–Ω–æ, –º–æ–∂–µ –±—É—Ç–∏ –≤—ñ–¥–∫–∞—Ç –≤–Ω–∏–∑"
                elif rsi_val < 35:
                    signal = "‚ö†Ô∏è RSI –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω—ñ—Å—Ç—å ‚Üí –º–æ–∂–ª–∏–≤–∏–π –≤—ñ–¥—Å–∫–æ–∫ –≤–≥–æ—Ä—É"

                lines.append(
                    f"{i}. {pair} : ATR Ratio = <code>{ratio:.3f}</code>\n"
                    f"   ‚û§ RSI = <b>{rsi_val:.1f}</b>\n"
                    f"   ‚û§ {signal}"
                )

            lines.append("\nüí° ATR Squeeze = —Å–∏–≥–Ω–∞–ª, —â–æ —Å–∫–æ—Ä–æ –±—É–¥–µ —Å–∏–ª—å–Ω–∏–π —Ä—É—Ö. "
                         "–Ü–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏ –≤–∏—â–µ –¥–æ–ø–æ–º–∞–≥–∞—é—Ç—å –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –π–º–æ–≤—ñ—Ä–Ω–∏–π –Ω–∞–ø—Ä—è–º.")

            bot.send_message(message.chat.id, "\n".join(lines), parse_mode="HTML")

        else:
            bot.send_message(message.chat.id, 
                             "–ù–∞ –¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç —Å–∏–ª—å–Ω–∏—Ö —Å—Ç–∏—Å–∫–∞–Ω—å –Ω–µ –≤–∏—è–≤–ª–µ–Ω–æ (–≤—Å—ñ –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç–∏ > 0.8).")

    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–∫–∞–Ω–µ—Ä–∞: {e}")
        
        # ---------- /trap ----------
@bot.message_handler(commands=['trap'])
def trap_scanner(message):
    """–°–∫–∞–Ω—É—î —Ç–æ–ø –ø–∞—Ä–∏ –Ω–∞ –ø–∞—Å—Ç–∫–∏ –ª—ñ–∫–≤—ñ–¥–Ω–æ—Å—Ç—ñ"""
    top_pairs = ['BTCUSDT', 'ETHUSDT', 'BNBUSDT', 'SOLUSDT', 
                 'XRPUSDT', 'ADAUSDT', 'AVAXUSDT', 'DOTUSDT', 
                 'DOGEUSDT', 'LINKUSDT']

    traps = []
    for pair in top_pairs:
        try:
            signal = detect_liquidity_trap(pair, interval="1h", lookback=50)
            if signal:
                traps.append(signal)
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –¥–ª—è {pair}: {e}")
            continue

    if traps:
        bot.send_message(message.chat.id, 
                         "üîç <b>–í–∏—è–≤–ª–µ–Ω—ñ –ø–∞—Å—Ç–∫–∏ –ª—ñ–∫–≤—ñ–¥–Ω–æ—Å—Ç—ñ:</b>\n\n" + "\n".join(traps),
                         parse_mode="HTML")
    else:
        bot.send_message(message.chat.id, 
                         "‚úÖ –ü–∞—Å—Ç–æ–∫ –ª—ñ–∫–≤—ñ–¥–Ω–æ—Å—Ç—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –Ω–∞ 1h —Ç–∞–π–º—Ñ—Ä–µ–π–º—ñ.")
                        
# ---------- Smart S/R ----------
def find_support_resistance(prices, window=20, delta=0.005):
    sr_levels = []
    for i in range(window, len(prices)-window):
        local_max = max(prices[i-window:i+window+1])
        local_min = min(prices[i-window:i+window+1])
        if prices[i] == local_max:
            if all(abs(prices[i]-lvl)/lvl > delta for lvl in sr_levels):
                sr_levels.append(prices[i])
        elif prices[i] == local_min:
            if all(abs(prices[i]-lvl)/lvl > delta for lvl in sr_levels):
                sr_levels.append(prices[i])
    return sorted(sr_levels)

@bot.message_handler(commands=['smart_sr'])
def smart_sr_handler(message):
    parts = message.text.split()
    if len(parts) < 2:
        return bot.reply_to(message, "‚ö†Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /smart_sr BTCUSDT")
    symbol = parts[1].upper()
    
    try:
    df = get_klines(symbol, interval="1h", limit=200)
    if not df or len(df['c']) == 0:
        return bot.send_message(message.chat.id, f"‚ùå –î–∞–Ω—ñ –¥–ª—è {symbol} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ")

    closes = np.array(df['c'], dtype=float)
    highs = np.array(df['h'], dtype=float)
    lows = np.array(df['l'], dtype=float)
    volumes = np.array(df['v'], dtype=float)
    
    sr_levels = find_support_resistance(closes, window=20, delta=0.005)
    last_price = closes[-1]

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ breakout
    signal = "‚ÑπÔ∏è –ü–∞—Ç–µ—Ä–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
    for lvl in sr_levels:
        if last_price > lvl * 1.01:
            signal = f"üöÄ LONG breakout: —Ü—ñ–Ω–∞ –ø—Ä–æ–±–∏–ª–∞ –æ–ø—ñ—Ä {lvl:.4f}"
        elif last_price < lvl * 0.99:
            signal = f"‚ö° SHORT breakout: —Ü—ñ–Ω–∞ –ø—Ä–æ–±–∏–ª–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫—É {lvl:.4f}"

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ pre-top / pump
    impulse = (closes[-1] - closes[-4]) / closes[-4]
    vol_spike = volumes[-1] > 1.5 * np.mean(volumes[-20:])
    nearest_resistance = max([lvl for lvl in sr_levels if lvl < last_price], default=None)
    if impulse > 0.08 and vol_spike and nearest_resistance is not None:
        signal += f"\n‚ö†Ô∏è Pre-top detected: –º–æ–∂–ª–∏–≤–∏–π short –±—ñ–ª—è {nearest_resistance:.4f}"

    img = plot_candles(symbol, interval="1h", limit=100, sr_levels=sr_levels)
    bot.send_photo(message.chat.id, img, caption=f"<b>{symbol} ‚Äî Smart S/R Analysis</b>\n\n{signal}", parse_mode="HTML")
    
except Exception as e:
    bot.send_message(message.chat.id, f"‚ùå Error: {e}")