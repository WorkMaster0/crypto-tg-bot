from app.bot import bot
from app.analytics import (
    get_price, get_klines, generate_signal_text, trend_strength_text,
    find_levels, top_movers, position_size, normalize_symbol, find_atr_squeeze  # <-- –î–æ–¥–∞–Ω–æ find_atr_squeeze
)
from app.chart import plot_candles
from app.config import DEFAULT_INTERVAL, ALLOWED_INTERVALS

# –ø—Ä–æ—Å—Ç–µ –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å —á–∞—Ç—É –≤ –û–ó–ü
_user_defaults = {}  # chat_id -> {"interval": "1h"}

def _default_interval(chat_id):
    return _user_defaults.get(chat_id, {}).get("interval", DEFAULT_INTERVAL)

def _parse_args(msg_text: str):
    parts = msg_text.split()
    symbol = None
    interval = None
    if len(parts) >= 2:
        symbol = normalize_symbol(parts[1])
    if len(parts) >= 3 and parts[2] in ALLOWED_INTERVALS:
        interval = parts[2]
    return symbol, interval

# ---------- /start ----------
@bot.message_handler(commands=['start'])
def start(message):
    bot.reply_to(message, (
        "üöÄ <b>Crypto Analysis Bot</b> –∑–∞–ø—É—â–µ–Ω–æ!\n"
        "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø—Ä–∏–∫–ª–∞–¥—ñ–≤:\n"
        "‚Ä¢ <code>/price BTCUSDT</code>\n"
        "‚Ä¢ <code>/analyze BTCUSDT 1h</code>\n"
        "‚Ä¢ <code>/levels BTCUSDT 4h</code>\n"
        "‚Ä¢ <code>/chart BTCUSDT 1h</code>\n"
        "‚Ä¢ <code>/trend BTCUSDT</code>\n"
        "‚Ä¢ <code>/heatmap</code>\n"
        "‚Ä¢ <code>/risk 1000 1 65000 64000</code>  (–±–∞–ª–∞–Ω—Å 1000$, —Ä–∏–∑–∏–∫ 1%, –≤—Ö—ñ–¥ 65000, —Å—Ç–æ–ø 64000)\n"
        "‚Ä¢ <code>/setdefault 1h</code>\n"
        "–î–æ–≤—ñ–¥–∫–∞: <code>/help</code>"
    ))

# ---------- /help ----------
@bot.message_handler(commands=['help'])
def help_cmd(message):
    bot.reply_to(message, (
        "<b>–ö–æ–º–∞–Ω–¥–∏:</b>\n"
        "<code>/price SYMBOL</code> ‚Äî –ø–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞\n"
        "<code>/analyze SYMBOL [interval]</code> ‚Äî —Å–∏–≥–Ω–∞–ª + —Ä—ñ–≤–Ω—ñ S/R\n"
        "<code>/levels SYMBOL [interval]</code> ‚Äî —Å–ø–∏—Å–æ–∫ —Ä—ñ–≤–Ω—ñ–≤ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏/–æ–ø–æ—Ä—É\n"
        "<code>/chart SYMBOL [interval]</code> ‚Äî –≥—Ä–∞—Ñ—ñ–∫ –∑ EMA —Ç–∞ —Ä—ñ–≤–Ω—è–º–∏\n"
        "<code>/trend SYMBOL [interval]</code> ‚Äî —Å–∏–ª–∞ —Ç—Ä–µ–Ω–¥—É\n"
        "<code>/heatmap [N]</code> ‚Äî —Ç–æ–ø —Ä—É—Ö—ñ–≤ USDT-–ø–∞—Ä (–∑–∞ 24h)\n"
        "<code>/risk balance risk% entry stop</code> ‚Äî —Ä–æ–∑–º—ñ—Ä –ø–æ–∑–∏—Ü—ñ—ó\n"
        "<code>/setdefault interval</code> ‚Äî —ñ–Ω—Ç–µ—Ä–≤–∞–ª –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –¥–ª—è —Ü—å–æ–≥–æ —á–∞—Ç—É\n"
        f"–î–æ—Å—Ç—É–ø–Ω—ñ —ñ–Ω—Ç–µ—Ä–≤–∞–ª–∏: {', '.join(sorted(ALLOWED_INTERVALS))}"
    ))

# ---------- /price ----------
@bot.message_handler(commands=['price'])
def price_handler(message):
    symbol, interval = _parse_args(message.text)
    if not symbol:
        return bot.reply_to(message, "‚ö†Ô∏è –ü—Ä–∏–∫–ª–∞–¥: <code>/price BTCUSDT</code>")
    try:
        price = get_price(symbol)
        bot.reply_to(message, f"üí∞ <b>{symbol}</b> = <b>{price:.6f}</b> USDT")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

# ---------- /levels ----------
@bot.message_handler(commands=['levels'])
def levels_handler(message):
    symbol, interval = _parse_args(message.text)
    if not symbol:
        return bot.reply_to(message, "‚ö†Ô∏è –ü—Ä–∏–∫–ª–∞–¥: <code>/levels BTCUSDT 1h</code>")
    interval = interval or _default_interval(message.chat.id)
    try:
        candles = get_klines(symbol, interval=interval)
        lv = find_levels(candles)
        s = ", ".join(f"{x:.4f}" for x in lv["supports"])
        r = ", ".join(f"{x:.4f}" for x in lv["resistances"])
        bot.reply_to(message, (
            f"üîé <b>{symbol}</b> [{interval}] Levels\n"
            f"Supports: {s or '‚Äî'}\n"
            f"Resistances: {r or '‚Äî'}\n"
            f"Nearest S: <b>{lv['near_support']:.4f}</b> | "
            f"Nearest R: <b>{lv['near_resistance']:.4f}</b>\n"
            f"ATR(14): {lv['atr']:.4f} | tol: {lv['tolerance']:.4f}"
        ))
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

# ---------- /analyze ----------
@bot.message_handler(commands=['analyze'])
def analyze_handler(message):
    symbol, interval = _parse_args(message.text)
    if not symbol:
        return bot.reply_to(message, "‚ö†Ô∏è –ü—Ä–∏–∫–ª–∞–¥: <code>/analyze BTCUSDT 1h</code>")
    interval = interval or _default_interval(message.chat.id)
    try:
        text = generate_signal_text(symbol, interval=interval)
        bot.reply_to(message, text)
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

# ---------- /trend ----------
@bot.message_handler(commands=['trend'])
def trend_handler(message):
    symbol, interval = _parse_args(message.text)
    if not symbol:
        return bot.reply_to(message, "‚ö†Ô∏è –ü—Ä–∏–∫–ª–∞–¥: <code>/trend BTCUSDT 4h</code>")
    interval = interval or _default_interval(message.chat.id)
    try:
        candles = get_klines(symbol, interval=interval)
        txt = trend_strength_text(candles)
        bot.reply_to(message, f"üìà <b>{symbol}</b> [{interval}]  {txt}")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

# ---------- /chart ----------
@bot.message_handler(commands=['chart'])
def chart_handler(message):
    symbol, interval = _parse_args(message.text)
    if not symbol:
        return bot.reply_to(message, "‚ö†Ô∏è –ü—Ä–∏–∫–ª–∞–¥: <code>/chart BTCUSDT 1h</code>")
    interval = interval or _default_interval(message.chat.id)
    try:
        img = plot_candles(symbol, interval=interval, limit=200, with_levels=True)
        bot.send_photo(message.chat.id, img)
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

# ---------- /heatmap ----------
@bot.message_handler(commands=['heatmap'])
def heatmap_handler(message):
    parts = message.text.split()
    try:
        n = int(parts[1]) if len(parts) > 1 else 10
    except:
        n = 10
    try:
        movers = top_movers(limit=min(max(n, 1), 20))
        lines = ["üî• <b>Top movers (24h, USDT pairs)</b>"]
        for i, (s, chg, qv) in enumerate(movers, 1):
            lines.append(f"{i}. <b>{s}</b>  {chg:+.2f}%  | vol‚âà{qv/1e6:.2f}M")
        bot.reply_to(message, "\n".join(lines))
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

# ---------- /risk ----------
@bot.message_handler(commands=['risk'])
def risk_handler(message):
    parts = message.text.split()
    if len(parts) < 5:
        return bot.reply_to(message, "‚ö†Ô∏è –ü—Ä–∏–∫–ª–∞–¥: <code>/risk 1000 1 65000 64000</code> (balance risk% entry stop)")
    try:
        balance = float(parts[1])
        risk_pct = float(parts[2])
        entry = float(parts[3])
        stop = float(parts[4])
        res = position_size(balance, risk_pct, entry, stop)
        bot.reply_to(message, (
            f"üßÆ Risk: {risk_pct:.2f}% –≤—ñ–¥ ${balance:.2f} ‚Üí ${res['risk_amount']:.2f}\n"
            f"üì¶ Position size ‚âà <b>{res['qty']:.6f}</b> —Ç–æ–∫–µ–Ω—ñ–≤\n"
            f"üéØ 1R ‚âà {abs(entry - stop):.4f} | 2R TP ‚âà {entry + (res['rr_one_tp'] if entry>stop else -res['rr_one_tp']):.4f}"
        ))
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

# ---------- /setdefault ----------
@bot.message_handler(commands=['setdefault'])
def setdefault_handler(message):
    parts = message.text.split()
    if len(parts) < 2 or parts[1] not in ALLOWED_INTERVALS:
        return bot.reply_to(message, "‚ö†Ô∏è –ü—Ä–∏–∫–ª–∞–¥: <code>/setdefault 1h</code>")
    _user_defaults.setdefault(message.chat.id, {})["interval"] = parts[1]
    bot.reply_to(message, f"‚úÖ –Ü–Ω—Ç–µ—Ä–≤–∞–ª –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –¥–ª—è —Ü—å–æ–≥–æ —á–∞—Ç—É: <b>{parts[1]}</b>")

# ---------- /squeeze ----------
@bot.message_handler(commands=['squeeze'])
def squeeze_scanner(message):
    """–°–∫–∞–Ω—É—î —Ç–æ–ø –ø–∞—Ä–∏ –Ω–∞ —Å—Ç–∏—Å–Ω–µ–Ω–Ω—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—ñ"""
    parts = message.text.split()
    try:
        n = int(parts[1]) if len(parts) > 1 else 5
    except:
        n = 5
    n = max(1, min(n, 10))  # 1..10

    try:
        top_pairs = [
            'BTCUSDT','ETHUSDT','BNBUSDT','SOLUSDT',
            'XRPUSDT','ADAUSDT','AVAXUSDT','DOTUSDT',
            'DOGEUSDT','LINKUSDT'
        ]
        squeeze_list = []

        for pair in top_pairs:
            try:
                ratio = find_atr_squeeze(pair, '1h', 100)  # ‚Üê –±–µ—Ä–µ–º–æ –±—ñ–ª—å—à–µ —Å–≤—ñ—á–æ–∫
                # –õ–æ–≥ —É –∫–æ–Ω—Å–æ–ª—å, —â–æ–± –±–∞—á–∏—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è
                print(f"[SQUEEZE] {pair} -> ratio={ratio:.3f}")
                if ratio < 0.8:
                    squeeze_list.append((pair, ratio))
            except Exception as e:
                print(f"–ü–æ–º–∏–ª–∫–∞ –¥–ª—è {pair}: {e}")
                continue

        squeeze_list.sort(key=lambda x: x[1])  # –Ω–∞–π–º–µ–Ω—à–∏–π ratio –∑–≤–µ—Ä—Ö—É

        if squeeze_list:
            lines = [ "üîç <b>–°—Ç–∏—Å–Ω–µ–Ω–Ω—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—ñ (ATR Squeeze)</b> –Ω–∞ 1h:" ]
            for i, (pair, ratio) in enumerate(squeeze_list[:n], 1):
                # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ <code> (–¥–æ–∑–≤–æ–ª–µ–Ω–∏–π —Ç–µ–≥) —ñ –ñ–û–î–ù–ò–• —Å–∏—Ä–∏—Ö '<' —á–∏ '>'
                lines.append(f"{i}. <b>{pair}</b> : ATR Ratio = <code>{ratio:.3f}</code> {'‚úÖ' if ratio < 0.8 else ''}")
            # –£ —Ü—å–æ–º—É —Ä—è–¥–∫—É –∑–∞–º—ñ–Ω–∏–ª–∏ '<' –Ω–∞ '&lt;'
            lines.append("üí° <i>–°—Ç–∏—Å–Ω–µ–Ω–Ω—è —á–∞—Å—Ç–æ –ø–µ—Ä–µ–¥—É—î —Å–∏–ª—å–Ω–æ–º—É —Ä—É—Ö—É. –ì–æ—Ç—É–π—Å—è –¥–æ –ø—Ä–æ–±–æ—é! (Ratio &lt; 1.0 = –Ω–∏–∑—å–∫–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ñ—Å—Ç—å)</i>")

            bot.send_message(message.chat.id, "\n".join(lines), parse_mode="HTML")
        else:
            bot.send_message(
                message.chat.id,
                "–ù–∞ –¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç —Å–∏–ª—å–Ω–∏—Ö —Å—Ç–∏—Å–∫–µ–Ω—å –Ω–µ –≤–∏—è–≤–ª–µ–Ω–æ (–≤—Å—ñ –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç–∏ ‚â• 0.8)."
            )

    except Exception as e:
        # –¢—É—Ç –±–µ–∑ parse_mode, —â–æ–± –Ω–µ –∑–ª–æ–≤–∏—Ç–∏ —â–µ –æ–¥–∏–Ω –ø–∞—Ä—Å–µ—Ä-–±–∞–≥
        bot.send_message(message.chat.id, f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–∫–∞–Ω–µ—Ä–∞: {e}")