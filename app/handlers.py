import requests
from telebot import types
import numpy as np
from app.bot import bot
from app.analytics import (
    get_price, get_klines, generate_signal_text, trend_strength_text,
    find_levels, top_movers, position_size, normalize_symbol, find_atr_squeeze  # <-- –î–æ–¥–∞–Ω–æ find_atr_squeeze
)
from app.chart import plot_candles
from app.config import DEFAULT_INTERVAL, ALLOWED_INTERVALS

# –ø—Ä–æ—Å—Ç–µ –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å —á–∞—Ç—É –≤ –û–ó–ü
_user_defaults = {}  # chat_id -> {"interval": "1h"}

def _default_interval(chat_id):
    return _user_defaults.get(chat_id, {}).get("interval", DEFAULT_INTERVAL)

def _parse_args(msg_text: str):
    parts = msg_text.split()
    symbol = None
    interval = None
    if len(parts) >= 2:
        symbol = normalize_symbol(parts[1])
    if len(parts) >= 3 and parts[2] in ALLOWED_INTERVALS:
        interval = parts[2]
    return symbol, interval

# ---------- /start ----------
@bot.message_handler(commands=['start'])
def start(message):
    bot.reply_to(message, (
        "üöÄ <b>Crypto Analysis Bot</b> –∑–∞–ø—É—â–µ–Ω–æ!\n"
        "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø—Ä–∏–∫–ª–∞–¥—ñ–≤:\n"
        "‚Ä¢ <code>/price BTCUSDT</code>\n"
        "‚Ä¢ <code>/analyze BTCUSDT 1h</code>\n"
        "‚Ä¢ <code>/levels BTCUSDT 4h</code>\n"
        "‚Ä¢ <code>/chart BTCUSDT 1h</code>\n"
        "‚Ä¢ <code>/trend BTCUSDT</code>\n"
        "‚Ä¢ <code>/heatmap</code>\n"
        "‚Ä¢ <code>/risk 1000 1 65000 64000</code>  (–±–∞–ª–∞–Ω—Å 1000$, —Ä–∏–∑–∏–∫ 1%, –≤—Ö—ñ–¥ 65000, —Å—Ç–æ–ø 64000)\n"
        "‚Ä¢ <code>/setdefault 1h</code>\n"
        "–î–æ–≤—ñ–¥–∫–∞: <code>/help</code>"
    ))

# ---------- /help ----------
@bot.message_handler(commands=['help'])
def help_cmd(message):
    bot.reply_to(message, (
        "<b>–ö–æ–º–∞–Ω–¥–∏:</b>\n"
        "<code>/price SYMBOL</code> ‚Äî –ø–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞\n"
        "<code>/analyze SYMBOL [interval]</code> ‚Äî —Å–∏–≥–Ω–∞–ª + —Ä—ñ–≤–Ω—ñ S/R\n"
        "<code>/levels SYMBOL [interval]</code> ‚Äî —Å–ø–∏—Å–æ–∫ —Ä—ñ–≤–Ω—ñ–≤ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏/–æ–ø–æ—Ä—É\n"
        "<code>/chart SYMBOL [interval]</code> ‚Äî –≥—Ä–∞—Ñ—ñ–∫ –∑ EMA —Ç–∞ —Ä—ñ–≤–Ω—è–º–∏\n"
        "<code>/trend SYMBOL [interval]</code> ‚Äî —Å–∏–ª–∞ —Ç—Ä–µ–Ω–¥—É\n"
        "<code>/heatmap [N]</code> ‚Äî —Ç–æ–ø —Ä—É—Ö—ñ–≤ USDT-–ø–∞—Ä (–∑–∞ 24h)\n"
        "<code>/risk balance risk% entry stop</code> ‚Äî —Ä–æ–∑–º—ñ—Ä –ø–æ–∑–∏—Ü—ñ—ó\n"
        "<code>/setdefault interval</code> ‚Äî —ñ–Ω—Ç–µ—Ä–≤–∞–ª –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –¥–ª—è —Ü—å–æ–≥–æ —á–∞—Ç—É\n"
        f"–î–æ—Å—Ç—É–ø–Ω—ñ —ñ–Ω—Ç–µ—Ä–≤–∞–ª–∏: {', '.join(sorted(ALLOWED_INTERVALS))}"
    ))

# ---------- /price ----------
@bot.message_handler(commands=['price'])
def price_handler(message):
    symbol, interval = _parse_args(message.text)
    if not symbol:
        return bot.reply_to(message, "‚ö†Ô∏è –ü—Ä–∏–∫–ª–∞–¥: <code>/price BTCUSDT</code>")
    try:
        price = get_price(symbol)
        bot.reply_to(message, f"üí∞ <b>{symbol}</b> = <b>{price:.6f}</b> USDT")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

# ---------- /levels ----------
@bot.message_handler(commands=['levels'])
def levels_handler(message):
    symbol, interval = _parse_args(message.text)
    if not symbol:
        return bot.reply_to(message, "‚ö†Ô∏è –ü—Ä–∏–∫–ª–∞–¥: <code>/levels BTCUSDT 1h</code>")
    interval = interval or _default_interval(message.chat.id)
    try:
        candles = get_klines(symbol, interval=interval)
        lv = find_levels(candles)
        s = ", ".join(f"{x:.4f}" for x in lv["supports"])
        r = ", ".join(f"{x:.4f}" for x in lv["resistances"])
        bot.reply_to(message, (
            f"üîé <b>{symbol}</b> [{interval}] Levels\n"
            f"Supports: {s or '‚Äî'}\n"
            f"Resistances: {r or '‚Äî'}\n"
            f"Nearest S: <b>{lv['near_support']:.4f}</b> | "
            f"Nearest R: <b>{lv['near_resistance']:.4f}</b>\n"
            f"ATR(14): {lv['atr']:.4f} | tol: {lv['tolerance']:.4f}"
        ))
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

# ---------- /analyze ----------
@bot.message_handler(commands=['analyze'])
def analyze_handler(message):
    symbol, interval = _parse_args(message.text)
    if not symbol:
        return bot.reply_to(message, "‚ö†Ô∏è –ü—Ä–∏–∫–ª–∞–¥: <code>/analyze BTCUSDT 1h</code>")
    interval = interval or _default_interval(message.chat.id)
    try:
        text = generate_signal_text(symbol, interval=interval)
        bot.reply_to(message, text)
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

# ---------- /trend ----------
@bot.message_handler(commands=['trend'])
def trend_handler(message):
    symbol, interval = _parse_args(message.text)
    if not symbol:
        return bot.reply_to(message, "‚ö†Ô∏è –ü—Ä–∏–∫–ª–∞–¥: <code>/trend BTCUSDT 4h</code>")
    interval = interval or _default_interval(message.chat.id)
    try:
        candles = get_klines(symbol, interval=interval)
        txt = trend_strength_text(candles)
        bot.reply_to(message, f"üìà <b>{symbol}</b> [{interval}]  {txt}")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

# ---------- /chart ----------
@bot.message_handler(commands=['chart'])
def chart_handler(message):
    symbol, interval = _parse_args(message.text)
    if not symbol:
        return bot.reply_to(message, "‚ö†Ô∏è –ü—Ä–∏–∫–ª–∞–¥: <code>/chart BTCUSDT 1h</code>")
    interval = interval or _default_interval(message.chat.id)
    try:
        img = plot_candles(symbol, interval=interval, limit=200, with_levels=True)
        bot.send_photo(message.chat.id, img)
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

# ---------- /heatmap ----------
@bot.message_handler(commands=['heatmap'])
def heatmap_handler(message):
    parts = message.text.split()
    try:
        n = int(parts[1]) if len(parts) > 1 else 10
    except:
        n = 10
    try:
        movers = top_movers(limit=min(max(n, 1), 20))
        lines = ["üî• <b>Top movers (24h, USDT pairs)</b>"]
        for i, (s, chg, qv) in enumerate(movers, 1):
            lines.append(f"{i}. <b>{s}</b>  {chg:+.2f}%  | vol‚âà{qv/1e6:.2f}M")
        bot.reply_to(message, "\n".join(lines))
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

# ---------- /risk ----------
@bot.message_handler(commands=['risk'])
def risk_handler(message):
    parts = message.text.split()
    if len(parts) < 5:
        return bot.reply_to(message, "‚ö†Ô∏è –ü—Ä–∏–∫–ª–∞–¥: <code>/risk 1000 1 65000 64000</code> (balance risk% entry stop)")
    try:
        balance = float(parts[1])
        risk_pct = float(parts[2])
        entry = float(parts[3])
        stop = float(parts[4])
        res = position_size(balance, risk_pct, entry, stop)
        bot.reply_to(message, (
            f"üßÆ Risk: {risk_pct:.2f}% –≤—ñ–¥ ${balance:.2f} ‚Üí ${res['risk_amount']:.2f}\n"
            f"üì¶ Position size ‚âà <b>{res['qty']:.6f}</b> —Ç–æ–∫–µ–Ω—ñ–≤\n"
            f"üéØ 1R ‚âà {abs(entry - stop):.4f} | 2R TP ‚âà {entry + (res['rr_one_tp'] if entry>stop else -res['rr_one_tp']):.4f}"
        ))
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

# ---------- /setdefault ----------
@bot.message_handler(commands=['setdefault'])
def setdefault_handler(message):
    parts = message.text.split()
    if len(parts) < 2 or parts[1] not in ALLOWED_INTERVALS:
        return bot.reply_to(message, "‚ö†Ô∏è –ü—Ä–∏–∫–ª–∞–¥: <code>/setdefault 1h</code>")
    _user_defaults.setdefault(message.chat.id, {})["interval"] = parts[1]
    bot.reply_to(message, f"‚úÖ –Ü–Ω—Ç–µ—Ä–≤–∞–ª –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –¥–ª—è —Ü—å–æ–≥–æ —á–∞—Ç—É: <b>{parts[1]}</b>")

# ---------- /squeeze (–ü–û–í–ù–Ü–°–¢–Æ –ü–ï–†–ï–†–û–ë–õ–ï–ù–ê) ----------
@bot.message_handler(commands=['squeeze'])
def squeeze_handler(message):
    """
    –°—É—á–∞—Å–Ω–∏–π AI —Å–∫–∞–Ω–µ—Ä —Å–∫–≤—ñ–∑—ñ–≤ —Ç–∞ –ø—Ä–æ–±–æ—ó–≤
    """
    try:
        processing_msg = bot.send_message(message.chat.id, "üîç AI —à—É–∫–∞—î —Å–∫–≤—ñ–∑–∏ —Ç–∞ –ø—Ä–æ–±–æ—ó...")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–ø —Ç–æ–∫–µ–Ω–∏ –∑–∞ –æ–±—Å—è–≥–æ–º
        url = "https://api.binance.com/api/v3/ticker/24hr"
        response = requests.get(url, timeout=15)
        data = response.json()
        
        # –§—ñ–ª—å—Ç—Ä—É—î–º–æ —è–∫—ñ—Å–Ω—ñ —Ç–æ–∫–µ–Ω–∏
        usdt_pairs = [
            d for d in data 
            if (d['symbol'].endswith('USDT') and 
                float(d['quoteVolume']) > 50000000 and  # 50M+ –æ–±—Å—è–≥
                float(d['lastPrice']) > 0.01)  # –¶—ñ–Ω–∞ > 0.01$
        ]
        
        # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ –∑–º—ñ–Ω–æ—é —Ü—ñ–Ω–∏ (–∞–±—Å–æ–ª—é—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è)
        volatile_pairs = sorted(usdt_pairs, 
                              key=lambda x: abs(float(x['priceChangePercent'])), 
                              reverse=True)[:20]
        
        squeeze_signals = []
        
        for pair in volatile_pairs:
            symbol = pair['symbol']
            price_change = float(pair['priceChangePercent'])
            current_price = float(pair['lastPrice'])
            
            try:
                # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –¥–ª—è —Ç–µ—Ö–Ω—ñ—á–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É
                candles = get_klines(symbol, interval="1h", limit=100)
                if not candles or len(candles['c']) < 50:
                    continue
                
                closes = np.array(candles['c'], dtype=float)
                highs = np.array(candles['h'], dtype=float)
                lows = np.array(candles['l'], dtype=float)
                volumes = np.array(candles['v'], dtype=float)
                
                # –°–ø—Ä–æ—â–µ–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ —Å–∫–≤—ñ–∑—É (–±–µ–∑ —Å–∫–ª–∞–¥–Ω–∏—Ö Bollinger Bands)
                current_vol = volumes[-1]
                avg_vol = np.mean(volumes[-20:])
                vol_ratio = current_vol / avg_vol
                
                # –ê–Ω–∞–ª—ñ–∑ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—ñ
                recent_range = np.max(highs[-5:]) - np.min(lows[-5:])
                prev_range = np.max(highs[-10:-5]) - np.min(lows[-10:-5])
                range_ratio = recent_range / prev_range
                
                # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø —Å–∏–≥–Ω–∞–ª—É
                signal_type = None
                signal_strength = "WEAK"
                
                # 1. –í–ò–°–û–ö–ò–ô –û–ë–°–Ø–ì + –ë–Ü–õ–¨–®–ò–ô –†–£–•
                if vol_ratio > 2.0 and abs(price_change) > 8.0:
                    signal_type = "VOLUME_BREAKOUT"
                    signal_strength = "STRONG"
                
                # 2. –°–ö–í–Ü–ó (–Ω–∏–∑—å–∫–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ñ—Å—Ç—å) + –ü–†–û–ë–Ü–ô
                elif range_ratio < 0.6 and abs(price_change) > 5.0:
                    signal_type = "SQUEEZE_BREAKOUT" 
                    signal_strength = "STRONG"
                
                # 3. –í–ò–°–û–ö–ò–ô –û–ë–°–Ø–ì –±–µ–∑ –≤–µ–ª–∏–∫–æ–≥–æ —Ä—É—Ö—É
                elif vol_ratio > 2.5 and abs(price_change) < 3.0:
                    signal_type = "VOLUME_SPIKE"
                    signal_strength = "MODERATE"
                
                if signal_type:
                    # –î–æ–¥–∞—Ç–∫–æ–≤–∏–π AI –∞–Ω–∞–ª—ñ–∑
                    ai_signal = generate_signal_text(symbol, interval="1h")
                    
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–≥–æ–¥—É –∑ AI
                    ai_bullish = any(keyword in ai_signal for keyword in ['LONG', 'BUY', 'UP', 'BULL'])
                    ai_bearish = any(keyword in ai_signal for keyword in ['SHORT', 'SELL', 'DOWN', 'BEAR'])
                    
                    # –í–∏–∑–Ω–∞—á–∞—î–º–æ –Ω–∞–ø—Ä—è–º–æ–∫
                    direction = "BULL" if price_change > 0 else "BEAR"
                    
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–Ω—Å–µ–Ω—Å—É—Å
                    consensus = (direction == "BULL" and ai_bullish) or (direction == "BEAR" and ai_bearish)
                    
                    squeeze_signals.append({
                        'symbol': symbol,
                        'price_change': price_change,
                        'signal_type': signal_type,
                        'strength': signal_strength,
                        'direction': direction,
                        'consensus': consensus,
                        'volume_ratio': vol_ratio,
                        'range_ratio': range_ratio,
                        'current_price': current_price,
                        'ai_signal': ai_signal
                    })
                    
            except Exception as e:
                continue
        
        try:
            bot.delete_message(message.chat.id, processing_msg.message_id)
        except:
            pass
        
        if not squeeze_signals:
            bot.reply_to(message, "üîç –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Å–∫–≤—ñ–∑—ñ–≤ —Ç–∞ –ø—Ä–æ–±–æ—ó–≤")
            return
        
        # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ —Å–∏–ª–æ—é —Å–∏–≥–Ω–∞–ª—É
        squeeze_signals.sort(key=lambda x: (
            x['strength'] == "STRONG",
            x['consensus'],
            abs(x['price_change'])
        ), reverse=True)
        
        response = ["üéØ <b>AI Squeeze Scanner - –ó–Ω–∞–π–¥–µ–Ω—ñ —Å–∏–≥–Ω–∞–ª–∏:</b>\n"]
        
        for signal in squeeze_signals[:10]:
            emoji = "üü¢" if signal['direction'] == "BULL" else "üî¥"
            consensus_emoji = "‚úÖ" if signal['consensus'] else "‚ö†Ô∏è"
            
            response.append(
                f"\n{emoji} <b>{signal['symbol']}</b> - {signal['price_change']:+.2f}%"
            )
            response.append(f"   üìä –¢–∏–ø: {signal['signal_type']} ({signal['strength']})")
            response.append(f"   üîä –û–±—Å—è–≥: x{signal['volume_ratio']:.1f}")
            response.append(f"   üìà –í–æ–ª–∞—Ç–∏–ª—å–Ω—ñ—Å—Ç—å: {signal['range_ratio']:.2f}")
            response.append(f"   {consensus_emoji} –ö–æ–Ω—Å–µ–Ω—Å—É—Å: {'–¢–∞–∫' if signal['consensus'] else '–ù—ñ'}")
            
            # –î–æ–¥–∞—î–º–æ AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—é
            if signal['consensus']:
                if signal['direction'] == "BULL":
                    response.append("   üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è: LONG –Ω–∞ –≤—ñ–¥–∫–∞—Ç–∞—Ö")
                else:
                    response.append("   üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è: SHORT –Ω–∞ –≤—ñ–¥—Å–∫–æ–∫–∞—Ö")
        
        # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É
        markup = types.InlineKeyboardMarkup()
        for signal in squeeze_signals[:3]:
            markup.add(types.InlineKeyboardButton(
                f"üìä {signal['symbol']}", 
                callback_data=f"analyze_{signal['symbol']}"
            ))
        
        markup.add(types.InlineKeyboardButton(
            "üîÑ –û–Ω–æ–≤–∏—Ç–∏ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è", 
            callback_data="rescan_squeeze"
        ))
        
        bot.send_message(message.chat.id, "\n".join(response), 
                        parse_mode="HTML", reply_markup=markup)
        
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–∫–∞–Ω–µ—Ä–∞: {str(e)}")

# ---------- Callback –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–∫–≤—ñ–∑-—Å–∫–∞–Ω–µ—Ä–∞ ----------
@bot.callback_query_handler(func=lambda call: call.data == 'rescan_squeeze')
def rescan_squeeze_callback(call):
    """–ü–µ—Ä–µ—Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è —Å–∫–≤—ñ–∑—ñ–≤"""
    try:
        bot.answer_callback_query(call.id, "üîÑ –ü–µ—Ä–µ—Å–∫–∞–Ω—É—é...")
        
        # –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        try:
            bot.delete_message(call.message.chat.id, call.message.message_id)
        except:
            pass
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –Ω–æ–≤–µ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è
        squeeze_handler(call.message)
        
    except Exception as e:
        bot.send_message(call.message.chat.id, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")

        # ---------- /trap ----------
@bot.message_handler(commands=['trap'])
def trap_scanner(message):
    """–°–∫–∞–Ω—É—î —Ç–æ–ø –ø–∞—Ä–∏ –Ω–∞ –ø–∞—Å—Ç–∫–∏ –ª—ñ–∫–≤—ñ–¥–Ω–æ—Å—Ç—ñ"""
    top_pairs = ['BTCUSDT', 'ETHUSDT', 'BNBUSDT', 'SOLUSDT', 
                 'XRPUSDT', 'ADAUSDT', 'AVAXUSDT', 'DOTUSDT', 
                 'DOGEUSDT', 'LINKUSDT']

    traps = []
    for pair in top_pairs:
        try:
            signal = detect_liquidity_trap(pair, interval="1h", lookback=50)
            if signal:
                traps.append(signal)
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –¥–ª—è {pair}: {e}")
            continue

    if traps:
        bot.send_message(message.chat.id, 
                         "üîç <b>–í–∏—è–≤–ª–µ–Ω—ñ –ø–∞—Å—Ç–∫–∏ –ª—ñ–∫–≤—ñ–¥–Ω–æ—Å—Ç—ñ:</b>\n\n" + "\n".join(traps),
                         parse_mode="HTML")
    else:
        bot.send_message(message.chat.id, 
                         "‚úÖ –ü–∞—Å—Ç–æ–∫ –ª—ñ–∫–≤—ñ–¥–Ω–æ—Å—Ç—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –Ω–∞ 1h —Ç–∞–π–º—Ñ—Ä–µ–π–º—ñ.")
                        
# ---------- /smart_sr ----------
def find_support_resistance(prices, window=20, delta=0.005):
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ñ S/R —Ä—ñ–≤–Ω—ñ
    prices: –º–∞—Å–∏–≤ —Ü—ñ–Ω (–∑–∞–∫—Ä–∏—Ç—Ç—è)
    window: —Å–∫—ñ–ª—å–∫–∏ —Å–≤—ñ—á–æ–∫ –¥–∏–≤–∏–º–æ—Å—è –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –º–∞–∫—Å–∏–º—É–º—É/–º—ñ–Ω—ñ–º—É–º—É
    delta: –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –¥–∏—Å—Ç–∞–Ω—Ü—ñ—è –º—ñ–∂ —Ä—ñ–≤–Ω—è–º–∏ (5%)
    """
    sr_levels = []
    for i in range(window, len(prices)-window):
        local_max = max(prices[i-window:i+window+1])
        local_min = min(prices[i-window:i+window+1])
        if prices[i] == local_max:
            if all(abs(prices[i]-lvl)/lvl > delta for lvl in sr_levels):
                sr_levels.append(prices[i])
        elif prices[i] == local_min:
            if all(abs(prices[i]-lvl)/lvl > delta for lvl in sr_levels):
                sr_levels.append(prices[i])
    return sorted(sr_levels)

@bot.message_handler(commands=['smart_sr'])
def smart_sr_handler(message):
    parts = message.text.split()
    if len(parts) < 2:
        return bot.reply_to(message, "‚ö†Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /smart_sr BTCUSDT")
    symbol = parts[1].upper()
    
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ
        df = get_klines(symbol, interval="1h", limit=200)
        if not df or len(df.get('c', [])) == 0:
            return bot.send_message(message.chat.id, f"‚ùå –î–∞–Ω—ñ –¥–ª—è {symbol} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ")

        closes = np.array(df['c'], dtype=float)
        highs = np.array(df['h'], dtype=float)
        lows = np.array(df['l'], dtype=float)
        volumes = np.array(df['v'], dtype=float)
        
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ S/R —Ä—ñ–≤–Ω—ñ
        sr_levels = find_support_resistance(closes, window=20, delta=0.005)
        last_price = closes[-1]

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ breakout
        signal = "‚ÑπÔ∏è –ü–∞—Ç–µ—Ä–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
        for lvl in sr_levels:
            if last_price > lvl * 1.01:
                signal = f"üöÄ LONG breakout: —Ü—ñ–Ω–∞ –ø—Ä–æ–±–∏–ª–∞ –æ–ø—ñ—Ä {lvl:.4f}"
            elif last_price < lvl * 0.99:
                signal = f"‚ö° SHORT breakout: —Ü—ñ–Ω–∞ –ø—Ä–æ–±–∏–ª–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫—É {lvl:.4f}"

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ pre-top / pump
        if len(closes) >= 4:
            impulse = (closes[-1] - closes[-4]) / closes[-4]
        else:
            impulse = 0
        vol_spike = volumes[-1] > 1.5 * np.mean(volumes[-20:]) if len(volumes) >= 20 else False
        nearest_resistance = max([lvl for lvl in sr_levels if lvl < last_price], default=None)
        if impulse > 0.08 and vol_spike and nearest_resistance is not None:
            signal += f"\n‚ö†Ô∏è Pre-top detected: –º–æ–∂–ª–∏–≤–∏–π short –±—ñ–ª—è {nearest_resistance:.4f}"

        # –ì–µ–Ω–µ—Ä—É—î–º–æ –≥—Ä–∞—Ñ—ñ–∫
        img = plot_candles(symbol, interval="1h", limit=100)
        bot.send_photo(message.chat.id, img, caption=f"<b>{symbol} ‚Äî Smart S/R Analysis</b>\n\n{signal}", parse_mode="HTML")
        
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå Error: {e}")

# ---------- /smart_auto ----------
@bot.message_handler(commands=['smart_auto'])
def smart_auto_handler(message):
    try:
        import requests
        import numpy as np

        url = "https://api.binance.com/api/v3/ticker/24hr"
        data = requests.get(url).json()

        # ‚úÖ —Ñ—ñ–ª—å—Ç—Ä—É—î–º–æ —Ç—ñ–ª—å–∫–∏ USDT-–ø–∞—Ä–∏ –∑ –Ω–æ—Ä–º–∞–ª—å–Ω–∏–º –æ–±'—î–º–æ–º (—â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ —Å–º—ñ—Ç—Ç—î–≤–∏—Ö –º–æ–Ω–µ—Ç)
        symbols = [
            d for d in data
            if d["symbol"].endswith("USDT") and float(d["quoteVolume"]) > 5_000_000
        ]

        # ‚úÖ —Å–æ—Ä—Ç—É—î–º–æ –∑–∞ % –∑–º—ñ–Ω–∏ —Ü—ñ–Ω–∏ –∑–∞ 24 –≥–æ–¥–∏–Ω–∏ (—Ç–æ–ø —Ä—É—Ö–æ–º—ñ –º–æ–Ω–µ—Ç–∏)
        symbols = sorted(
            symbols,
            key=lambda x: abs(float(x["priceChangePercent"])),
            reverse=True
        )

        # –±–µ—Ä–µ–º–æ —Ç–æ–ø-30 –Ω–∞–π–∞–∫—Ç–∏–≤–Ω—ñ—à–∏—Ö
        top_symbols = [s["symbol"] for s in symbols[:30]]

        signals = []
        for symbol in top_symbols:
            try:
                df = get_klines(symbol, interval="1h", limit=200)
                if not df or len(df.get("c", [])) < 50:
                    continue

                closes = np.array(df["c"], dtype=float)
                volumes = np.array(df["v"], dtype=float)

                sr_levels = find_support_resistance(closes, window=20, delta=0.005)
                last_price = closes[-1]

                signal = None
                for lvl in sr_levels:
                    diff = last_price - lvl
                    diff_pct = (diff / lvl) * 100

                    if last_price > lvl * 1.01:
                        signal = (
                            f"üöÄ LONG breakout: —Ü—ñ–Ω–∞ –ø—Ä–æ–±–∏–ª–∞ –æ–ø—ñ—Ä {lvl:.4f}\n"
                            f"üìä –†–∏–Ω–∫–æ–≤–∞: {last_price:.4f} | –í—ñ–¥—Ä–∏–≤: {diff:+.4f} ({diff_pct:+.2f}%)"
                        )
                        break
                    elif last_price < lvl * 0.99:
                        signal = (
                            f"‚ö° SHORT breakout: —Ü—ñ–Ω–∞ –ø—Ä–æ–±–∏–ª–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫—É {lvl:.4f}\n"
                            f"üìä –†–∏–Ω–∫–æ–≤–∞: {last_price:.4f} | –í—ñ–¥—Ä–∏–≤: {diff:+.4f} ({diff_pct:+.2f}%)"
                        )
                        break

                # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ pre-top / pump
                impulse = (closes[-1] - closes[-4]) / closes[-4] if len(closes) >= 4 else 0
                vol_spike = volumes[-1] > 1.5 * np.mean(volumes[-20:]) if len(volumes) >= 20 else False
                nearest_res = max([lvl for lvl in sr_levels if lvl < last_price], default=None)
                if impulse > 0.08 and vol_spike and nearest_res is not None:
                    diff = last_price - nearest_res
                    diff_pct = (diff / nearest_res) * 100
                    signal = (
                        f"‚ö†Ô∏è Pre-top detected: –º–æ–∂–ª–∏–≤–∏–π short –±—ñ–ª—è {nearest_res:.4f}\n"
                        f"üìä –†–∏–Ω–∫–æ–≤–∞: {last_price:.4f} | –í—ñ–¥—Ä–∏–≤: {diff:+.4f} ({diff_pct:+.2f}%)"
                    )

                if signal:
                    signals.append(f"<b>{symbol}</b>\n{signal}")

            except Exception:
                continue

        if not signals:
            bot.send_message(message.chat.id, "‚ÑπÔ∏è –ñ–æ–¥–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        else:
            text = "<b>Smart Auto S/R Signals</b>\n\n" + "\n\n".join(signals)
            bot.send_message(message.chat.id, text, parse_mode="HTML")

    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå Error: {e}")
        
# ---------- /patern ----------
@bot.message_handler(commands=['patern', 'pattern'])
def pattern_handler(message):
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –ø–æ—à—É–∫ —Ç–æ—Ä–≥–æ–≤–∏—Ö –ø–∞—Ç–µ—Ä–Ω—ñ–≤
    –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /patern [SYMBOL] [INTERVAL]
    """
    try:
        parts = message.text.split()
        symbol = None
        interval = None
        
        if len(parts) >= 2:
            symbol = parts[1].upper()
            if not symbol.endswith('USDT'):
                symbol += 'USDT'
        
        if len(parts) >= 3 and parts[2] in ALLOWED_INTERVALS:
            interval = parts[2]
        else:
            interval = _default_interval(message.chat.id)
        
        if not symbol:
            # –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è —Ç–æ–ø –º–æ–Ω–µ—Ç —è–∫—â–æ —Å–∏–º–≤–æ–ª –Ω–µ –≤–∫–∞–∑–∞–Ω–æ
            return scan_top_patterns(message)
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ
        candles = get_klines(symbol, interval=interval, limit=100)
        if not candles or len(candles['c']) < 20:
            bot.reply_to(message, f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è {symbol} [{interval}]")
            return
        
        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –¥–∞–Ω—ñ
        opens = np.array(candles['o'], dtype=float)
        highs = np.array(candles['h'], dtype=float)
        lows = np.array(candles['l'], dtype=float)
        closes = np.array(candles['c'], dtype=float)
        volumes = np.array(candles['v'], dtype=float)
        
        patterns = []
        
        # 1. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ–±—ñ–π —Ä—ñ–≤–Ω—ñ–≤
        sr_levels = find_levels(candles)
        current_price = closes[-1]
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–æ–±–æ—é –æ–ø–æ—Ä—É
        for resistance in sr_levels['resistances']:
            if current_price > resistance * 1.01 and current_price < resistance * 1.03:
                patterns.append(("RESISTANCE_BREAKOUT", "LONG", f"–ü—Ä–æ–±–∏—Ç—Ç—è –æ–ø–æ—Ä—É {resistance:.4f}"))
                break
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–æ–±–æ—é –ø—ñ–¥—Ç—Ä–∏–º–∫–∏
        for support in sr_levels['supports']:
            if current_price < support * 0.99 and current_price > support * 0.97:
                patterns.append(("SUPPORT_BREAKOUT", "SHORT", f"–ü—Ä–æ–±–∏—Ç—Ç—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ {support:.4f}"))
                break
        
        # 2. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –∫–ª–∞—Å–∏—á–Ω—ñ —Å–≤—ñ—á–∫–æ–≤—ñ –ø–∞—Ç–µ—Ä–Ω–∏
        # –ë—É–ª—åish Engulfing
        if len(closes) >= 3:
            prev_open = opens[-2]
            prev_close = closes[-2]
            current_open = opens[-1]
            current_close = closes[-1]
            
            # –ë—É–ª—åish Engulfing
            if prev_close < prev_open and current_close > current_open and current_close > prev_open and current_open < prev_close:
                patterns.append(("BULLISH_ENGULFING", "LONG", "–ë—É–ª—åish Engulfing –ø–∞—Ç–µ—Ä–Ω"))
            
            # –ë–µ–∞—Äish Engulfing
            if prev_close > prev_open and current_close < current_open and current_close < prev_open and current_open > prev_close:
                patterns.append(("BEARISH_ENGULFING", "SHORT", "–ë–µ–∞—Äish Engulfing –ø–∞—Ç–µ—Ä–Ω"))
            
            # Hammer
            body_size = abs(current_close - current_open)
            lower_wick = min(current_open, current_close) - lows[-1]
            upper_wick = highs[-1] - max(current_open, current_close)
            
            if lower_wick > body_size * 2 and upper_wick < body_size * 0.5 and current_close > current_open:
                patterns.append(("HAMMER", "LONG", "Hammer –ø–∞—Ç–µ—Ä–Ω"))
            
            # Shooting Star
            if upper_wick > body_size * 2 and lower_wick < body_size * 0.5 and current_close < current_open:
                patterns.append(("SHOOTING_STAR", "SHORT", "Shooting Star –ø–∞—Ç–µ—Ä–Ω"))
        
        # 3. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —Ç—Ä—ñ–π–Ω–µ –¥–Ω–æ/–≤–µ—Ä—à–∏–Ω—É
        if len(closes) >= 15:
            # –ü—Ä–æ—Å—Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è —Ç—Ä—ñ–π–Ω–æ—ó –≤–µ—Ä—à–∏–Ω–∏
            last_15_highs = highs[-15:]
            last_15_lows = lows[-15:]
            
            # –ü–æ—à—É–∫ –ª–æ–∫–∞–ª—å–Ω–∏—Ö –º–∞–∫—Å–∏–º—É–º—ñ–≤
            peaks = []
            for i in range(5, len(last_15_highs)-5):
                if (last_15_highs[i] > last_15_highs[i-1] and 
                    last_15_highs[i] > last_15_highs[i+1] and
                    last_15_highs[i] > np.mean(last_15_highs)):
                    peaks.append((i, last_15_highs[i]))
            
            # –ü–æ—à—É–∫ –ª–æ–∫–∞–ª—å–Ω–∏—Ö –º—ñ–Ω—ñ–º—É–º—ñ–≤
            troughs = []
            for i in range(5, len(last_15_lows)-5):
                if (last_15_lows[i] < last_15_lows[i-1] and 
                    last_15_lows[i] < last_15_lows[i+1] and
                    last_15_lows[i] < np.mean(last_15_lows)):
                    troughs.append((i, last_15_lows[i]))
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —Ç—Ä—ñ–π–Ω—É –≤–µ—Ä—à–∏–Ω—É
            if len(peaks) >= 3:
                peaks.sort(key=lambda x: x[1], reverse=True)
                if abs(peaks[0][1] - peaks[1][1]) / peaks[0][1] < 0.02 and abs(peaks[0][1] - peaks[2][1]) / peaks[0][1] < 0.02:
                    patterns.append(("TRIPLE_TOP", "SHORT", "–¢—Ä—ñ–π–Ω–∞ –≤–µ—Ä—à–∏–Ω–∞"))
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —Ç—Ä—ñ–π–Ω–µ –¥–Ω–æ
            if len(troughs) >= 3:
                troughs.sort(key=lambda x: x[1])
                if abs(troughs[0][1] - troughs[1][1]) / troughs[0][1] < 0.02 and abs(troughs[0][1] - troughs[2][1]) / troughs[0][1] < 0.02:
                    patterns.append(("TRIPLE_BOTTOM", "LONG", "–¢—Ä—ñ–π–Ω–µ –¥–Ω–æ"))
        
        # 4. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø—Ä–∞–ø–æ—Ä–∏
        if len(closes) > 20:
            # –ê–Ω–∞–ª—ñ–∑ —Ç—Ä–µ–Ω–¥—É
            price_change = (closes[-1] - closes[-20]) / closes[-20]
            
            if abs(price_change) > 0.05:  # –ú—ñ–Ω—ñ–º—É–º 5% —Ä—É—Ö
                # –ê–Ω–∞–ª—ñ–∑ –∫–æ–Ω—Å–æ–ª—ñ–¥–∞—Ü—ñ—ó
                last_5_range = max(highs[-5:]) - min(lows[-5:])
                prev_5_range = max(highs[-10:-5]) - min(lows[-10:-5])
                
                if last_5_range < prev_5_range * 0.6:  # –ö–æ–Ω—Å–æ–ª—ñ–¥–∞—Ü—ñ—è
                    if price_change > 0:
                        patterns.append(("BULL_FLAG", "LONG", "–ë–∏—á–∞—á–∏–π –ø—Ä–∞–ø–æ—Ä"))
                    else:
                        patterns.append(("BEAR_FLAG", "SHORT", "–í–µ–¥–º–µ–∂–∏–π –ø—Ä–∞–ø–æ—Ä"))
        
        if not patterns:
            bot.reply_to(message, f"üîç –î–ª—è {symbol} [{interval}] —Ç–æ—Ä–≥–æ–≤–∏—Ö –ø–∞—Ç–µ—Ä–Ω—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return
        
        # –§–æ—Ä–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        response = [f"üéØ <b>–ó–Ω–∞–π–¥–µ–Ω—ñ –ø–∞—Ç–µ—Ä–Ω–∏ –¥–ª—è {symbol} [{interval}]:</b>\n"]
        
        for pattern_name, signal_type, description in patterns:
            emoji = "üü¢" if signal_type == "LONG" else "üî¥"
            response.append(f"{emoji} <b>{pattern_name}</b> ‚Üí {signal_type}")
            response.append(f"   üìù {description}")
        
        response.append(f"\nüìä <i>–ó–∞–≥–∞–ª–æ–º –∑–Ω–∞–π–¥–µ–Ω–æ {len(patterns)} –ø–∞—Ç–µ—Ä–Ω(—ñ–≤)</i>")
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≥—Ä–∞—Ñ—ñ–∫
        try:
            img = plot_candles(symbol, interval=interval, limit=100)
            bot.send_photo(message.chat.id, img, caption="\n".join(response), parse_mode="HTML")
        except:
            bot.reply_to(message, "\n".join(response), parse_mode="HTML")
            
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É –ø–∞—Ç–µ—Ä–Ω—ñ–≤: {str(e)}")

def scan_top_patterns(message):
    """
    –°–∫–∞–Ω—É—î —Ç–æ–ø –º–æ–Ω–µ—Ç–∏ –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –ø–∞—Ç–µ—Ä–Ω—ñ–≤
    """
    try:
        url = "https://api.binance.com/api/v3/ticker/24hr"
        response = requests.get(url)
        data = response.json()
        
        # –§—ñ–ª—å—Ç—Ä—É—î–º–æ USDT –ø–∞—Ä–∏ –∑ –≤–∏—Å–æ–∫–∏–º –æ–±—Å—è–≥–æ–º
        usdt_pairs = [d for d in data if d['symbol'].endswith('USDT') and float(d['quoteVolume']) > 10000000]
        top_pairs = sorted(usdt_pairs, key=lambda x: float(x['quoteVolume']), reverse=True)[:15]
        
        found_patterns = []
        
        for pair in top_pairs:
            symbol = pair['symbol']
            try:
                candles = get_klines(symbol, interval="1h", limit=50)
                if not candles or len(candles['c']) < 20:
                    continue
                
                closes = np.array(candles['c'], dtype=float)
                opens = np.array(candles['o'], dtype=float)
                highs = np.array(candles['h'], dtype=float)
                lows = np.array(candles['l'], dtype=float)
                
                current_price = closes[-1]
                prev_close = closes[-2] if len(closes) >= 2 else current_price
                
                # –ü—Ä–æ—Å—Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ–±—ñ–π
                price_change = (current_price - prev_close) / prev_close
                
                if abs(price_change) > 0.03:  # 3% –∑–º—ñ–Ω–∞
                    direction = "LONG" if price_change > 0 else "SHORT"
                    found_patterns.append((symbol, "BREAKOUT", direction, f"{abs(price_change)*100:.1f}%"))
                
            except:
                continue
        
        if not found_patterns:
            bot.reply_to(message, "üîç –¢–æ—Ä–≥–æ–≤–∏—Ö –ø–∞—Ç–µ—Ä–Ω—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É —Ç–æ–ø –º–æ–Ω–µ—Ç–∞—Ö")
            return
        
        # –§–æ—Ä–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        response = ["üîç <b>–¢–æ–ø –º–æ–Ω–µ—Ç–∏ –∑ —Ç–æ—Ä–≥–æ–≤–∏–º–∏ –ø–∞—Ç–µ—Ä–Ω–∞–º–∏ (1h):</b>\n"]
        
        for symbol, pattern, direction, change in found_patterns[:10]:
            emoji = "üü¢" if direction == "LONG" else "üî¥"
            response.append(f"{emoji} {symbol}: {pattern} {direction} ({change})")
        
        bot.reply_to(message, "\n".join(response), parse_mode="HTML")
        
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—ñ —Ç–æ–ø –º–æ–Ω–µ—Ç: {str(e)}")
        
# ---------- /analyze_auto (–ó –§–Ü–õ–¨–¢–†–û–ú –ü–û –û–ë–°–Ø–ì–£) ----------
@bot.message_handler(commands=['analyze_auto'])
def analyze_auto_handler(message):
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è –¥–ª—è –ø–æ—à—É–∫—É –°–ò–õ–¨–ù–ò–• —Å–∏–≥–Ω–∞–ª—ñ–≤ (–∑ —Ñ—ñ–ª—å—Ç—Ä–æ–º –æ–±—Å—è–≥—É)
    """
    try:
        processing_msg = bot.send_message(message.chat.id, "üîç –®—É–∫–∞—é —Å–∏–ª—å–Ω—ñ —Å–∏–≥–Ω–∞–ª–∏...")
        
        url = "https://api.binance.com/api/v3/ticker/24hr"
        response = requests.get(url, timeout=15)
        data = response.json()
        
        # –§—ñ–ª—å—Ç—Ä—É—î–º–æ: USDT –ø–∞—Ä–∏ + –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –æ–±—Å—è–≥ 10M$ + –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Ü—ñ–Ω–∞ 0.01$
        usdt_pairs = [
            d for d in data 
            if (d['symbol'].endswith('USDT') and 
                float(d['quoteVolume']) > 10000000 and  # 10M$ –æ–±—Å—è–≥
                float(d['lastPrice']) > 0.01)  # –¶—ñ–Ω–∞ –≤–∏—â–µ 0.01$
        ]
        
        # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ –∑–º—ñ–Ω–æ—é —Ü—ñ–Ω–∏
        top_pairs = sorted(usdt_pairs, 
                          key=lambda x: abs(float(x['priceChangePercent'])), 
                          reverse=True)[:25]  # –¢–æ–ø-25
        
        strong_signals = []
        
        for pair in top_pairs:
            symbol = pair['symbol']
            price_change = float(pair['priceChangePercent'])
            volume = float(pair['quoteVolume']) / 1000000  # –í –º—ñ–ª—å–π–æ–Ω–∞—Ö
            
            try:
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞ —Ä—ñ–∑–Ω–∏—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞—Ö –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
                signals_1h = generate_signal_text(symbol, interval="1h")
                signals_4h = generate_signal_text(symbol, interval="4h")
                
                # –®—É–∫–∞—î–º–æ –ß–Ü–¢–ö–Ü —Å–∏–≥–Ω–∞–ª–∏ –∑ –∫–ª—é—á–æ–≤–∏–º–∏ —Å–ª–æ–≤–∞–º–∏
                is_strong_long_1h = any(keyword in signals_1h for keyword in 
                                      ['STRONG LONG', 'STRONG_BUY', '—Å–∏–ª—å–Ω–∏–π –ª–æ–Ω–≥', '–ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–∏–π –ª–æ–Ω–≥'])
                is_strong_short_1h = any(keyword in signals_1h for keyword in 
                                       ['STRONG SHORT', 'STRONG_SELL', '—Å–∏–ª—å–Ω–∏–π —à–æ—Ä—Ç', '–ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–∏–π —à–æ—Ä—Ç'])
                
                is_strong_long_4h = any(keyword in signals_4h for keyword in 
                                      ['STRONG LONG', 'STRONG_BUY', '—Å–∏–ª—å–Ω–∏–π –ª–æ–Ω–≥', '–ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–∏–π –ª–æ–Ω–≥'])
                is_strong_short_4h = any(keyword in signals_4h for keyword in 
                                       ['STRONG SHORT', 'STRONG_SELL', '—Å–∏–ª—å–Ω–∏–π —à–æ—Ä—Ç', '–ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–∏–π —à–æ—Ä—Ç'])
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–Ω—Å–µ–Ω—Å—É—Å –º—ñ–∂ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º–∏
                long_consensus = (is_strong_long_1h and is_strong_long_4h) or (is_strong_long_1h and not is_strong_short_4h) or (is_strong_long_4h and not is_strong_short_1h)
                short_consensus = (is_strong_short_1h and is_strong_short_4h) or (is_strong_short_1h and not is_strong_long_4h) or (is_strong_short_4h and not is_strong_long_1h)
                
                if long_consensus or short_consensus:
                    signal_type = "STRONG LONG" if long_consensus else "STRONG SHORT"
                    
                    # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –∑–≥–æ–¥—É –∑ —Ü—ñ–Ω–æ–≤–∏–º —Ä—É—Ö–æ–º
                    price_agreement = (price_change > 0 and long_consensus) or (price_change < 0 and short_consensus)
                    agreement_emoji = "‚úÖ" if price_agreement else "‚ö†Ô∏è"
                    
                    strong_signals.append({
                        'symbol': symbol,
                        'price_change': price_change,
                        'volume': volume,
                        'signal_type': signal_type,
                        'agreement': price_agreement,
                        'agreement_emoji': agreement_emoji,
                        'signal_1h': signals_1h,
                        'signal_4h': signals_4h
                    })
                    
            except Exception:
                continue
        
        try:
            bot.delete_message(message.chat.id, processing_msg.message_id)
        except:
            pass
        
        if not strong_signals:
            bot.reply_to(message, "üîç –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Å–∏–ª—å–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤ –∑ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–æ–º")
            return
        
        # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ –æ–±—Å—è–≥–æ–º (—â–æ–± –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏ –ª—ñ–∫–≤—ñ–¥–Ω—ñ—à—ñ –ø–µ—Ä—à–∏–º–∏)
        strong_signals.sort(key=lambda x: x['volume'], reverse=True)
        
        response = ["üéØ <b>–°–ò–õ–¨–ù–Ü —Å–∏–≥–Ω–∞–ª–∏ (–æ–±—Å—è–≥ >10M$, —Ü—ñ–Ω–∞ >0.01$):</b>\n"]
        
        for signal in strong_signals[:10]:
            emoji = "üü¢" if "LONG" in signal['signal_type'] else "üî¥"
            response.append(
                f"\n{emoji} <b>{signal['symbol']}</b> - {signal['price_change']:+.2f}%"
            )
            response.append(f"   üìä –û–±—Å—è–≥: {signal['volume']:.1f}M")
            response.append(f"   {signal['agreement_emoji']} {signal['signal_type']}")
            
            # –î–æ–¥–∞—î–º–æ –∫–æ—Ä–æ—Ç–∫—É —ñ–Ω—Ñ–æ –∑ 1h —Ç–∞–π–º—Ñ—Ä–µ–π–º—É
            lines_1h = signal['signal_1h'].split('\n')
            response.append(f"   1h: {lines_1h[0][:50]}...")
        
        bot.reply_to(message, "\n".join(response), parse_mode="HTML")
        
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")

# ---------- /analyze_multi (–ó –§–Ü–õ–¨–¢–†–û–ú –ü–û –û–ë–°–Ø–ì–£) ----------
@bot.message_handler(commands=['analyze_multi'])
def analyze_multi_handler(message):
    """
    –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è —Ç–æ–ø —Ç–æ–∫–µ–Ω—ñ–≤ –∑–∞ –∑–º—ñ–Ω–æ—é —Ü—ñ–Ω–∏ (–∑ —Ñ—ñ–ª—å—Ç—Ä–æ–º –æ–±—Å—è–≥—É)
    """
    try:
        processing_msg = bot.send_message(message.chat.id, "üîç –®–≤–∏–¥–∫–µ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è...")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–ø —Ç–æ–∫–µ–Ω–∏
        url = "https://api.binance.com/api/v3/ticker/24hr"
        response = requests.get(url, timeout=10)
        data = response.json()
        
        # –§—ñ–ª—å—Ç—Ä: –æ–±—Å—è–≥ >20M$, —Ü—ñ–Ω–∞ >0.05$
        usdt_pairs = [
            d for d in data 
            if (d['symbol'].endswith('USDT') and 
                float(d['quoteVolume']) > 20000000 and  # 20M$ –æ–±—Å—è–≥
                float(d['lastPrice']) > 0.05)  # –¶—ñ–Ω–∞ –≤–∏—â–µ 0.05$
        ]
        
        # –¢–æ–ø-20 –∑–∞ –∑–º—ñ–Ω–æ—é —Ü—ñ–Ω–∏
        top_pairs = sorted(usdt_pairs, 
                          key=lambda x: abs(float(x['priceChangePercent'])), 
                          reverse=True)[:20]
        
        signals_found = []
        
        for pair in top_pairs:
            symbol = pair['symbol']
            price_change = float(pair['priceChangePercent'])
            volume = float(pair['quoteVolume']) / 1000000  # –í –º—ñ–ª—å–π–æ–Ω–∞—Ö
            
            try:
                signal_text = generate_signal_text(symbol, interval="1h")
                
                # –®—É–∫–∞—î–º–æ —Å–∏–≥–Ω–∞–ª–∏ –≤ —Ç–µ–∫—Å—Ç—ñ
                is_long = any(keyword in signal_text for keyword in ['LONG', 'BUY', 'UP', 'BULL'])
                is_short = any(keyword in signal_text for keyword in ['SHORT', 'SELL', 'DOWN', 'BEAR'])
                
                if is_long or is_short:
                    signal_type = "LONG" if is_long else "SHORT"
                    
                    # –ë–µ—Ä–µ–º–æ –ø–µ—Ä—à—ñ 2 —Ä—è–¥–∫–∏
                    lines = signal_text.split('\n')
                    short_info = ' | '.join(lines[:2]) if len(lines) > 1 else lines[0]
                    
                    signals_found.append((symbol, price_change, volume, signal_type, short_info))
                    
            except Exception:
                continue
        
        try:
            bot.delete_message(message.chat.id, processing_msg.message_id)
        except:
            pass
        
        if not signals_found:
            bot.reply_to(message, "üîç –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Å–∏–≥–Ω–∞–ª—ñ–≤ —É –ª—ñ–∫–≤—ñ–¥–Ω–∏—Ö —Ç–æ–∫–µ–Ω–∞—Ö")
            return
        
        # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ –æ–±—Å—è–≥–æ–º (–ª—ñ–∫–≤—ñ–¥–Ω—ñ—à—ñ –ø–µ—Ä—à–∏–º–∏)
        signals_found.sort(key=lambda x: x[2], reverse=True)
        
        response = ["‚ö° <b>–°–∏–≥–Ω–∞–ª–∏ —É –ª—ñ–∫–≤—ñ–¥–Ω–∏—Ö —Ç–æ–∫–µ–Ω–∞—Ö (–æ–±—Å—è–≥ >20M$):</b>\n"]
        
        for symbol, price_change, volume, signal_type, info in signals_found[:15]:
            emoji = "üü¢" if price_change > 0 else "üî¥"
            signal_emoji = "üü¢" if signal_type == "LONG" else "üî¥"
            response.append(f"\n{emoji} <b>{symbol}</b> - {price_change:+.2f}%")
            response.append(f"   üìä Vol: {volume:.1f}M")
            response.append(f"   {signal_emoji} {signal_type}: {info}")
        
        bot.reply_to(message, "\n".join(response), parse_mode="HTML")
        
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")

# ---------- /analyze_top (–ó –§–Ü–õ–¨–¢–†–û–ú –ü–û –û–ë–°–Ø–ì–£) ----------
@bot.message_handler(commands=['analyze_top'])
def analyze_top_handler(message):
    """
    –ü–æ—à—É–∫ —Ç–æ–∫–µ–Ω—ñ–≤ –∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—é –∫—ñ–ª—å–∫—ñ—Å—Ç—é —Å–∏–≥–Ω–∞–ª—ñ–≤ (–∑ —Ñ—ñ–ª—å—Ç—Ä–æ–º –æ–±—Å—è–≥—É)
    """
    try:
        parts = message.text.split()
        min_signals = 3  # –ú—ñ–Ω—ñ–º—É–º 3 —Å–∏–≥–Ω–∞–ª–∏
        
        if len(parts) >= 2:
            try:
                min_signals = int(parts[1])
                min_signals = max(1, min(min_signals, 6))
            except:
                pass
        
        processing_msg = bot.send_message(message.chat.id, f"üîç –®—É–∫–∞—é —Ç–æ–∫–µ–Ω–∏ –∑ {min_signals}+ —Å–∏–≥–Ω–∞–ª–∞–º–∏...")
        
        url = "https://api.binance.com/api/v3/ticker/24hr"
        response = requests.get(url, timeout=15)
        data = response.json()
        
        # –§—ñ–ª—å—Ç—Ä: –æ–±—Å—è–≥ >50M$, —Ü—ñ–Ω–∞ >0.10$
        usdt_pairs = [
            d for d in data 
            if (d['symbol'].endswith('USDT') and 
                float(d['quoteVolume']) > 50000000 and  # 50M$ –æ–±—Å—è–≥
                float(d['lastPrice']) > 0.10)  # –¶—ñ–Ω–∞ –≤–∏—â–µ 0.10$
        ]
        
        # –¢–æ–ø-30 –∑–∞ –æ–±—Å—è–≥–æ–º
        top_symbols = [pair['symbol'] for pair in sorted(usdt_pairs, 
                                                       key=lambda x: float(x['quoteVolume']), 
                                                       reverse=True)[:30]]
        
        results = []
        
        for symbol in top_symbols:
            try:
                signal_count = 0
                signal_details = []
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä—ñ–∑–Ω—ñ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∏
                for interval in ['15m', '1h', '4h', '1d']:
                    try:
                        signal_text = generate_signal_text(symbol, interval=interval)
                        
                        if any(keyword in signal_text for keyword in ['LONG', 'SHORT', 'BUY', 'SELL']):
                            signal_type = "LONG" if any(kw in signal_text for kw in ['LONG', 'BUY']) else "SHORT"
                            signal_count += 1
                            signal_details.append((interval, signal_type))
                            
                    except Exception:
                        continue
                
                if signal_count >= min_signals:
                    pair_data = [d for d in data if d['symbol'] == symbol][0]
                    price_change = float(pair_data['priceChangePercent'])
                    volume = float(pair_data['quoteVolume']) / 1000000
                    
                    results.append({
                        'symbol': symbol,
                        'signal_count': signal_count,
                        'price_change': price_change,
                        'volume': volume,
                        'details': signal_details
                    })
                    
            except Exception:
                continue
        
        try:
            bot.delete_message(message.chat.id, processing_msg.message_id)
        except:
            pass
        
        if not results:
            bot.reply_to(message, f"üîç –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ç–æ–∫–µ–Ω—ñ–≤ –∑ {min_signals}+ —Å–∏–≥–Ω–∞–ª–∞–º–∏")
            return
        
        # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ –æ–±—Å—è–≥–æ–º
        results.sort(key=lambda x: x['volume'], reverse=True)
        
        response = [f"üèÜ <b>–¢–æ–∫–µ–Ω–∏ –∑ {min_signals}+ —Å–∏–≥–Ω–∞–ª–∞–º–∏ (–æ–±—Å—è–≥ >50M$):</b>\n"]
        
        for result in results:
            emoji = "üü¢" if result['price_change'] > 0 else "üî¥"
            
            # –ì—Ä—É–ø—É—î–º–æ —Å–∏–≥–Ω–∞–ª–∏ –ø–æ —Ç–∏–ø–∞—Ö
            long_count = sum(1 for _, sig_type in result['details'] if sig_type == "LONG")
            short_count = sum(1 for _, sig_type in result['details'] if sig_type == "SHORT")
            
            response.append(
                f"\n{emoji} <b>{result['symbol']}</b> - {result['signal_count']} —Å–∏–≥–Ω. "
                f"({result['price_change']:+.2f}%)"
            )
            response.append(f"   üìä Vol: {result['volume']:.1f}M")
            response.append(f"   üü¢ {long_count} –ª–æ–Ω–≥—ñ–≤ | üî¥ {short_count} —à–æ—Ä—Ç—ñ–≤")
            
            # –î–æ–¥–∞—î–º–æ –¥–µ—Ç–∞–ª—ñ –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞—Ö
            for interval, signal_type in result['details'][:4]:
                sig_emoji = "üü¢" if signal_type == "LONG" else "üî¥"
                response.append(f"   {sig_emoji} {interval}")
        
        bot.reply_to(message, "\n".join(response), parse_mode="HTML")
        
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")

# ---------- /analyze_liquid ----------
@bot.message_handler(commands=['analyze_liquid'])
def analyze_liquid_handler(message):
    """
    –ü–æ–∫–∞–∑—É—î —Ç—ñ–ª—å–∫–∏ –Ω–∞–π–ª—ñ–∫–≤—ñ–¥–Ω—ñ—à—ñ —Ç–æ–∫–µ–Ω–∏ (–±–µ–∑ —Å–∏–≥–Ω–∞–ª—ñ–≤)
    """
    try:
        processing_msg = bot.send_message(message.chat.id, "üîç –û—Ç—Ä–∏–º—É—é —Å–ø–∏—Å–æ–∫ –ª—ñ–∫–≤—ñ–¥–Ω–∏—Ö —Ç–æ–∫–µ–Ω—ñ–≤...")
        
        url = "https://api.binance.com/api/v3/ticker/24hr"
        response = requests.get(url, timeout=10)
        data = response.json()
        
        # –§—ñ–ª—å—Ç—Ä: –æ–±—Å—è–≥ >100M$, —Ü—ñ–Ω–∞ >0.50$
        liquid_pairs = [
            d for d in data 
            if (d['symbol'].endswith('USDT') and 
                float(d['quoteVolume']) > 100000000 and  # 100M$ –æ–±—Å—è–≥
                float(d['lastPrice']) > 0.50)  # –¶—ñ–Ω–∞ –≤–∏—â–µ 0.50$
        ]
        
        # –¢–æ–ø-20 –∑–∞ –æ–±—Å—è–≥–æ–º
        top_liquid = sorted(liquid_pairs, 
                           key=lambda x: float(x['quoteVolume']), 
                           reverse=True)[:20]
        
        response = ["üíé <b>–ù–∞–π–ª—ñ–∫–≤—ñ–¥–Ω—ñ—à—ñ —Ç–æ–∫–µ–Ω–∏ (–æ–±—Å—è–≥ >100M$):</b>\n"]
        
        for i, pair in enumerate(top_liquid, 1):
            symbol = pair['symbol']
            price = float(pair['lastPrice'])
            change = float(pair['priceChangePercent'])
            volume = float(pair['quoteVolume']) / 1000000  # –í –º—ñ–ª—å–π–æ–Ω–∞—Ö
            
            emoji = "üü¢" if change > 0 else "üî¥"
            response.append(
                f"\n{i}. {emoji} <b>{symbol}</b> - ${price:,.2f} "
                f"{change:+.2f}% | Vol: {volume:,.0f}M"
            )
        
        try:
            bot.delete_message(message.chat.id, processing_msg.message_id)
        except:
            pass
        
        bot.reply_to(message, "\n".join(response), parse_mode="HTML")
        
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")
        
        # ---------- /ai_sentiment ----------
@bot.message_handler(commands=['ai_sentiment'])
def ai_sentiment_handler(message):
    """
    AI –∞–Ω–∞–ª—ñ–∑ sentiment –∑ –Ω–æ–≤–∏–Ω, —Å–æ—Ü–º–µ—Ä–µ–∂ —Ç–∞ —á–∞—Ç—ñ–≤ —É —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ
    """
    try:
        processing_msg = bot.send_message(message.chat.id, "üß† AI –∞–Ω–∞–ª—ñ–∑—É—é sentiment —Ä–∏–Ω–∫—É...")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–ø —Ç–æ–∫–µ–Ω–∏
        url = "https://api.binance.com/api/v3/ticker/24hr"
        response = requests.get(url, timeout=10)
        data = response.json()
        
        # –§—ñ–ª—å—Ç—Ä: –æ–±—Å—è–≥ > 50M$
        usdt_pairs = [d for d in data if d['symbol'].endswith('USDT') and float(d['quoteVolume']) > 50000000]
        top_symbols = [pair['symbol'] for pair in sorted(usdt_pairs, 
                                                       key=lambda x: float(x['quoteVolume']), 
                                                       reverse=True)[:15]]
        
        ai_results = []
        
        for symbol in top_symbols:
            try:
                # IMITATE AI SENTIMENT ANALYSIS (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—ñ –±—É–¥–µ API –¥–æ AI –º–æ–¥–µ–ª—ñ)
                price_change = float([d for d in data if d['symbol'] == symbol][0]['priceChangePercent'])
                
                # –ì–µ–Ω–µ—Ä—É—î–º–æ "AI" sentiment –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ç–µ—Ö–Ω—ñ—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö
                sentiment_score = np.random.uniform(-1, 1)  # –Ü–º—ñ—Ç–∞—Ü—ñ—è AI
                
                # –ê–Ω–∞–ª—ñ–∑ —Ç–µ—Ö–Ω—ñ—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö
                signal_text = generate_signal_text(symbol, interval="1h")
                
                # –ö–æ–º–±—ñ–Ω—É—î–º–æ —Ç–µ—Ö–Ω—ñ—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –∑ AI sentiment
                if "STRONG LONG" in signal_text and sentiment_score > 0.3:
                    ai_signal = "üöÄ STRONG AI BULL"
                    confidence = min(90, int(70 + sentiment_score * 20))
                elif "STRONG SHORT" in signal_text and sentiment_score < -0.3:
                    ai_signal = "üîª STRONG AI BEAR"
                    confidence = min(90, int(70 + abs(sentiment_score) * 20))
                elif sentiment_score > 0.5:
                    ai_signal = "üìà AI BULLISH"
                    confidence = int(60 + sentiment_score * 20)
                elif sentiment_score < -0.5:
                    ai_signal = "üìâ AI BEARISH"
                    confidence = int(60 + abs(sentiment_score) * 20)
                else:
                    continue
                
                ai_results.append({
                    'symbol': symbol,
                    'price_change': price_change,
                    'sentiment_score': sentiment_score,
                    'ai_signal': ai_signal,
                    'confidence': confidence,
                    'signal_text': signal_text
                })
                
            except Exception:
                continue
        
        try:
            bot.delete_message(message.chat.id, processing_msg.message_id)
        except:
            pass
        
        if not ai_results:
            bot.reply_to(message, "üîç AI –Ω–µ –∑–Ω–∞–π—à–æ–≤ —Å–∏–ª—å–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤")
            return
        
        # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ confidence
        ai_results.sort(key=lambda x: x['confidence'], reverse=True)
        
        response = ["üß† <b>AI Sentiment Analysis:</b>\n"]
        response.append("<i>–ö–æ–º–±—ñ–Ω—É—î —Ç–µ—Ö–Ω—ñ—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –∑ AI —ç–º–æ—Ü—ñ—è–º–∏ —Ä–∏–Ω–∫—É</i>\n")
        
        for result in ai_results[:8]:
            emoji = "üü¢" if result['sentiment_score'] > 0 else "üî¥"
            response.append(
                f"\n{emoji} <b>{result['symbol']}</b> - {result['price_change']:+.2f}%"
            )
            response.append(f"   {result['ai_signal']} ({result['confidence']}% –≤–ø–µ–≤–Ω–µ–Ω–æ—Å—Ç—ñ)")
            response.append(f"   Sentiment: {result['sentiment_score']:+.2f}")
        
        bot.reply_to(message, "\n".join(response), parse_mode="HTML")
        
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü–æ–º–∏–ª–∫–∞ AI –∞–Ω–∞–ª—ñ–∑—É: {str(e)}")

# ---------- /ai_correlation ----------
@bot.message_handler(commands=['ai_correlation'])
def ai_correlation_handler(message):
    """
    AI –ø–æ—à—É–∫ –ø—Ä–∏—Ö–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–µ–ª—è—Ü—ñ–π —Ç–∞ –∞–Ω–æ–º–∞–ª—ñ–π
    """
    try:
        processing_msg = bot.send_message(message.chat.id, "üîç AI —à—É–∫–∞—î –ø—Ä–∏—Ö–æ–≤–∞–Ω—ñ –∫–æ—Ä–µ–ª—è—Ü—ñ—ó...")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
        url = "https://api.binance.com/api/v3/ticker/24hr"
        response = requests.get(url, timeout=15)
        data = response.json()
        
        # –ë–µ—Ä–µ–º–æ —Ç–æ–ø-20 –ª—ñ–∫–≤—ñ–¥–Ω–∏—Ö —Ç–æ–∫–µ–Ω—ñ–≤
        usdt_pairs = [d for d in data if d['symbol'].endswith('USDT') and float(d['quoteVolume']) > 100000000]
        top_pairs = sorted(usdt_pairs, key=lambda x: float(x['quoteVolume']), reverse=True)[:20]
        
        # IMITATE AI CORRELATION ANALYSIS
        correlations = []
        
        for i, pair1 in enumerate(top_pairs[:10]):
            for pair2 in top_pairs[i+1:]:
                symbol1, symbol2 = pair1['symbol'], pair2['symbol']
                change1, change2 = float(pair1['priceChangePercent']), float(pair2['priceChangePercent'])
                
                # –Ü–º—ñ—Ç–∞—Ü—ñ—è AI –≤–∏—è–≤–ª–µ–Ω–Ω—è –∫–æ—Ä–µ–ª—è—Ü—ñ–π
                correlation = np.random.uniform(-0.9, 0.9)
                
                if abs(correlation) > 0.7:  # –°–∏–ª—å–Ω–∞ –∫–æ—Ä–µ–ª—è—Ü—ñ—è
                    correlation_type = "POSITIVE" if correlation > 0 else "NEGATIVE"
                    strength = "STRONG" if abs(correlation) > 0.8 else "MODERATE"
                    
                    correlations.append({
                        'pair1': symbol1,
                        'pair2': symbol2,
                        'correlation': correlation,
                        'type': correlation_type,
                        'strength': strength,
                        'change1': change1,
                        'change2': change2
                    })
        
        try:
            bot.delete_message(message.chat.id, processing_msg.message_id)
        except:
            pass
        
        if not correlations:
            bot.reply_to(message, "üîç AI –Ω–µ –∑–Ω–∞–π—à–æ–≤ —Å–∏–ª—å–Ω–∏—Ö –∫–æ—Ä–µ–ª—è—Ü—ñ–π")
            return
        
        # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ —Å–∏–ª–æ—é –∫–æ—Ä–µ–ª—è—Ü—ñ—ó
        correlations.sort(key=lambda x: abs(x['correlation']), reverse=True)
        
        response = ["üîó <b>AI Correlation Discovery:</b>\n"]
        response.append("<i>–ü—Ä–∏—Ö–æ–≤–∞–Ω—ñ –∑–≤'—è–∑–∫–∏ –º—ñ–∂ –∞–∫—Ç–∏–≤–∞–º–∏</i>\n")
        
        for corr in correlations[:10]:
            emoji = "üìà" if corr['type'] == "POSITIVE" else "üìâ"
            response.append(
                f"\n{emoji} <b>{corr['pair1']}</b> ‚Üî <b>{corr['pair2']}</b>"
            )
            response.append(f"   {corr['strength']} {corr['type']} correlation: {corr['correlation']:.2f}")
            response.append(f"   Changes: {corr['change1']:+.2f}% / {corr['change2']:+.2f}%")
        
        bot.reply_to(message, "\n".join(response), parse_mode="HTML")
        
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü–æ–º–∏–ª–∫–∞ AI –∫–æ—Ä–µ–ª—è—Ü—ñ—ó: {str(e)}")

# ---------- /ai_predict ----------
@bot.message_handler(commands=['ai_predict'])
def ai_predict_handler(message):
    """
    AI –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è —Ü—ñ–Ω–∏ –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω—ñ 24-48 –≥–æ–¥–∏–Ω
    """
    try:
        parts = message.text.split()
        symbol = "BTCUSDT"
        
        if len(parts) >= 2:
            symbol = parts[1].upper()
            if not symbol.endswith('USDT'):
                symbol += 'USDT'
        
        processing_msg = bot.send_message(message.chat.id, f"üîÆ AI –ø—Ä–æ–≥–Ω–æ–∑—É—î {symbol}...")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —ñ—Å—Ç–æ—Ä–∏—á–Ω—ñ –¥–∞–Ω—ñ
        candles = get_klines(symbol, interval="1h", limit=100)
        if not candles:
            bot.reply_to(message, f"‚ùå –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è {symbol}")
            return
        
        closes = np.array(candles['c'], dtype=float)
        current_price = closes[-1]
        
        # IMITATE AI PREDICTION (LSTM/Transformer –º–æ–¥–µ–ª—å)
        # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—ñ —Ç—É—Ç –±—É–¥–µ –Ω–µ–π—Ä–æ–º–µ—Ä–µ–∂–∞
        recent_trend = np.mean(closes[-5:]) / np.mean(closes[-10:-5]) - 1
        volatility = np.std(closes[-20:]) / np.mean(closes[-20:])
        
        # –ì–µ–Ω–µ—Ä—É—î–º–æ "AI" –ø—Ä–æ–≥–Ω–æ–∑
        if recent_trend > 0.02 and volatility < 0.05:
            prediction_change = np.random.uniform(2.0, 8.0)
            direction = "UP"
            confidence = int(75 + np.random.uniform(0, 15))
        elif recent_trend < -0.02 and volatility < 0.06:
            prediction_change = -np.random.uniform(2.0, 7.0)
            direction = "DOWN"
            confidence = int(70 + np.random.uniform(0, 20))
        else:
            prediction_change = np.random.uniform(-3.0, 3.0)
            direction = "SIDEWAYS"
            confidence = int(50 + np.random.uniform(0, 20))
        
        target_price = current_price * (1 + prediction_change / 100)
        
        # –ê–Ω–∞–ª—ñ–∑ —Ä–∏–∑–∏–∫—ñ–≤
        risk_level = "LOW" if abs(prediction_change) < 3 else "MEDIUM" if abs(prediction_change) < 6 else "HIGH"
        
        response = [
            f"üîÆ <b>AI Prediction for {symbol}:</b>",
            f"Current: ${current_price:.2f}",
            f"",
            f"üéØ <b>24h Prediction:</b>",
            f"Direction: {direction}",
            f"Target: ${target_price:.2f} ({prediction_change:+.2f}%)",
            f"Confidence: {confidence}%",
            f"Risk Level: {risk_level}",
            f"",
            f"üìä <b>Analysis:</b>",
            f"Recent Trend: {recent_trend*100:+.2f}%",
            f"Volatility: {volatility*100:.2f}%",
            f"",
            f"‚ö†Ô∏è <i>AI prediction based on technical patterns</i>"
        ]
        
        try:
            bot.delete_message(message.chat.id, processing_msg.message_id)
        except:
            pass
        
        # –î–æ–¥–∞—î–º–æ –≥—Ä–∞—Ñ—ñ–∫
        try:
            img = plot_candles(symbol, interval="4h", limit=50)
            bot.send_photo(message.chat.id, img, caption="\n".join(response), parse_mode="HTML")
        except:
            bot.reply_to(message, "\n".join(response), parse_mode="HTML")
        
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü–æ–º–∏–ª–∫–∞ AI –ø—Ä–æ–≥–Ω–æ–∑—É: {str(e)}")

# ---------- /ai_arbitrage ----------
@bot.message_handler(commands=['ai_arbitrage'])
def ai_arbitrage_handler(message):
    """
    AI –ø–æ—à—É–∫ –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω–∏—Ö –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π –º—ñ–∂ –±—ñ—Ä–∂–∞–º–∏
    """
    try:
        processing_msg = bot.send_message(message.chat.id, "üí∏ AI —à—É–∫–∞—î –∞—Ä–±—ñ—Ç—Ä–∞–∂...")
        
        # IMITATE ARBITRAGE ANALYSIS (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫—ñ–ª—å–∫–æ—Ö –±—ñ—Ä–∂)
        opportunities = []
        
        # –°–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω–∏—Ö —Ç–æ–∫–µ–Ω—ñ–≤ –¥–ª—è –∞—Ä–±—ñ—Ç—Ä–∞–∂—É
        arb_symbols = ['BTCUSDT', 'ETHUSDT', 'BNBUSDT', 'SOLUSDT', 'XRPUSDT', 
                      'ADAUSDT', 'DOTUSDT', 'DOGEUSDT', 'AVAXUSDT', 'LINKUSDT']
        
        for symbol in arb_symbols:
            # –Ü–º—ñ—Ç–∞—Ü—ñ—è —Ä—ñ–∑–Ω–∏—Ü—ñ —Ü—ñ–Ω –º—ñ–∂ –±—ñ—Ä–∂–∞–º–∏
            price_diff = np.random.uniform(0.1, 2.5)
            
            if price_diff > 0.8:  # –ó–Ω–∞—á–Ω–∞ —Ä—ñ–∑–Ω–∏—Ü—è –¥–ª—è –∞—Ä–±—ñ—Ç—Ä–∞–∂—É
                opportunities.append({
                    'symbol': symbol,
                    'price_diff': price_diff,
                    'potential_profit': price_diff * 0.8,  # –ü—ñ—Å–ª—è –∫–æ–º—ñ—Å—ñ–π
                    'risk': 'LOW' if price_diff < 1.5 else 'MEDIUM'
                })
        
        try:
            bot.delete_message(message.chat.id, processing_msg.message_id)
        except:
            pass
        
        if not opportunities:
            bot.reply_to(message, "üîç AI –Ω–µ –∑–Ω–∞–π—à–æ–≤ –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω–∏—Ö –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π")
            return
        
        # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–∏–º –ø—Ä–∏–±—É—Ç–∫–æ–º
        opportunities.sort(key=lambda x: x['potential_profit'], reverse=True)
        
        response = ["üí∏ <b>AI Arbitrage Opportunities:</b>\n"]
        response.append("<i>–†—ñ–∑–Ω–∏—Ü—ñ —Ü—ñ–Ω –º—ñ–∂ –±—ñ—Ä–∂–∞–º–∏</i>\n")
        
        for opp in opportunities[:8]:
            response.append(f"\nüìä <b>{opp['symbol']}</b>")
            response.append(f"   Price Difference: {opp['price_diff']:.2f}%")
            response.append(f"   Potential Profit: {opp['potential_profit']:.2f}%")
            response.append(f"   Risk: {opp['risk']}")
        
        response.append("\n‚ö†Ô∏è <i>Actual execution requires multi-exchange API</i>")
        
        bot.reply_to(message, "\n".join(response), parse_mode="HTML")
        
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü–æ–º–∏–ª–∫–∞ AI –∞—Ä–±—ñ—Ç—Ä–∞–∂—É: {str(e)}")
        
        # ---------- /ai_strategy ----------
@bot.message_handler(commands=['ai_strategy'])
def ai_strategy_handler(message):
    """
    AI-–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–∏—Ö —Ç–æ—Ä–≥–æ–≤–∏—Ö —Å—Ç—Ä–∞—Ç–µ–≥—ñ–π
    """
    try:
        parts = message.text.split()
        symbol = "BTCUSDT"
        
        if len(parts) >= 2:
            symbol = parts[1].upper()
            if not symbol.endswith('USDT'):
                symbol += 'USDT'
        
        processing_msg = bot.send_message(message.chat.id, f"üß† AI —Å—Ç–≤–æ—Ä—é—î —Å—Ç—Ä–∞—Ç–µ–≥—ñ—é –¥–ª—è {symbol}...")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
        candles_1h = get_klines(symbol, interval="1h", limit=100)
        candles_4h = get_klines(symbol, interval="4h", limit=100)
        candles_1d = get_klines(symbol, interval="1d", limit=100)
        
        if not all([candles_1h, candles_4h, candles_1d]):
            bot.reply_to(message, f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è {symbol}")
            return
        
        # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ —Ä–∏–Ω–æ–∫
        closes_1h = np.array(candles_1h['c'], dtype=float)
        closes_4h = np.array(candles_4h['c'], dtype=float)
        closes_1d = np.array(candles_1d['c'], dtype=float)
        
        current_price = closes_1h[-1]
        
        # AI –∞–Ω–∞–ª—ñ–∑ —Ä–∏–Ω–∫–æ–≤–∏—Ö —É–º–æ–≤
        trend_1h = (closes_1h[-1] / closes_1h[-24] - 1) * 100  # –ó–º—ñ–Ω–∞ –∑–∞ 24 –≥–æ–¥–∏–Ω–∏
        trend_4h = (closes_4h[-1] / closes_4h[-6] - 1) * 100   # –ó–º—ñ–Ω–∞ –∑–∞ 24 –≥–æ–¥–∏–Ω–∏ (6*4h)
        volatility = np.std(closes_1h[-24:]) / np.mean(closes_1h[-24:]) * 100
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø —Ä–∏–Ω–∫—É
        if abs(trend_1h) > 5:
            market_condition = "TRENDING"
            strength = "STRONG" if abs(trend_1h) > 8 else "MODERATE"
            direction = "BULL" if trend_1h > 0 else "BEAR"
        elif volatility < 2:
            market_condition = "SIDEWAYS"
            strength = "LOW_VOLATILITY"
            direction = "NEUTRAL"
        else:
            market_condition = "VOLATILE"
            strength = "HIGH_VOLATILITY" 
            direction = "UNCERTAIN"
        
        # –ì–µ–Ω–µ—Ä—É—î–º–æ AI —Å—Ç—Ä–∞—Ç–µ–≥—ñ—é
        strategies = {
            "TRENDING_BULL_STRONG": {
                "strategy": "BREAKOUT FOLLOWING",
                "entry": "Pullback to EMA20 or support",
                "stop_loss": "2% below entry", 
                "take_profit": "RRR 1:3",
                "confidence": "85%"
            },
            "TRENDING_BEAR_STRONG": {
                "strategy": "SHORT ON BOUNCE",
                "entry": "Retracement to resistance",
                "stop_loss": "2% above entry",
                "take_profit": "RRR 1:2.5", 
                "confidence": "80%"
            },
            "SIDEWAYS_LOW_VOLATILITY": {
                "strategy": "MEAN REVERSION",
                "entry": "Extremes of range",
                "stop_loss": "Outside range",
                "take_profit": "Middle of range",
                "confidence": "75%"
            },
            "VOLATILE_HIGH_VOLATILITY": {
                "strategy": "VOLATILITY BREAKOUT",
                "entry": "Break of consolidation",
                "stop_loss": "False breakout level",
                "take_profit": "ATR-based targets",
                "confidence": "70%"
            }
        }
        
        strategy_key = f"{market_condition}_{direction}_{strength}"
        selected_strategy = strategies.get(strategy_key, strategies["VOLATILE_HIGH_VOLATILITY"])
        
        # –î–æ–¥–∞—Ç–∫–æ–≤—ñ AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
        if trend_1h > 3 and trend_4h > 2:
            additional_tips = [
                "üéØ Consider scaling in positions",
                "üìà Look for continuation patterns",
                "‚ö° High momentum - avoid counter-trend trades"
            ]
        elif trend_1h < -3 and trend_4h < -2:
            additional_tips = [
                "üéØ Short on bounces only",
                "üìâ Watch for capitulation signals", 
                "‚ö° Avoid catching falling knives"
            ]
        else:
            additional_tips = [
                "üéØ Wait for clear signals",
                "üìä Range-bound trading recommended",
                "‚ö° Reduce position size in choppy markets"
            ]
        
        # –§–æ—Ä–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        response = [
            f"üéØ <b>AI Generated Strategy for {symbol}</b>",
            f"Current Price: ${current_price:.2f}",
            f"",
            f"üìä <b>Market Analysis:</b>",
            f"Condition: {market_condition}",
            f"Direction: {direction}",
            f"Strength: {strength}",
            f"1h Trend: {trend_1h:+.2f}%",
            f"Volatility: {volatility:.2f}%",
            f"",
            f"üöÄ <b>Recommended Strategy:</b>",
            f"Type: {selected_strategy['strategy']}",
            f"Entry: {selected_strategy['entry']}",
            f"Stop Loss: {selected_strategy['stop_loss']}",
            f"Take Profit: {selected_strategy['take_profit']}",
            f"Confidence: {selected_strategy['confidence']}",
            f"",
            f"üí° <b>AI Tips:</b>"
        ]
        
        response.extend(additional_tips)
        
        response.extend([
            f"",
            f"‚è∞ <b>Timeframes:</b>",
            f"‚Ä¢ Primary: 1h for entries",
            f"‚Ä¢ Confirmation: 4h for trend", 
            f"‚Ä¢ Context: 1d for overall direction",
            f"",
            f"‚ö†Ô∏è <i>AI-generated based on current market conditions</i>"
        ])
        
        try:
            bot.delete_message(message.chat.id, processing_msg.message_id)
        except:
            pass
        
        # –î–æ–¥–∞—î–º–æ –≥—Ä–∞—Ñ—ñ–∫
        try:
            img = plot_candles(symbol, interval="4h", limit=50)
            bot.send_photo(message.chat.id, img, caption="\n".join(response), parse_mode="HTML")
        except:
            bot.reply_to(message, "\n".join(response), parse_mode="HTML")
        
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó: {str(e)}")

# ---------- /ai_backtest ----------
@bot.message_handler(commands=['ai_backtest'])
def ai_backtest_handler(message):
    """
    AI-—Å–∏–º—É–ª—è—Ü—ñ—è —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó –Ω–∞ —ñ—Å—Ç–æ—Ä–∏—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö
    """
    try:
        parts = message.text.split()
        symbol = "BTCUSDT"
        
        if len(parts) >= 2:
            symbol = parts[1].upper()
            if not symbol.endswith('USDT'):
                symbol += 'USDT'
        
        processing_msg = bot.send_message(message.chat.id, f"üìä AI —Ç–µ—Å—Ç—É—î —Å—Ç—Ä–∞—Ç–µ–≥—ñ—é –¥–ª—è {symbol}...")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —ñ—Å—Ç–æ—Ä–∏—á–Ω—ñ –¥–∞–Ω—ñ
        candles = get_klines(symbol, interval="1h", limit=200)
        if not candles:
            bot.reply_to(message, f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è {symbol}")
            return
        
        closes = np.array(candles['c'], dtype=float)
        
        # IMITATE AI BACKTESTING
        initial_balance = 10000  # $10,000
        balance = initial_balance
        trades = 0
        winning_trades = 0
        
        # –°–∏–º—É–ª—é—î–º–æ —Ç–æ—Ä–≥—ñ–≤–ª—é
        for i in range(50, len(closes)-1):
            # –ü—Ä–æ—Å—Ç–∞ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—è (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—ñ –±—É–¥–µ —Å–∫–ª–∞–¥–Ω–∞ AI –ª–æ–≥—ñ–∫–∞)
            price_change = (closes[i] / closes[i-24] - 1) * 100  # –ó–º—ñ–Ω–∞ –∑–∞ 24 –≥–æ–¥–∏–Ω–∏
            
            if price_change > 3:  # –°–∏–ª—å–Ω–∏–π –∞–ø—Ç—Ä–µ–Ω–¥
                # BUY —Å–∏–≥–Ω–∞–ª
                entry_price = closes[i]
                exit_price = closes[i+1]
                profit = (exit_price - entry_price) / entry_price * 100
                
                if profit > 0:
                    winning_trades += 1
                balance *= (1 + profit / 100)
                trades += 1
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç–∏
        total_return = (balance - initial_balance) / initial_balance * 100
        win_rate = (winning_trades / trades * 100) if trades > 0 else 0
        
        response = [
            f"üìä <b>AI Backtest Results for {symbol}</b>",
            f"Period: 200 hours (‚âà8 days)",
            f"Initial Balance: ${initial_balance:,.0f}",
            f"",
            f"üìà <b>Performance:</b>",
            f"Final Balance: ${balance:,.2f}",
            f"Total Return: {total_return:+.2f}%",
            f"Trades Made: {trades}",
            f"Win Rate: {win_rate:.1f}%",
            f"",
            f"üéØ <b>Strategy Summary:</b>",
            f"‚Ä¢ Trend-following approach",
            f"‚Ä¢ 1h timeframe entries",
            f"‚Ä¢ 24h trend confirmation",
            f"‚Ä¢ Risk-managed position sizing",
            f"",
            f"üí° <b>AI Recommendations:</b>",
            f"‚úÖ Suitable for current market" if total_return > 2 else "‚ö†Ô∏è Needs optimization",
            f"üìä Monitor win rate consistency",
            f"‚ö° Adjust based on volatility",
            f"",
            f"‚ö†Ô∏è <i>Simulated results - past performance ‚â† future results</i>"
        ]
        
        try:
            bot.delete_message(message.chat.id, processing_msg.message_id)
        except:
            pass
        
        bot.reply_to(message, "\n".join(response), parse_mode="HTML")
        
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü–æ–º–∏–ª–∫–∞ backtest: {str(e)}")
        
        # ---------- /ai_scanner ----------
@bot.message_handler(commands=['ai_scanner'])
def ai_scanner_handler(message):
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π —Å–∫–∞–Ω–µ—Ä —Ç–æ–ø —Ç–æ–∫–µ–Ω—ñ–≤ –∑–∞ –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è–º + AI –∞–Ω–∞–ª—ñ–∑
    """
    try:
        processing_msg = bot.send_message(message.chat.id, "üîç AI —Å–∫–∞–Ω—É—î —Ç–æ–ø —Ç–æ–∫–µ–Ω–∏...")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ
        url = "https://api.binance.com/api/v3/ticker/24hr"
        response = requests.get(url, timeout=15)
        data = response.json()
        
        # –§—ñ–ª—å—Ç—Ä—É—î–º–æ: USDT –ø–∞—Ä–∏ + –æ–±—Å—è–≥ > 10M$ + —Ü—ñ–Ω–∞ > 0.01$
        usdt_pairs = [
            d for d in data 
            if (d['symbol'].endswith('USDT') and 
                float(d['quoteVolume']) > 10000000 and
                float(d['lastPrice']) > 0.01)
        ]
        
        # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è–º (—Ç—ñ–ª—å–∫–∏ –ø–æ–∑–∏—Ç–∏–≤–Ω—ñ)
        growing_pairs = [
            pair for pair in usdt_pairs 
            if float(pair['priceChangePercent']) > 3.0  # –ú—ñ–Ω—ñ–º—É–º +3%
        ]
        growing_pairs.sort(key=lambda x: float(x['priceChangePercent']), reverse=True)
        
        top_growers = growing_pairs[:15]  # –¢–æ–ø-15 –∑–∞ –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è–º
        
        best_opportunities = []
        
        for pair in top_growers:
            symbol = pair['symbol']
            price_change = float(pair['priceChangePercent'])
            volume = float(pair['quoteVolume']) / 1000000  # –í –º—ñ–ª—å–π–æ–Ω–∞—Ö
            
            try:
                # AI –∞–Ω–∞–ª—ñ–∑ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
                signal_text = generate_signal_text(symbol, interval="1h")
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Å–∏–≥–Ω–∞–ª –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è
                is_bullish = any(keyword in signal_text for keyword in 
                               ['LONG', 'BUY', 'UP', 'BULL', 'STRONG LONG'])
                
                if is_bullish and price_change > 5.0:  # –ú—ñ–Ω—ñ–º—É–º +5%
                    # –î–æ–¥–∞—Ç–∫–æ–≤–∏–π –∞–Ω–∞–ª—ñ–∑ –Ω–∞ 4h –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
                    signal_4h = generate_signal_text(symbol, interval="4h")
                    is_bullish_4h = any(keyword in signal_4h for keyword in 
                                      ['LONG', 'BUY', 'UP', 'BULL'])
                    
                    if is_bullish_4h:
                        best_opportunities.append({
                            'symbol': symbol,
                            'price_change': price_change,
                            'volume': volume,
                            'signal_1h': signal_text,
                            'signal_4h': signal_4h
                        })
                        
            except Exception as e:
                continue
        
        try:
            bot.delete_message(message.chat.id, processing_msg.message_id)
        except:
            pass
        
        if not best_opportunities:
            bot.reply_to(message, "üîç –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —ñ–¥–µ–∞–ª—å–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤")
            return
        
        # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è–º
        best_opportunities.sort(key=lambda x: x['price_change'], reverse=True)
        
        response = ["üöÄ <b>AI Scanner - –¢–æ–ø —Å–∏–≥–Ω–∞–ª–∏ –∑–∞ –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è–º:</b>\n"]
        response.append("<i>–¢–æ–∫–µ–Ω–∏ –∑ —Ä—ñ—Å—Ç–æ–º >5% + –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è AI</i>\n")
        
        for opportunity in best_opportunities[:10]:
            # –°–ø—Ä–æ—â–µ–Ω–∏–π —Å–∏–≥–Ω–∞–ª
            lines_1h = opportunity['signal_1h'].split('\n')
            short_signal = lines_1h[0] if len(lines_1h) > 0 else "No signal"
            
            response.append(
                f"\nüü¢ <b>{opportunity['symbol']}</b> - {opportunity['price_change']:+.2f}%"
            )
            response.append(f"   üìä –û–±—Å—è–≥: {opportunity['volume']:.1f}M")
            response.append(f"   üì∂ –°–∏–≥–Ω–∞–ª: {short_signal}")
            
            # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É
            # (–¥–æ–¥–∞–º–æ markup –ø—ñ–∑–Ω—ñ—à–µ)
        
        # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –¥–æ—Å—Ç—É–ø—É
        markup = types.InlineKeyboardMarkup()
        for opportunity in best_opportunities[:3]:
            markup.add(types.InlineKeyboardButton(
                f"üìä {opportunity['symbol']}", 
                callback_data=f"analyze_{opportunity['symbol']}"
            ))
        
        markup.add(types.InlineKeyboardButton(
            "üîÑ –û–Ω–æ–≤–∏—Ç–∏ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è", 
            callback_data="rescan_ai"
        ))
        
        bot.send_message(message.chat.id, "\n".join(response), 
                        parse_mode="HTML", reply_markup=markup)
        
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–∫–∞–Ω–µ—Ä–∞: {str(e)}")

# ---------- Callback –¥–ª—è –ø–æ–≤–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É ----------
@bot.callback_query_handler(func=lambda call: call.data.startswith('full_analyze_'))
def full_analyze_callback(call):
    """–ü–æ–≤–Ω–∏–π AI –∞–Ω–∞–ª—ñ–∑ —Ç–æ–∫–µ–Ω–∞"""
    try:
        # –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –Ω–∞ callback –æ–¥—Ä–∞–∑—É
        bot.answer_callback_query(call.id, "üß† –†–æ–±–ª—é –ø–æ–≤–Ω–∏–π –∞–Ω–∞–ª—ñ–∑...")
        
        symbol = call.data.replace('full_analyze_', '')
        
        # –ó–º—ñ–Ω—é—î–º–æ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"üß† –†–æ–±–ª—é –ø–æ–≤–Ω–∏–π AI –∞–Ω–∞–ª—ñ–∑ {symbol}...",
            parse_mode="HTML"
        )
        
        # –†–æ–±–∏–º–æ –ø–æ–≤–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –Ω–∞ –≤—Å—ñ—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞—Ö
        response = [f"üéØ <b>–ü–æ–≤–Ω–∏–π AI –ê–Ω–∞–ª—ñ–∑ {symbol}:</b>\n"]
        
        # –ê–Ω–∞–ª—ñ–∑ –Ω–∞ —Ä—ñ–∑–Ω–∏—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞—Ö
        timeframes = [
            ('15m', 'üöÄ –ö–æ—Ä–æ—Ç–∫–∏–π —Ç–µ—Ä–º—ñ–Ω'),
            ('1h', 'üìà –°–µ—Ä–µ–¥–Ω—ñ–π —Ç–µ—Ä–º—ñ–Ω'), 
            ('4h', 'üìä –î–æ–≤–≥–∏–π —Ç–µ—Ä–º—ñ–Ω'),
            ('1d', 'üéØ –¢—Ä–µ–Ω–¥')
        ]
        
        for interval, description in timeframes:
            try:
                signal_text = generate_signal_text(symbol, interval=interval)
                lines = signal_text.split('\n')
                
                response.append(f"\n{description} [{interval}]:")
                response.append(f"   {lines[0]}")
                if len(lines) > 1:
                    response.append(f"   {lines[1]}")
                    
            except Exception as e:
                response.append(f"\n{interval}: –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É - {str(e)}")
        
        # –î–æ–¥–∞—î–º–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
        response.append("\nüí° <b>AI –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:</b>")
        
        # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ —Å–∏–≥–Ω–∞–ª–∏ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π
        try:
            signals_1h = generate_signal_text(symbol, interval="1h")
            signals_4h = generate_signal_text(symbol, interval="4h")
            
            if "LONG" in signals_1h and "LONG" in signals_4h:
                response.append("‚úÖ <b>STRONG BUY</b> - –∫–æ–Ω—Å–µ–Ω—Å—É—Å –Ω–∞ –≤—Å—ñ—Ö TF")
                response.append("üéØ –í—Ö—ñ–¥ –Ω–∞ –≤—ñ–¥–∫–∞—Ç–∞—Ö –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏")
            elif "SHORT" in signals_1h and "SHORT" in signals_4h:
                response.append("üî¥ <b>STRONG SELL</b> - –∫–æ–Ω—Å–µ–Ω—Å—É—Å –Ω–∞ –≤—Å—ñ—Ö TF")  
                response.append("üéØ –í—Ö—ñ–¥ –Ω–∞ –≤—ñ–¥—Å–∫–æ–∫–∞—Ö –¥–æ –æ–ø–æ—Ä—É")
            else:
                response.append("‚ö†Ô∏è <b>MIXED SIGNALS</b> - —á–µ–∫–∞—Ç–∏ —á—ñ—Ç–∫–∏—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤")
                response.append("üìä –ê–Ω–∞–ª—ñ–∑—É–π—Ç–µ –∫–æ–∂–µ–Ω TF –æ–∫—Ä–µ–º–æ")
                
        except:
            response.append("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó")
        
        # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥—ñ–π
        markup = types.InlineKeyboardMarkup()
        markup.row(
            types.InlineKeyboardButton("üìä –ì—Ä–∞—Ñ—ñ–∫ 1h", callback_data=f"chart_1h_{symbol}"),
            types.InlineKeyboardButton("üìä –ì—Ä–∞—Ñ—ñ–∫ 4h", callback_data=f"chart_4h_{symbol}")
        )
        markup.row(
            types.InlineKeyboardButton("üîÑ –û–Ω–æ–≤–∏—Ç–∏ –∞–Ω–∞–ª—ñ–∑", callback_data=f"full_analyze_{symbol}"),
            types.InlineKeyboardButton("üìã –ó–≤—ñ—Ç PDF", callback_data=f"pdf_{symbol}")
        )
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        bot.send_message(call.message.chat.id, "\n".join(response), 
                        parse_mode="HTML", reply_markup=markup)
        
    except Exception as e:
        error_msg = f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ–≤–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É: {str(e)}"
        bot.send_message(call.message.chat.id, error_msg)

# ---------- Callback –¥–ª—è –≥—Ä–∞—Ñ—ñ–∫—ñ–≤ ----------
@bot.callback_query_handler(func=lambda call: call.data.startswith('chart_'))
def chart_callback(call):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫"""
    try:
        bot.answer_callback_query(call.id, "üìä –ì–µ–Ω–µ—Ä—É—é –≥—Ä–∞—Ñ—ñ–∫...")
        
        data = call.data.split('_')
        interval = data[1]
        symbol = data[2]
        
        # –ì–µ–Ω–µ—Ä—É—î–º–æ –≥—Ä–∞—Ñ—ñ–∫
        img = plot_candles(symbol, interval=interval, limit=100)
        bot.send_photo(call.message.chat.id, img, 
                      caption=f"üìä <b>{symbol} [{interval}]</b>", 
                      parse_mode="HTML")
        
    except Exception as e:
        bot.send_message(call.message.chat.id, f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≥—Ä–∞—Ñ—ñ–∫–∞: {str(e)}")

# ---------- Callback –¥–ª—è PDF ----------
@bot.callback_query_handler(func=lambda call: call.data.startswith('pdf_'))
def pdf_callback(call):
    """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è PDF –∑–≤—ñ—Ç—É"""
    try:
        bot.answer_callback_query(call.id, "üìã –ì–µ–Ω–µ—Ä—É—é PDF –∑–≤—ñ—Ç...")
        
        symbol = call.data.replace('pdf_', '')
        # –¢—É—Ç –±—É–¥–µ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è PDF (–∑–∞–≥–ª—É—à–∫–∞)
        
        bot.send_message(call.message.chat.id, 
                       f"üìã <b>PDF –∑–≤—ñ—Ç –¥–ª—è {symbol}</b>\n\n–§—É–Ω–∫—Ü—ñ—è –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ...",
                       parse_mode="HTML")
        
    except Exception as e:
        bot.send_message(call.message.chat.id, f"‚ùå –ü–æ–º–∏–ª–∫–∞ PDF: {str(e)}")

# ---------- /ai_daily ----------
@bot.message_handler(commands=['ai_daily'])
def ai_daily_handler(message):
    """
    –©–æ–¥–µ–Ω–Ω–∏–π AI –∑–≤—ñ—Ç –∑ –Ω–∞–π–∫—Ä–∞—â–∏–º–∏ –º–æ–∂–ª–∏–≤–æ—Å—Ç—è–º–∏
    """
    try:
        processing_msg = bot.send_message(message.chat.id, "üìä –ì–æ—Ç—É—é —â–æ–¥–µ–Ω–Ω–∏–π AI –∑–≤—ñ—Ç...")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ
        url = "https://api.binance.com/api/v3/ticker/24hr"
        response = requests.get(url, timeout=20)
        data = response.json()
        
        # –†—ñ–∑–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
        categories = {
            'top_gainers': [],    # –¢–æ–ø —Ä–æ—Å—Ç—É
            'high_volume': [],    # –í–∏—Å–æ–∫–∞ –ª—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—å
            'breakouts': [],      # –ü—Ä–æ–±–æ—ó
            'consolidation': []   # –ö–æ–Ω—Å–æ–ª—ñ–¥–∞—Ü—ñ—è
        }
        
        usdt_pairs = [d for d in data if d['symbol'].endswith('USDT') and float(d['quoteVolume']) > 5000000]
        
        # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –∫–æ–∂–Ω—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é
        for pair in usdt_pairs:
            symbol = pair['symbol']
            price_change = float(pair['priceChangePercent'])
            volume = float(pair['quoteVolume'])
            
            try:
                # –®–≤–∏–¥–∫–∏–π –∞–Ω–∞–ª—ñ–∑
                signal_1h = generate_signal_text(symbol, interval="1h")
                
                # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑—É—î–º–æ
                if price_change > 8.0:
                    categories['top_gainers'].append({
                        'symbol': symbol, 
                        'change': price_change,
                        'volume': volume,
                        'signal': signal_1h
                    })
                elif volume > 100000000:
                    categories['high_volume'].append({
                        'symbol': symbol,
                        'change': price_change, 
                        'volume': volume,
                        'signal': signal_1h
                    })
                elif "BREAKOUT" in signal_1h:
                    categories['breakouts'].append({
                        'symbol': symbol,
                        'change': price_change,
                        'volume': volume,
                        'signal': signal_1h
                    })
                elif "CONSOLIDATION" in signal_1h:
                    categories['consolidation'].append({
                        'symbol': symbol,
                        'change': price_change,
                        'volume': volume,
                        'signal': signal_1h
                    })
                    
            except Exception:
                continue
        
        # –°–æ—Ä—Ç—É—î–º–æ –∫–æ–∂–Ω—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é
        for key in categories:
            categories[key].sort(key=lambda x: x['change'] if 'change' in x else x['volume'], reverse=True)
        
        # –§–æ—Ä–º—É—î–º–æ –∑–≤—ñ—Ç
        response = ["üìä <b>–©–æ–¥–µ–Ω–Ω–∏–π AI –ó–≤—ñ—Ç:</b>\n"]
        
        # –¢–æ–ø —Ä–æ—Å—Ç—É
        if categories['top_gainers']:
            response.append("\nüöÄ <b>–¢–æ–ø –†–æ—Å—Ç—É (>8%):</b>")
            for item in categories['top_gainers'][:5]:
                response.append(f"üü¢ {item['symbol']} - {item['change']:+.2f}%")
        
        # –í–∏—Å–æ–∫–∞ –ª—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—å
        if categories['high_volume']:
            response.append("\nüíé <b>–í–∏—Å–æ–∫–∞ –õ—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—å:</b>")
            for item in categories['high_volume'][:5]:
                response.append(f"üìä {item['symbol']} - Vol: {item['volume']/1000000:.1f}M")
        
        # –ü—Ä–æ–±–æ—ó
        if categories['breakouts']:
            response.append("\nüéØ <b>–ü–æ—Ç–µ–Ω—Ü—ñ–π–Ω—ñ –ü—Ä–æ–±–æ—ó:</b>")
            for item in categories['breakouts'][:5]:
                response.append(f"‚ö° {item['symbol']} - {item['change']:+.2f}%")
        
        # –ö–æ–Ω—Å–æ–ª—ñ–¥–∞—Ü—ñ—è
        if categories['consolidation']:
            response.append("\n‚è≥ <b>–ö–æ–Ω—Å–æ–ª—ñ–¥–∞—Ü—ñ—è (–º–∞–π–±—É—Ç–Ω—ñ –ø—Ä–æ–±–æ—ó):</b>")
            for item in categories['consolidation'][:5]:
                response.append(f"üìà {item['symbol']} - {item['change']:+.2f}%")
        
        response.append("\n‚ö†Ô∏è <i>–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /ai_scanner –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É</i>")
        
        try:
            bot.delete_message(message.chat.id, processing_msg.message_id)
        except:
            pass
        
        bot.reply_to(message, "\n".join(response), parse_mode="HTML")
        
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–≤—ñ—Ç—É: {str(e)}")

# ---------- Callback –¥–ª—è AI —Å–∫–∞–Ω–µ—Ä–∞ ----------
@bot.callback_query_handler(func=lambda call: call.data.startswith('analyze_'))
def ai_analyze_callback(call):
    """–û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫ –∞–Ω–∞–ª—ñ–∑—É"""
    try:
        symbol = call.data.replace('analyze_', '')
        bot.send_message(call.message.chat.id, f"üîç –î–µ—Ç–∞–ª—å–Ω–æ –∞–Ω–∞–ª—ñ–∑—É—é {symbol}...")
        
        # –®–≤–∏–¥–∫–∏–π –∞–Ω–∞–ª—ñ–∑ –Ω–∞ —Ä—ñ–∑–Ω–∏—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞—Ö
        response = [f"üìä <b>–î–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ {symbol}:</b>\n"]
        
        for interval in ['15m', '1h', '4h']:
            try:
                signal = generate_signal_text(symbol, interval=interval)
                lines = signal.split('\n')
                response.append(f"\n{interval}: {lines[0]}")
            except:
                response.append(f"\n{interval}: –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É")
        
        # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–≤–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton(
            "üß† –ü–æ–≤–Ω–∏–π AI –ê–Ω–∞–ª—ñ–∑", 
            callback_data=f"full_analyze_{symbol}"
        ))
        
        bot.send_message(call.message.chat.id, "\n".join(response), 
                        parse_mode="HTML", reply_markup=markup)
        
    except Exception as e:
        bot.send_message(call.message.chat.id, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")

@bot.callback_query_handler(func=lambda call: call.data == 'rescan_ai')
def rescan_ai_callback(call):
    """–ü–µ—Ä–µ—Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è"""
    try:
        bot.delete_message(call.message.chat.id, call.message.message_id)
        ai_scanner_handler(call.message)
    except:
        bot.send_message(call.message.chat.id, "üîÑ –ó–∞–ø—É—Å–∫–∞—é –Ω–æ–≤–µ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è...")
        ai_scanner_handler(call.message)
        
        # ---------- /ai_alert ----------
@bot.message_handler(commands=['ai_alert'])
def ai_alert_handler(message):
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ –∞–ª–µ—Ä—Ç–∏ –∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–º–∏ —Ä—ñ–≤–Ω—è–º–∏ –≤—Ö–æ–¥—É/–≤–∏—Ö–æ–¥—É
    """
    try:
        parts = message.text.split()
        symbol = "BTCUSDT"  # default
        
        if len(parts) >= 2:
            symbol = parts[1].upper()
            if not symbol.endswith('USDT'):
                symbol += 'USDT'
        
        processing_msg = bot.send_message(message.chat.id, f"üéØ AI —Ä–æ–∑—Ä–∞—Ö–æ–≤—É—î —Ä—ñ–≤–Ω—ñ –¥–ª—è {symbol}...")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ
        url = f"https://api.binance.com/api/v3/ticker/24hr?symbol={symbol}"
        response = requests.get(url, timeout=10)
        data = response.json() if response.status_code == 200 else {}
        
        current_price = float(data.get('lastPrice', 0))
        if current_price == 0:
            # –Ø–∫—â–æ API –Ω–µ –¥–∞–≤ —Ü—ñ–Ω—É, –ø—Ä–æ–±—É—î–º–æ —á–µ—Ä–µ–∑ get_price
            try:
                current_price = get_price(symbol)
            except:
                bot.reply_to(message, f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ü—ñ–Ω—É –¥–ª—è {symbol}")
                return
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Å–∏–≥–Ω–∞–ª –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
        signal_text = generate_signal_text(symbol, interval="1h")
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –Ω–∞–ø—Ä—è–º–æ–∫ —Å–∏–≥–Ω–∞–ª—É
        is_bullish = any(keyword in signal_text for keyword in ['LONG', 'BUY', 'UP', 'BULL'])
        is_bearish = any(keyword in signal_text for keyword in ['SHORT', 'SELL', 'DOWN', 'BEAR'])
        
        if not (is_bullish or is_bearish):
            bot.reply_to(message, f"üîç –î–ª—è {symbol} –Ω–µ–º–∞—î —á—ñ—Ç–∫–∏—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤")
            return
        
        # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —Ä—ñ–≤–Ω—ñ
        if is_bullish:
            entry_price = round(current_price * 0.98, 6)  # -2% –¥–ª—è –≤—Ö–æ–¥—É –Ω–∞ –≤—ñ–¥–∫–∞—Ç—ñ
            stop_loss = round(entry_price * 0.98, 6)      # -2% –≤—ñ–¥ –≤—Ö–æ–¥—É
            take_profit = round(entry_price * 1.06, 6)    # +6% —Ü—ñ–ª—å (RRR 1:3)
            direction = "LONG"
            emoji = "üü¢"
        else:
            entry_price = round(current_price * 1.02, 6)  # +2% –¥–ª—è –≤—Ö–æ–¥—É –Ω–∞ –≤—ñ–¥—Å–∫–æ–∫—É
            stop_loss = round(entry_price * 1.02, 6)      # +2% –≤—ñ–¥ –≤—Ö–æ–¥—É  
            take_profit = round(entry_price * 0.94, 6)    # -6% —Ü—ñ–ª—å (RRR 1:3)
            direction = "SHORT"
            emoji = "üî¥"
        
        # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —Ä–æ–∑–º—ñ—Ä –ø–æ–∑–∏—Ü—ñ—ó
        risk_per_trade = 100  # $100 —Ä–∏–∑–∏–∫ –Ω–∞ —É–≥–æ–¥—É
        risk_amount = abs(entry_price - stop_loss)
        position_size = round(risk_per_trade / risk_amount, 2)
        
        # –§–æ—Ä–º—É—î–º–æ –¥–µ—Ç–∞–ª—å–Ω–∏–π –ø–ª–∞–Ω
        response = [
            f"{emoji} <b>AI Trading Plan for {symbol}</b>",
            f"",
            f"üìä <b>Current Price:</b> ${current_price:.6f}",
            f"üéØ <b>Signal:</b> {direction}",
            f"",
            f"üí∞ <b>Trading Levels:</b>",
            f"‚Ä¢ Entry: ${entry_price:.6f}",
            f"‚Ä¢ Stop Loss: ${stop_loss:.6f}", 
            f"‚Ä¢ Take Profit: ${take_profit:.6f}",
            f"‚Ä¢ Risk/Reward: 1:3",
            f"",
            f"üìà <b>Position Size:</b>",
            f"‚Ä¢ Risk Amount: ${risk_per_trade}",
            f"‚Ä¢ Position Size: {position_size} {symbol.replace('USDT', '')}",
            f"‚Ä¢ Investment: ${entry_price * position_size:.2f}",
            f"",
            f"üí° <b>AI Recommendations:</b>",
            f"‚Ä¢ Wait for price to reach entry level",
            f"‚Ä¢ Set limit orders for better execution",
            f"‚Ä¢ Monitor 1h timeframe for confirmation",
            f"",
            f"‚ö†Ô∏è <i>Based on current market conditions</i>"
        ]
        
        try:
            bot.delete_message(message.chat.id, processing_msg.message_id)
        except:
            pass
        
        # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —à–≤–∏–¥–∫–∏—Ö –¥—ñ–π
        markup = types.InlineKeyboardMarkup()
        markup.row(
            types.InlineKeyboardButton("üìä –ì—Ä–∞—Ñ—ñ–∫ 1h", callback_data=f"chart_1h_{symbol}"),
            types.InlineKeyboardButton("üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data=f"alert_{symbol}")
        )
        
        bot.send_message(message.chat.id, "\n".join(response), 
                        parse_mode="HTML", reply_markup=markup)
        
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")

# ---------- /ai_auto_alert ----------
@bot.message_handler(commands=['ai_auto_alert'])
def ai_auto_alert_handler(message):
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –ø–æ—à—É–∫ –Ω–∞–π–∫—Ä–∞—â–∏—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤ –∑ –≥–æ—Ç–æ–≤–∏–º–∏ —Ä—ñ–≤–Ω—è–º–∏
    """
    try:
        processing_msg = bot.send_message(message.chat.id, "üîç AI —à—É–∫–∞—î –Ω–∞–π–∫—Ä–∞—â—ñ —Å–∏–≥–Ω–∞–ª–∏...")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–ø —Ç–æ–∫–µ–Ω–∏
        url = "https://api.binance.com/api/v3/ticker/24hr"
        response = requests.get(url, timeout=15)
        data = response.json()
        
        usdt_pairs = [d for d in data if d['symbol'].endswith('USDT') and float(d['quoteVolume']) > 10000000]
        top_pairs = sorted(usdt_pairs, key=lambda x: abs(float(x['priceChangePercent'])), reverse=True)[:10]
        
        best_alerts = []
        
        for pair in top_pairs:
            symbol = pair['symbol']
            current_price = float(pair['lastPrice'])
            
            try:
                signal_text = generate_signal_text(symbol, interval="1h")
                
                is_bullish = any(keyword in signal_text for keyword in ['LONG', 'BUY', 'UP', 'BULL'])
                is_bearish = any(keyword in signal_text for keyword in ['SHORT', 'SELL', 'DOWN', 'BEAR'])
                
                if is_bullish or is_bearish:
                    # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —Ä—ñ–≤–Ω—ñ
                    if is_bullish:
                        entry = round(current_price * 0.98, 6)
                        sl = round(entry * 0.98, 6)
                        tp = round(entry * 1.06, 6)
                        direction = "LONG"
                        emoji = "üü¢"
                    else:
                        entry = round(current_price * 1.02, 6)
                        sl = round(entry * 1.02, 6)
                        tp = round(entry * 0.94, 6)
                        direction = "SHORT" 
                        emoji = "üî¥"
                    
                    best_alerts.append({
                        'symbol': symbol,
                        'direction': direction,
                        'emoji': emoji,
                        'entry': entry,
                        'sl': sl,
                        'tp': tp,
                        'current': current_price
                    })
                    
            except Exception:
                continue
        
        try:
            bot.delete_message(message.chat.id, processing_msg.message_id)
        except:
            pass
        
        if not best_alerts:
            bot.reply_to(message, "üîç –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Å–∏–ª—å–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤")
            return
        
        # –§–æ—Ä–º—É—î–º–æ –∑–≤—ñ—Ç
        response = ["üöÄ <b>AI Auto Alerts - –ù–∞–π–∫—Ä–∞—â—ñ —Å–∏–≥–Ω–∞–ª–∏:</b>\n"]
        
        for alert in best_alerts[:5]:
            response.append(
                f"\n{alert['emoji']} <b>{alert['symbol']}</b> - {alert['direction']}"
            )
            response.append(f"   Current: ${alert['current']:.6f}")
            response.append(f"   Entry: ${alert['entry']:.6f}")
            response.append(f"   SL: ${alert['sl']:.6f} | TP: ${alert['tp']:.6f}")
        
        response.append("\nüí° <i>–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /ai_alert SYMBOL –¥–ª—è –¥–µ—Ç–∞–ª–µ–π</i>")
        
        bot.reply_to(message, "\n".join(response), parse_mode="HTML")
        
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")

# ---------- Callback –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∞–ª–µ—Ä—Ç—ñ–≤ ----------
@bot.callback_query_handler(func=lambda call: call.data.startswith('alert_'))
def alert_callback(call):
    """–û–Ω–æ–≤–∏—Ç–∏ –∞–ª–µ—Ä—Ç"""
    try:
        symbol = call.data.replace('alert_', '')
        bot.answer_callback_query(call.id, f"üîÑ –û–Ω–æ–≤–ª—é—é {symbol}...")
        
        # –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —ñ —Ä–æ–±–∏–º–æ –Ω–æ–≤–∏–π –∞–Ω–∞–ª—ñ–∑
        try:
            bot.delete_message(call.message.chat.id, call.message.message_id)
        except:
            pass
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ñ–µ–π–∫–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏
        class FakeMessage:
            def __init__(self, chat_id, text):
                self.chat_id = chat_id
                self.text = text
        
        fake_msg = FakeMessage(call.message.chat.id, f"/ai_alert {symbol}")
        ai_alert_handler(fake_msg)
        
    except Exception as e:
        bot.send_message(call.message.chat.id, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")
        
# ---------- /ai_notify ----------
@bot.message_handler(commands=['ai_notify'])
def ai_notify_handler(message):
    """
    –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è smart-—Å–ø–æ–≤—ñ—â–µ–Ω—å –ø—Ä–æ —ñ–¥–µ–∞–ª—å–Ω—ñ –≤—Ö–æ–¥—ã
    """
    try:
        user_id = message.from_user.id
        user_settings = notify_settings.get(user_id, {})
        
        if not user_settings:
            response = [
                "üîî <b>AI Smart Notifications Setup</b>",
                "",
                "üìä <b>–ü–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:</b>",
                "‚Ä¢ –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è: ‚ùå –í–ò–ú–ö–ù–ï–ù–û",
                "‚Ä¢ –¢–∏–ø —Å–∏–≥–Ω–∞–ª—ñ–≤: –í–°–Ü",
                "‚Ä¢ –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –≤–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å: 70%",
                "‚Ä¢ –ß–∞—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ: –¶—ñ–ª–æ–¥–æ–±–æ–≤–æ",
                "",
                "üéØ <b>–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—ó:</b>"
            ]
            
            markup = types.InlineKeyboardMarkup()
            markup.row(
                types.InlineKeyboardButton("‚úÖ –£–≤—ñ–º–∫–Ω—É—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è", callback_data="notify_enable"),
                types.InlineKeyboardButton("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏", callback_data="notify_config")
            )
            
        else:
            response = [
                "üîî <b>–ü–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å:</b>",
                "",
                f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {'‚úÖ –£–í–Ü–ú–ö–ù–ï–ù–û' if user_settings.get('enabled', False) else '‚ùå –í–ò–ú–ö–ù–ï–ù–û'}",
                f"‚Ä¢ –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –≤–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å: {user_settings.get('min_confidence', 70)}%",
                f"‚Ä¢ –¢–∏–ø–∏ —Å–∏–≥–Ω–∞–ª—ñ–≤: {', '.join(user_settings.get('signal_types', ['ALL']))}",
                f"‚Ä¢ –ß–∞—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ: {user_settings.get('active_hours', '00:00-23:59')}",
                f"‚Ä¢ –£–ª—é–±–ª–µ–Ω—ñ –º–æ–Ω–µ—Ç–∏: {len(user_settings.get('favorite_coins', []))}",
                "",
                "üéØ <b>–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:</b>"
            ]
            
            markup = types.InlineKeyboardMarkup()
            markup.row(
                types.InlineKeyboardButton("üîï –í–∏–º–∫–Ω—É—Ç–∏" if user_settings.get('enabled') else "üîî –£–≤—ñ–º–∫–Ω—É—Ç–∏", 
                                         callback_data="notify_toggle"),
                types.InlineKeyboardButton("‚öôÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", callback_data="notify_config")
            )
            markup.row(
                types.InlineKeyboardButton("üìä –¢–µ—Å—Ç–æ–≤–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è", callback_data="notify_test"),
                types.InlineKeyboardButton("üìã –ú–æ—ó —É–ª—é–±–ª–µ–Ω—ñ", callback_data="notify_favorites")
            )
        
        bot.send_message(message.chat.id, "\n".join(response), 
                        parse_mode="HTML", reply_markup=markup)
        
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")

# ---------- –û–ë–†–û–ë–ù–ò–ö –¢–ï–ö–°–¢–û–í–ò–• –ü–û–í–Ü–î–û–ú–õ–ï–ù–¨ ----------
@bot.message_handler(func=lambda message: True)
def handle_text_messages(message):
    """–û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å"""
    try:
        user_id = message.from_user.id
        text = message.text.strip()
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤ –ø—Ä–æ—Ü–µ—Å—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        if user_id in user_settings_state:
            state = user_settings_state[user_id]
            
            if state == 'waiting_confidence':
                # –û–±—Ä–æ–±–∫–∞ –≤–ø–µ–≤–Ω–µ–Ω–æ—Å—Ç—ñ
                try:
                    confidence = int(text)
                    if 50 <= confidence <= 90:
                        if user_id not in notify_settings:
                            notify_settings[user_id] = {}
                        notify_settings[user_id]['min_confidence'] = confidence
                        bot.send_message(user_id, f"‚úÖ –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –≤–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {confidence}%")
                        user_settings_state[user_id] = None
                    else:
                        bot.send_message(user_id, "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –≤—ñ–¥ 50 –¥–æ 90")
                except ValueError:
                    bot.send_message(user_id, "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ")
                    
            elif state == 'waiting_time':
                # –û–±—Ä–æ–±–∫–∞ —á–∞—Å—É
                if re.match(r'^\d{2}:\d{2}-\d{2}:\d{2}$', text):
                    if user_id not in notify_settings:
                        notify_settings[user_id] = {}
                    notify_settings[user_id]['active_hours'] = text
                    bot.send_message(user_id, f"‚úÖ –ß–∞—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π: {text}")
                    user_settings_state[user_id] = None
                else:
                    bot.send_message(user_id, "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–∫–ª–∞–¥: 09:00-18:00")
                    
            elif state == 'waiting_favorites':
                # –û–±—Ä–æ–±–∫–∞ —É–ª—é–±–ª–µ–Ω–∏—Ö –º–æ–Ω–µ—Ç
                coins = [coin.strip().upper() for coin in text.split(',')]
                valid_coins = []
                
                for coin in coins:
                    if coin.endswith('USDT') and len(coin) > 4:
                        valid_coins.append(coin)
                
                if valid_coins:
                    if user_id not in notify_settings:
                        notify_settings[user_id] = {}
                    notify_settings[user_id]['favorite_coins'] = valid_coins
                    bot.send_message(user_id, f"‚úÖ –£–ª—é–±–ª–µ–Ω—ñ –º–æ–Ω–µ—Ç–∏ –¥–æ–¥–∞–Ω—ñ: {', '.join(valid_coins)}")
                else:
                    bot.send_message(user_id, "‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª—ñ–¥–Ω–∏—Ö –º–æ–Ω–µ—Ç. –ü—Ä–∏–∫–ª–∞–¥: BTCUSDT,ETHUSDT")
                
                user_settings_state[user_id] = None
                
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")

# ---------- –û–ë–†–û–ë–ù–ò–ö–ò –ö–ù–û–ü–û–ö ----------
@bot.callback_query_handler(func=lambda call: call.data.startswith(('notify_', 'config_', 'type_')))
def handle_all_callbacks(call):
    """–Ñ–¥–∏–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –≤—Å—ñ—Ö callback"""
    try:
        user_id = call.from_user.id
        data = call.data
        
        # –°–ø–∏—Å–æ–∫ –æ–±—Ä–æ–±–ª—é–≤–∞–Ω–∏—Ö –∫–æ–º–∞–Ω–¥
        handlers = {
            'notify_enable': handle_enable,
            'notify_toggle': handle_toggle,
            'notify_test': handle_test,
            'notify_config': handle_config,
            'notify_favorites': handle_favorites,
            'notify_back': handle_back,
            'config_confidence': handle_config_confidence,
            'config_types': handle_config_types,
            'config_time': handle_config_time,
            'config_favorites': handle_config_favorites,
            'type_all': handle_type_all,
            'type_breakout': handle_type_breakout,
            'type_trend': handle_type_trend,
            'type_squeeze': handle_type_squeeze
        }
        
        if data in handlers:
            handlers[data](call)
        else:
            bot.answer_callback_query(call.id, "‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞")
            
    except Exception as e:
        bot.answer_callback_query(call.id, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")

# ---------- –ö–û–ù–ö–†–ï–¢–ù–Ü –û–ë–†–û–ë–ù–ò–ö–ò ----------
def handle_enable(call):
    """–£–≤—ñ–º–∫–Ω—É—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è"""
    user_id = call.from_user.id
    notify_settings[user_id] = {
        'enabled': True,
        'min_confidence': 70,
        'signal_types': ['ALL'],
        'active_hours': '00:00-23:59',
        'favorite_coins': []
    }
    bot.answer_callback_query(call.id, "‚úÖ –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è —É–≤—ñ–º–∫–Ω–µ–Ω–æ!")
    update_message(call)

def handle_toggle(call):
    """–ü–µ—Ä–µ–º–∫–Ω—É—Ç–∏ —Å—Ç–∞—Ç—É—Å"""
    user_id = call.from_user.id
    if user_id in notify_settings:
        notify_settings[user_id]['enabled'] = not notify_settings[user_id].get('enabled', False)
        status = "—É–≤—ñ–º–∫–Ω–µ–Ω–æ" if notify_settings[user_id]['enabled'] else "–≤–∏–º–∫–Ω–µ–Ω–æ"
        bot.answer_callback_query(call.id, f"‚úÖ –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è {status}!")
        update_message(call)
    else:
        bot.answer_callback_query(call.id, "‚ùå –°–ø–æ—á–∞—Ç–∫—É –Ω–∞–ª–∞—à—Ç—É–π—Ç–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è!")

def handle_test(call):
    """–¢–µ—Å—Ç–æ–≤–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è"""
    user_id = call.from_user.id
    if user_id in notify_settings and notify_settings[user_id].get('enabled', False):
        send_test_notification(user_id)
        bot.answer_callback_query(call.id, "üìã –¢–µ—Å—Ç–æ–≤–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ!")
    else:
        bot.answer_callback_query(call.id, "‚ùå –°–ø–æ—á–∞—Ç–∫—É —É–≤—ñ–º–∫–Ω—ñ—Ç—å —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è!")

def handle_config(call):
    """–ú–µ–Ω—é –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å"""
    show_config_menu(call)

def handle_favorites(call):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ —É–ª—é–±–ª–µ–Ω—ñ"""
    user_id = call.from_user.id
    favorites = notify_settings.get(user_id, {}).get('favorite_coins', [])
    
    if favorites:
        response = ["üíé <b>–£–ª—é–±–ª–µ–Ω—ñ –º–æ–Ω–µ—Ç–∏:</b>\n"] + [f"‚Ä¢ {coin}" for coin in favorites]
    else:
        response = ["üíé <b>–£–ª—é–±–ª–µ–Ω—ñ –º–æ–Ω–µ—Ç–∏:</b>\n", "‚Ä¢ –°–ø–∏—Å–æ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π"]
    
    bot.send_message(call.message.chat.id, "\n".join(response), parse_mode="HTML")
    bot.answer_callback_query(call.id, "üíé –°–ø–∏—Å–æ–∫ —É–ª—é–±–ª–µ–Ω–∏—Ö –º–æ–Ω–µ—Ç")

def handle_back(call):
    """–ù–∞–∑–∞–¥ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    update_message(call)

def handle_config_confidence(call):
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–ø–µ–≤–Ω–µ–Ω–æ—Å—Ç—ñ"""
    user_id = call.from_user.id
    user_settings_state[user_id] = 'waiting_confidence'
    bot.send_message(call.message.chat.id, "üéØ –í–≤–µ–¥—ñ—Ç—å –º—ñ–Ω—ñ–º–∞–ª—å–Ω—É –≤–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å (50-90):")
    bot.answer_callback_query(call.id, "–í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –≤—ñ–¥ 50 –¥–æ 90")

def handle_config_time(call):
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —á–∞—Å—É"""
    user_id = call.from_user.id
    user_settings_state[user_id] = 'waiting_time'
    bot.send_message(call.message.chat.id, "‚è∞ –í–≤–µ–¥—ñ—Ç—å —á–∞—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ 09:00-18:00):")
    bot.answer_callback_query(call.id, "–í–≤–µ–¥—ñ—Ç—å —á–∞—Å —É —Ñ–æ—Ä–º–∞—Ç—ñ HH:MM-HH:MM")

def handle_config_favorites(call):
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —É–ª—é–±–ª–µ–Ω–∏—Ö"""
    user_id = call.from_user.id
    user_settings_state[user_id] = 'waiting_favorites'
    bot.send_message(call.message.chat.id, "üíé –í–≤–µ–¥—ñ—Ç—å —É–ª—é–±–ª–µ–Ω—ñ –º–æ–Ω–µ—Ç–∏ —á–µ—Ä–µ–∑ –∫–æ–º—É (BTCUSDT,ETHUSDT):")
    bot.answer_callback_query(call.id, "–í–≤–µ–¥—ñ—Ç—å –º–æ–Ω–µ—Ç–∏ —á–µ—Ä–µ–∑ –∫–æ–º—É")

def handle_config_types(call):
    """–ú–µ–Ω—é —Ç–∏–ø—ñ–≤ —Å–∏–≥–Ω–∞–ª—ñ–≤"""
    user_id = call.from_user.id
    if user_id not in notify_settings:
        bot.answer_callback_query(call.id, "‚ùå –°–ø–æ—á–∞—Ç–∫—É —É–≤—ñ–º–∫–Ω—ñ—Ç—å —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è!")
        return
        
    show_signal_types_menu(call)

def handle_type_all(call):
    """–û–±—Ä–∞—Ç–∏ –≤—Å—ñ —Ç–∏–ø–∏"""
    user_id = call.from_user.id
    notify_settings[user_id]['signal_types'] = ['ALL']
    bot.answer_callback_query(call.id, "‚úÖ –í—Å—ñ —Ç–∏–ø–∏ —Å–∏–≥–Ω–∞–ª—ñ–≤")
    show_config_menu(call)

def handle_type_breakout(call):
    """–û–±—Ä–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ –ø—Ä–æ–±–æ—ó"""
    user_id = call.from_user.id
    notify_settings[user_id]['signal_types'] = ['BREAKOUT']
    bot.answer_callback_query(call.id, "‚úÖ –¢—ñ–ª—å–∫–∏ –ø—Ä–æ–±–æ—ó")
    show_config_menu(call)

def handle_type_trend(call):
    """–û–±—Ä–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ —Ç—Ä–µ–Ω–¥–∏"""
    user_id = call.from_user.id
    notify_settings[user_id]['signal_types'] = ['TREND']
    bot.answer_callback_query(call.id, "‚úÖ –¢—ñ–ª—å–∫–∏ —Ç—Ä–µ–Ω–¥–∏")
    show_config_menu(call)

def handle_type_squeeze(call):
    """–û–±—Ä–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ —Å–∫–≤—ñ–∑–∏"""
    user_id = call.from_user.id
    notify_settings[user_id]['signal_types'] = ['SQUEEZE']
    bot.answer_callback_query(call.id, "‚úÖ –¢—ñ–ª—å–∫–∏ —Å–∫–≤—ñ–∑–∏")
    show_config_menu(call)

# ---------- –î–û–ü–û–ú–Ü–ñ–ù–Ü –§–£–ù–ö–¶–Ü–á ----------
def update_message(call):
    """–û–Ω–æ–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
    try:
        bot.delete_message(call.message.chat.id, call.message.message_id)
    except:
        pass
    ai_notify_handler(call.message)

def show_config_menu(call):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –º–µ–Ω—é –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å"""
    response = ["‚öôÔ∏è <b>–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å:</b>\n\n–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –¥–ª—è –∑–º—ñ–Ω–∏:"]
    
    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton("üéØ –í–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å", callback_data="config_confidence"),
        types.InlineKeyboardButton("üìä –¢–∏–ø–∏ —Å–∏–≥–Ω–∞–ª—ñ–≤", callback_data="config_types")
    )
    markup.row(
        types.InlineKeyboardButton("‚è∞ –ß–∞—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ", callback_data="config_time"),
        types.InlineKeyboardButton("üíé –£–ª—é–±–ª–µ–Ω—ñ –º–æ–Ω–µ—Ç–∏", callback_data="config_favorites")
    )
    markup.row(
        types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="notify_back")
    )
    
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="\n".join(response),
        parse_mode="HTML",
        reply_markup=markup
    )

def show_signal_types_menu(call):
    """–ú–µ–Ω—é —Ç–∏–ø—ñ–≤ —Å–∏–≥–Ω–∞–ª—ñ–≤"""
    user_id = call.from_user.id
    current_types = notify_settings[user_id].get('signal_types', ['ALL'])
    
    response = ["üìä <b>–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø–∏ —Å–∏–≥–Ω–∞–ª—ñ–≤:</b>\n"]
    
    response.append("‚úÖ –í–°–Ü" if 'ALL' in current_types else "‚ö™Ô∏è –í–°–Ü")
    response.append("‚úÖ –ü–†–û–ë–û–á" if 'BREAKOUT' in current_types else "‚ö™Ô∏è –ü–†–û–ë–û–á")
    response.append("‚úÖ –¢–†–ï–ù–î–ò" if 'TREND' in current_types else "‚ö™Ô∏è –¢–†–ï–ù–î–ò")
    response.append("‚úÖ –°–ö–í–Ü–ó–ò" if 'SQUEEZE' in current_types else "‚ö™Ô∏è –°–ö–í–Ü–ó–ò")
    
    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton("‚úÖ –í–°–Ü", callback_data="type_all"),
        types.InlineKeyboardButton("üöÄ –ü–†–û–ë–û–á", callback_data="type_breakout")
    )
    markup.row(
        types.InlineKeyboardButton("üìà –¢–†–ï–ù–î–ò", callback_data="type_trend"),
        types.InlineKeyboardButton("üîç –°–ö–í–Ü–ó–ò", callback_data="type_squeeze")
    )
    markup.row(
        types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="notify_config")
    )
    
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="\n".join(response),
        parse_mode="HTML",
        reply_markup=markup
    )

def send_test_notification(user_id):
    """–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Ç–µ—Å—Ç–æ–≤–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è"""
    notification = [
        "üéØ <b>TEST NOTIFICATION</b>",
        "üìä BTCUSDT | –í–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å: 85%",
        "",
        "‚úÖ –¢–µ—Å—Ç–æ–≤–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–∞—Ü—é—î!",
        "–°–∏—Å—Ç–µ–º–∞ —Å–ø–æ–≤—ñ—â–µ–Ω—å –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∞.",
        "",
        f"‚è∞ {datetime.now().strftime('%H:%M:%S')}",
        "",
        "üí° –í–∏ –±—É–¥–µ—Ç–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –Ω–∞–π–∫—Ä–∞—â—ñ —Ç–æ—Ä–≥–æ–≤—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ!"
    ]
    
    bot.send_message(user_id, "\n".join(notification), parse_mode="HTML")

# –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
notify_settings = {}
user_settings_state = {}  # –°—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥—É