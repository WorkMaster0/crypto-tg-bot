import ccxt
import pandas as pd
import numpy as np
from ta.momentum import RSIIndicator
from ta.trend import MACD, EMAIndicator
from ta.volatility import BollingerBands

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±—ñ—Ä–∂—ñ
exchange = ccxt.binance()

def get_price(symbol):
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—É —Ü—ñ–Ω—É"""
    try:
        ticker = exchange.fetch_ticker(symbol)
        return float(ticker['last'])
    except:
        return 0.0

def get_ohlcv(symbol, timeframe='1h', limit=100):
    """–û—Ç—Ä–∏–º–∞—Ç–∏ OHLCV –¥–∞–Ω—ñ"""
    try:
        ohlcv = exchange.fetch_ohlcv(symbol, timeframe, limit=limit)
        df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
        df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
        return df
    except Exception as e:
        print(f"Error fetching data: {e}")
        return pd.DataFrame()

def generate_signal(symbol):
    """–ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Ç–æ—Ä–≥–æ–≤–∏–π —Å–∏–≥–Ω–∞–ª"""
    df = get_ohlcv(symbol)
    if df.empty:
        return "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö"
    
    # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä—ñ–≤
    df['rsi'] = RSIIndicator(df['close']).rsi()
    macd = MACD(df['close'])
    df['macd'] = macd.macd()
    df['macd_signal'] = macd.macd_signal()
    
    # –ó–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è —Ä—ñ–≤–Ω—ñ–≤ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏/–æ–ø–æ—Ä—É
    support, resistance = find_support_resistance(df)
    
    # –ê–Ω–∞–ª—ñ–∑ —Å–∏–≥–Ω–∞–ª—É
    current_price = df['close'].iloc[-1]
    last_rsi = df['rsi'].iloc[-1]
    
    signal = ""
    if last_rsi < 30 and current_price <= support * 1.02:
        signal = "üü¢ BUY (Oversold at support)"
    elif last_rsi > 70 and current_price >= resistance * 0.98:
        signal = "üî¥ SELL (Overbought at resistance)"
    else:
        signal = "üü° HOLD (No clear signal)"
    
    return f"""
üìä *–ê–Ω–∞–ª—ñ–∑ {symbol}*
üí∞ –¶—ñ–Ω–∞: ${current_price:.2f}
üìà RSI: {last_rsi:.1f}
üîµ –ü—ñ–¥—Ç—Ä–∏–º–∫–∞: ${support:.2f}
üî¥ –û–ø—ñ—Ä: ${resistance:.2f}
üö¶ –°–∏–≥–Ω–∞–ª: {signal}
"""

def find_support_resistance(df, window=20):
    """–ó–Ω–∞–π—Ç–∏ —Ä—ñ–≤–Ω—ñ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ —Ç–∞ –æ–ø–æ—Ä—É"""
    df['support'] = df['low'].rolling(window=window).min()
    df['resistance'] = df['high'].rolling(window=window).max()
    return df['support'].iloc[-1], df['resistance'].iloc[-1]

def trend_strength(symbol):
    """–í–∏–∑–Ω–∞—á–∏—Ç–∏ —Å–∏–ª—É —Ç—Ä–µ–Ω–¥—É"""
    df = get_ohlcv(symbol)
    if df.empty:
        return "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö"
    
    # EMA –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –ø–µ—Ä—ñ–æ–¥—ñ–≤
    ema_20 = EMAIndicator(df['close'], window=20).ema_indicator()
    ema_50 = EMAIndicator(df['close'], window=50).ema_indicator()
    
    trend = "üü¢ BULLISH" if ema_20.iloc[-1] > ema_50.iloc[-1] else "üî¥ BEARISH"
    strength = abs((ema_20.iloc[-1] - ema_50.iloc[-1]) / ema_50.iloc[-1] * 100)
    
    return f"""
üìà *–¢—Ä–µ–Ω–¥ {symbol}*
–ù–∞–ø—Ä—è–º–æ–∫: {trend}
–°–∏–ª–∞: {strength:.1f}%
EMA 20: ${ema_20.iloc[-1]:.2f}
EMA 50: ${ema_50.iloc[-1]:.2f}
"""
