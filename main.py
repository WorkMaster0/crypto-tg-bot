import requests
import asyncio
import aiohttp
import time
import hmac
import hashlib
import base64
from datetime import datetime
import logging
import threading
import os
from typing import Dict, List, Optional
import json

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
class Config:
    # Telegram
    TELEGRAM_TOKEN = "8489382938:AAHeFFZPODspuEFcSQyjw8lWzYpRRSv9n3g"
    TELEGRAM_CHAT_ID = "6053907025"
    
    # LBank API
    LBANK_API_KEY = "c21d76ba-3252-4372-b7dd-30ac80428363"
    LBANK_SECRET_KEY = "4EC9D3BB56CBD4C42B9E83F0C7B7C1A9"
    LBANK_BASE_URL = "https://api.lbank.info"
    
    # –ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω—ñ API URLs
    GEKKOTERM_API_URL = "https://api.geckoterminal.com/api/v2"
    
    # –¢–æ—Ä–≥–æ–≤—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
    ORDER_VOLUME = 50  # –û–±—Å—è–≥ –≤ USDT
    PRICE_PREMIUM = 0.0001  # 0.01% –≤–∏—â–µ —Ä–∏–Ω–∫–æ–≤–æ—ó —Ü—ñ–Ω–∏
    MIN_TRADE_AMOUNT = 3000  # –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Å—É–º–∞ —É–≥–æ–¥–∏ –¥–ª—è —Ä–µ–∞–∫—Ü—ñ—ó
    
    # –§—ñ–ª—å—Ç—Ä–∏ —Ç–æ–∫–µ–Ω—ñ–≤
    MIN_MARKET_CAP = 3000000  # 3M$ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –∫–∞–ø—ñ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—è
    MAX_MARKET_CAP = 100000000  # 100M$ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫–∞–ø—ñ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—è
    MIN_VOLUME = 500000  # 500K$ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –æ–±—Å—è–≥
    ALLOWED_CHAINS = ["solana", "bsc"]  # –¢—ñ–ª—å–∫–∏ Solana —Ç–∞ BSC
    BLACKLIST_TOKENS = ["shitcoin", "scam", "test", "meme", "fake", "pump", "dump"]
    
    # –û–±–º–µ–∂–µ–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤
    REQUEST_DELAY = 2  # –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    MAX_REQUESTS_PER_MINUTE = 30  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Ç—ñ–≤ –Ω–∞ —Ö–≤–∏–ª–∏–Ω—É

class TelegramClient:
    """–ü—Ä–æ—Å—Ç–∏–π –∫–ª—ñ—î–Ω—Ç –¥–ª—è Telegram –±–µ–∑ polling"""
    
    def __init__(self, token: str, chat_id: str):
        self.token = token
        self.chat_id = chat_id
        self.base_url = f"https://api.telegram.org/bot{token}"
    
    def send_message(self, text: str, parse_mode: str = None) -> bool:
        """–ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ Telegram API"""
        try:
            url = f"{self.base_url}/sendMessage"
            payload = {
                'chat_id': self.chat_id,
                'text': text
            }
            if parse_mode:
                payload['parse_mode'] = parse_mode
            
            response = requests.post(url, data=payload, timeout=10)
            return response.status_code == 200
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
            return False

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç—ñ–≤
telegram_client = TelegramClient(Config.TELEGRAM_TOKEN, Config.TELEGRAM_CHAT_ID)

class TokenFilter:
    """–ö–ª–∞—Å –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó —Ç–æ–∫–µ–Ω—ñ–≤"""
    
    @staticmethod
    def is_token_allowed(token_data: Dict) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —Ç–æ–∫–µ–Ω –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –ø—ñ–¥ –∫—Ä–∏—Ç–µ—Ä—ñ—ó"""
        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–∞–ø—ñ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—ó
            market_cap = token_data.get('market_cap', 0)
            if not (Config.MIN_MARKET_CAP <= market_cap <= Config.MAX_MARKET_CAP):
                logging.debug(f"–¢–æ–∫–µ–Ω {token_data.get('symbol')} –Ω–µ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –ø–æ –∫–∞–ø—ñ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—ó: {market_cap}")
                return False
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–±—Å—è–≥—É —Ç–æ—Ä–≥—ñ–≤
            volume = token_data.get('volume_24h', 0)
            if volume < Config.MIN_VOLUME:
                logging.debug(f"–¢–æ–∫–µ–Ω {token_data.get('symbol')} –Ω–µ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –ø–æ –æ–±—Å—è–≥—É: {volume}")
                return False
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–ª–æ–∫—á–µ–π–Ω—É
            chain = token_data.get('chain', '').lower()
            if chain not in Config.ALLOWED_CHAINS:
                logging.debug(f"–¢–æ–∫–µ–Ω {token_data.get('symbol')} –Ω–µ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –ø–æ –±–ª–æ–∫—á–µ–π–Ω—É: {chain}")
                return False
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–æ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É
            symbol = token_data.get('symbol', '').lower()
            name = token_data.get('name', '').lower()
            
            for blacklisted in Config.BLACKLIST_TOKENS:
                if blacklisted in symbol or blacklisted in name:
                    logging.debug(f"–¢–æ–∫–µ–Ω {symbol} –≤ —á–æ—Ä–Ω–æ–º—É —Å–ø–∏—Å–∫—É: {blacklisted}")
                    return False
            
            # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —è–∫–æ—Å—Ç—ñ
            price_change = abs(token_data.get('price_change_24h', 0))
            if price_change > 50:
                logging.debug(f"–¢–æ–∫–µ–Ω {symbol} –º–∞—î –∑–∞–≤–µ–ª–∏–∫—É –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ñ—Å—Ç—å: {price_change}%")
                return False
                
            liquidity = token_data.get('liquidity', 0)
            if liquidity < 100000:
                logging.debug(f"–¢–æ–∫–µ–Ω {symbol} –º–∞—î –∑–∞–º–∞–ª—É –ª—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—å: {liquidity}")
                return False
                
            logging.info(f"‚úÖ –¢–æ–∫–µ–Ω {symbol} –ø—Ä–æ–π—à–æ–≤ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—é")
            return True
            
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó —Ç–æ–∫–µ–Ω–∞: {e}")
            return False

class DexDataClient:
    """–ö–ª—ñ—î–Ω—Ç –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–º–∏ API"""
    
    def __init__(self):
        self.last_request_time = 0
        self.request_count = 0
        self.minute_start = time.time()
    
    async def _rate_limit(self):
        """–û–±–º–µ–∂–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∑–∞–ø–∏—Ç—ñ–≤"""
        current_time = time.time()
        elapsed = current_time - self.last_request_time
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ª—ñ–º—ñ—Ç –∑–∞–ø–∏—Ç—ñ–≤ –Ω–∞ —Ö–≤–∏–ª–∏–Ω—É
        if current_time - self.minute_start >= 60:
            self.request_count = 0
            self.minute_start = current_time
        
        if self.request_count >= Config.MAX_REQUESTS_PER_MINUTE:
            wait_time = 60 - (current_time - self.minute_start)
            logging.warning(f"‚è≥ –î–æ—Å—è–≥–Ω—É—Ç–æ –ª—ñ–º—ñ—Ç –∑–∞–ø–∏—Ç—ñ–≤. –û—á—ñ–∫—É—é {wait_time:.1f} —Å–µ–∫—É–Ω–¥")
            await asyncio.sleep(wait_time)
            self.request_count = 0
            self.minute_start = time.time()
        
        # –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏
        if elapsed < Config.REQUEST_DELAY:
            await asyncio.sleep(Config.REQUEST_DELAY - elapsed)
        
        self.last_request_time = time.time()
        self.request_count += 1
    
    async def get_recent_trades(self, chain: str, limit: int = 10) -> List[Dict]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—ñ—Ö —É–≥–æ–¥ –∑ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏—Ö API"""
        try:
            await self._rate_limit()
            
            if chain == "solana":
                return await self._get_network_trades("solana", limit)
            elif chain == "bsc":
                return await self._get_network_trades("bsc", limit)
            else:
                return []
                
        except Exception as e:
            logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —É–≥–æ–¥ –∑ {chain}: {e}")
            return []
    
    async def _get_network_trades(self, network: str, limit: int) -> List[Dict]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —É–≥–æ–¥ –∑ –º–µ—Ä–µ–∂—ñ —á–µ—Ä–µ–∑ GeckoTerminal API"""
        try:
            url = f"{Config.GEKKOTERM_API_URL}/networks/{network}/pools"
            
            logging.info(f"üîó –ó–∞–ø–∏—Ç –¥–æ GeckoTerminal API –¥–ª—è {network}")
            
            async with aiohttp.ClientSession() as session:
                async with session.get(url, timeout=15) as response:
                    if response.status != 200:
                        logging.warning(f"‚ùå GeckoTerminal API —Å—Ç–∞—Ç—É—Å: {response.status}")
                        return []
                    
                    data = await response.json()
                    trades = []
                    
                    for pool in data.get('data', [])[:limit]:
                        try:
                            attributes = pool.get('attributes', {})
                            volume_24h = float(attributes.get('volume_usd', {}).get('h24', 0))
                            
                            if volume_24h >= Config.MIN_TRADE_AMOUNT:
                                base_token = pool.get('relationships', {}).get('base_token', {}).get('data', {})
                                token_address = base_token.get('address', '') if base_token else ''
                                
                                trades.append({
                                    'chain': network,
                                    'token_address': token_address,
                                    'token_symbol': attributes.get('base_token_symbol', '').upper(),
                                    'amount_usd': volume_24h,
                                    'price': float(attributes.get('price_usd', 0)),
                                    'timestamp': int(time.time()),
                                    'dex_url': f"https://www.geckoterminal.com/{network}/pools/{pool.get('id', '')}",
                                    'pool_id': pool.get('id', '')
                                })
                        except (ValueError, TypeError) as e:
                            logging.debug(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø—É–ª—É: {e}")
                            continue
                    
                    logging.info(f"‚úÖ {network.upper()}: –∑–Ω–∞–π–¥–µ–Ω–æ {len(trades)} –≤–µ–ª–∏–∫–∏—Ö –ø—É–ª—ñ–≤")
                    return trades
                    
        except Exception as e:
            logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ GeckoTerminal API –¥–ª—è {network}: {e}")
            return []
    
    async def get_token_info(self, chain: str, token_address: str, pool_id: str = None) -> Optional[Dict]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª—å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ GeckoTerminal"""
        try:
            await self._rate_limit()
            
            # –°–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é —á–µ—Ä–µ–∑ pool ID
            if pool_id:
                pool_info = await self._get_pool_info(pool_id)
                if pool_info:
                    return pool_info
            
            # –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è, –ø—Ä–æ–±—É—î–º–æ —á–µ—Ä–µ–∑ token address
            url = f"{Config.GEKKOTERM_API_URL}/networks/{chain}/tokens/{token_address}"
            
            logging.info(f"üîó –û—Ç—Ä–∏–º—É—é —ñ–Ω—Ñ–æ —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ GeckoTerminal: {chain}/{token_address}")
            
            async with aiohttp.ClientSession() as session:
                async with session.get(url, timeout=10) as response:
                    if response.status != 200:
                        logging.warning(f"‚ùå GeckoTerminal —Å—Ç–∞—Ç—É—Å: {response.status}")
                        return None
                    
                    data = await response.json()
                    token_data = data.get('data', {}).get('attributes', {})
                    
                    return {
                        'symbol': token_data.get('symbol', '').upper(),
                        'name': token_data.get('name', ''),
                        'price': float(token_data.get('price_usd', 0)),
                        'volume_24h': float(token_data.get('volume_usd', {}).get('h24', 0)),
                        'market_cap': float(token_data.get('fdv_usd', 0)),
                        'liquidity': float(token_data.get('reserve_in_usd', 0)),
                        'price_change_24h': float(token_data.get('price_change_percentage', {}).get('h24', 0)),
                        'chain': chain
                    }
                        
        except Exception as e:
            logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ —Ç–æ–∫–µ–Ω–∞: {e}")
            return None
    
    async def _get_pool_info(self, pool_id: str) -> Optional[Dict]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –ø—É–ª —á–µ—Ä–µ–∑ GeckoTerminal"""
        try:
            await self._rate_limit()
            
            # –†–æ–∑–±–∏—Ä–∞—î–º–æ pool_id –Ω–∞ –º–µ—Ä–µ–∂—É —Ç–∞ –∞–¥—Ä–µ—Å—É
            if '_' in pool_id:
                network, address = pool_id.split('_', 1)
                url = f"{Config.GEKKOTERM_API_URL}/networks/{network}/pools/{address}"
            else:
                return None
            
            async with aiohttp.ClientSession() as session:
                async with session.get(url, timeout=10) as response:
                    if response.status != 200:
                        return None
                    
                    data = await response.json()
                    pool_data = data.get('data', {}).get('attributes', {})
                    
                    return {
                        'symbol': pool_data.get('base_token_symbol', '').upper(),
                        'name': pool_data.get('base_token_name', ''),
                        'price': float(pool_data.get('price_usd', 0)),
                        'volume_24h': float(pool_data.get('volume_usd', {}).get('h24', 0)),
                        'market_cap': float(pool_data.get('fdv_usd', 0)),
                        'liquidity': float(pool_data.get('reserve_in_usd', 0)),
                        'price_change_24h': float(pool_data.get('price_change_percentage', {}).get('h24', 0)),
                        'chain': network
                    }
                        
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ –ø—É–ª—É: {e}")
            return None

class LBankClient:
    def __init__(self):
        self.api_key = Config.LBANK_API_KEY
        self.secret_key = Config.LBANK_SECRET_KEY
        self.base_url = Config.LBANK_BASE_URL
        
    def _generate_signature(self, params: Dict) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø—ñ–¥–ø–∏—Å—É –¥–ª—è LBank API"""
        try:
            # –§–æ—Ä–º—É—î–º–æ —Ä—è–¥–æ–∫ –¥–ª—è –ø—ñ–¥–ø–∏—Å—É
            query_string = '&'.join([f"{k}={v}" for k, v in sorted(params.items()) if k != 'sign'])
            signature = hmac.new(
                self.secret_key.encode('utf-8'),
                query_string.encode('utf-8'),
                hashlib.sha256
            ).digest()
            return base64.b64encode(signature).decode('utf-8')
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø—ñ–¥–ø–∏—Å—É: {e}")
            return ""
    
    async def get_ticker_price(self, symbol: str) -> Optional[float]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó —Ü—ñ–Ω–∏ –∑ LBank"""
        try:
            lbank_symbol = f"{symbol.lower()}_usdt"
            url = f"{self.base_url}/v2/ticker.do?symbol={lbank_symbol}"
            logging.info(f"üîó –ü–µ—Ä–µ–≤—ñ—Ä—è—é —Ü—ñ–Ω—É –Ω–∞ LBank: {lbank_symbol}")
            
            async with aiohttp.ClientSession() as session:
                async with session.get(url, timeout=10) as response:
                    if response.status != 200:
                        logging.warning(f"‚ùå LBank –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î: —Å—Ç–∞—Ç—É—Å {response.status}")
                        return None
                    
                    data = await response.json()
                    if data.get('result') and 'data' in data and data['data']:
                        ticker_data = data['data'][0]
                        price = float(ticker_data.get('ticker', {}).get('latest', 0))
                        logging.info(f"üí∞ LBank —Ü—ñ–Ω–∞ {symbol}: ${price:.6f}")
                        return price
                    else:
                        logging.warning(f"‚ùå –¢–æ–∫–µ–Ω {symbol} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –Ω–∞ LBank: {data}")
                        return None
                        
        except Exception as e:
            logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ü—ñ–Ω–∏ {symbol}: {e}")
            return None
    
    async def place_limit_order(self, symbol: str, price: float, amount: float) -> Dict:
        """–†–æ–∑–º—ñ—â–µ–Ω–Ω—è –ª—ñ–º—ñ—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞"""
        try:
            lbank_symbol = f"{symbol.lower()}_usdt"
            timestamp = str(int(time.time() * 1000))
            
            params = {
                'api_key': self.api_key,
                'symbol': lbank_symbol,
                'type': 'buy',
                'price': str(price),
                'amount': str(amount),
                'timestamp': timestamp
            }
            
            params['sign'] = self._generate_signature(params)
            
            logging.info(f"üõí –†–æ–∑–º—ñ—â—É—é –æ—Ä–¥–µ—Ä –Ω–∞ LBank: {symbol} {amount} –ø–æ ${price:.6f}")
            
            headers = {
                'Content-Type': 'application/x-www-form-urlencoded'
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    f"{self.base_url}/v2/create_order.do",
                    data=params,
                    headers=headers,
                    timeout=15
                ) as response:
                    result = await response.json()
                    if result.get('result'):
                        logging.info(f"‚úÖ –û—Ä–¥–µ—Ä —É—Å–ø—ñ—à–Ω–æ —Ä–æ–∑–º—ñ—â–µ–Ω–æ: {result.get('order_id')}")
                    else:
                        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è –æ—Ä–¥–µ—Ä–∞: {result}")
                    return result
                    
        except Exception as e:
            logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è –æ—Ä–¥–µ—Ä–∞: {e}")
            return {'error': str(e)}

class ArbitrageBot:
    def __init__(self):
        self.lbank_client = LBankClient()
        self.dex_client = DexDataClient()
        self.token_filter = TokenFilter()
        self.last_processed = {}
        self.is_scanning = False
        
    async def check_apis_connection(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ API"""
        try:
            logging.info("üîó –ü–µ—Ä–µ–≤—ñ—Ä—è—é –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ API...")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ GeckoTerminal API
            test_trades = await self.dex_client.get_recent_trades("solana", 2)
            logging.info(f"‚úÖ GeckoTerminal API –¥–æ—Å—Ç—É–ø–Ω–∏–π. –ó–Ω–∞–π–¥–µ–Ω–æ –ø—É–ª—ñ–≤: {len(test_trades)}")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ LBank
            test_price = await self.lbank_client.get_ticker_price("BTC")
            if test_price:
                logging.info(f"‚úÖ LBank –¥–æ—Å—Ç—É–ø–Ω–∏–π. –¶—ñ–Ω–∞ BTC: ${test_price:.2f}")
            else:
                logging.warning("‚ö†Ô∏è LBank –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î")
                
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Telegram
            if telegram_client.send_message("‚úÖ –ë–æ—Ç —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä—è—î –∑–≤'—è–∑–æ–∫"):
                logging.info("‚úÖ Telegram –¥–æ—Å—Ç—É–ø–Ω–∏–π")
            else:
                logging.warning("‚ö†Ô∏è Telegram –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π")
                
        except Exception as e:
            logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑'—î–¥–Ω–∞–Ω–Ω—è: {e}")
    
    async def start_auto_scan(self):
        """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è —É–≥–æ–¥"""
        self.is_scanning = True
        logging.info("üîç –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ—Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è –ø—É–ª—ñ–≤ –Ω–∞ Solana —Ç–∞ BSC")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è
        await self.check_apis_connection()
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–ø—É—Å–∫
        telegram_client.send_message(
            "ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ! –ü–æ—á–∞—Ç–æ–∫ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è –ø—É–ª—ñ–≤...",
            parse_mode="Markdown"
        )
        
        scan_count = 0
        while self.is_scanning:
            try:
                scan_count += 1
                logging.info(f"üîÑ –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è #{scan_count} - –ø–µ—Ä–µ–≤—ñ—Ä—è—é –ø—É–ª–∏...")
                
                # –û—Ç—Ä–∏–º—É—î–º–æ –ø—É–ª–∏ –∑ –æ–±–æ—Ö –º–µ—Ä–µ–∂
                tasks = [
                    self.dex_client.get_recent_trades("solana", 5),
                    self.dex_client.get_recent_trades("bsc", 5)
                ]
                
                results = await asyncio.gather(*tasks, return_exceptions=True)
                all_trades = []
                
                for i, result in enumerate(results):
                    chain_name = ["Solana", "BSC"][i]
                    if isinstance(result, list):
                        logging.info(f"üìä {chain_name}: –∑–Ω–∞–π–¥–µ–Ω–æ {len(result)} –ø—É–ª—ñ–≤")
                        all_trades.extend(result)
                    elif isinstance(result, Exception):
                        logging.error(f"‚ùå {chain_name}: –ø–æ–º–∏–ª–∫–∞ - {result}")
                
                logging.info(f"üìà –í—Å—å–æ–≥–æ –∑–Ω–∞–π–¥–µ–Ω–æ –ø—É–ª—ñ–≤: {len(all_trades)}")
                
                # –û–±—Ä–æ–±–ª—è—î–º–æ –∫–æ–∂–µ–Ω –≤–µ–ª–∏–∫–∏–π –ø—É–ª
                processed_count = 0
                for trade in all_trades:
                    if await self.process_trade_signal(trade):
                        processed_count += 1
                    # –î–æ–¥–∞—î–º–æ –∑–∞—Ç—Ä–∏–º–∫—É –º—ñ–∂ –æ–±—Ä–æ–±–∫–æ—é –ø—É–ª—ñ–≤
                    await asyncio.sleep(1)
                
                logging.info(f"‚úÖ –û–±—Ä–æ–±–ª–µ–Ω–æ –ø—É–ª—ñ–≤: {processed_count}/{len(all_trades)}")
                
                # –ü–∞—É–∑–∞ –º—ñ–∂ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è–º–∏
                logging.info("‚è∏Ô∏è –û—á—ñ–∫—É—é 60 —Å–µ–∫—É–Ω–¥...")
                await asyncio.sleep(60)
                
            except Exception as e:
                logging.error(f"üî• –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
                await asyncio.sleep(60)
    
    async def stop_auto_scan(self):
        """–ó—É–ø–∏–Ω–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è"""
        self.is_scanning = False
        logging.info("‚èπÔ∏è –ó—É–ø–∏–Ω–∫–∞ –∞–≤—Ç–æ—Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è")
        telegram_client.send_message("‚èπÔ∏è –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è –∑—É–ø–∏–Ω–µ–Ω–æ!")
    
    async def process_trade_signal(self, trade: Dict) -> bool:
    """–û–±—Ä–æ–±–∫–∞ —Å–∏–≥–Ω–∞–ª—É –ø—Ä–æ –≤–µ–ª–∏–∫–∏–π –ø—É–ª"""
    try:
        token_address = trade['token_address']
        chain = trade['chain']
        symbol = trade['token_symbol']
        pool_id = trade.get('pool_id', '')
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Å–∏–º–≤–æ–ª –Ω–µ –ø—É—Å—Ç–∏–π
        if not symbol or symbol == 'UNKNOWN' or symbol.strip() == '':
            logging.warning(f"‚ùå –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø—É–ª –∑ –ø—É—Å—Ç–∏–º —Å–∏–º–≤–æ–ª–æ–º: {token_address}")
            
            # –°–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–∏–º–≤–æ–ª —á–µ—Ä–µ–∑ –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø—É–ª
            logging.info(f"üîç –°–ø—Ä–æ–±–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–∏–º–≤–æ–ª —á–µ—Ä–µ–∑ –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—É–ª—É...")
            token_info = await self.dex_client.get_token_info(chain, token_address, pool_id)
            
            if token_info and token_info.get('symbol'):
                symbol = token_info['symbol']
                trade['token_symbol'] = symbol
                logging.info(f"‚úÖ –°–∏–º–≤–æ–ª –∑–Ω–∞–π–¥–µ–Ω–æ —á–µ—Ä–µ–∑ –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é: {symbol}")
            else:
                logging.warning(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–∏–º–≤–æ–ª –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {token_address}")
                return False
        
        # –£–Ω–∏–∫–∞—î–º–æ –¥—É–±–ª—é–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–∫–∏
        trade_key = f"{chain}_{token_address}"
        current_time = time.time()
        
        if trade_key in self.last_processed:
            if current_time - self.last_processed[trade_key] < 600:  # 10 —Ö–≤–∏–ª–∏–Ω
                logging.debug(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –¥—É–±–ª—å –ø—É–ª—É: {symbol}")
                return False
        
        self.last_processed[trade_key] = current_time
        
        logging.info(f"üîç –û–±—Ä–æ–±–ª—è—é –ø—É–ª: {symbol} –Ω–∞ {chain} –∑ –æ–±—Å—è–≥–æ–º ${trade['amount_usd']:,.2f}")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ç–æ–∫–µ–Ω
        token_info = await self.dex_client.get_token_info(chain, token_address, pool_id)
        if not token_info:
            logging.warning(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ –¥–ª—è {symbol}")
            return False
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ç–æ–∫–µ–Ω –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –ø—ñ–¥ —Ñ—ñ–ª—å—Ç—Ä–∏
        if not self.token_filter.is_token_allowed(token_info):
            logging.info(f"‚è≠Ô∏è –¢–æ–∫–µ–Ω {symbol} –Ω–µ –ø—Ä–æ–π—à–æ–≤ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—é")
            return False
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–Ω–∏–π –Ω–∞ LBank
        lbank_price = await self.lbank_client.get_ticker_price(token_info['symbol'])
        if not lbank_price:
            logging.warning(f"‚ùå –¢–æ–∫–µ–Ω {symbol} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –Ω–∞ LBank")
            return False
        
        # –†–æ–∑–º—ñ—â—É—î–º–æ –æ—Ä–¥–µ—Ä
        order_price = round(lbank_price * (1 + Config.PRICE_PREMIUM), 6)
        order_amount = round(Config.ORDER_VOLUME / order_price, 8)
        
        logging.info(f"üõí –†–æ–∑–º—ñ—â—É—é –æ—Ä–¥–µ—Ä: {symbol} {order_amount} –ø–æ ${order_price:.6f}")
        
        order_result = await self.lbank_client.place_limit_order(
            token_info['symbol'],
            order_price,
            order_amount
        )
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
        await self.send_trade_notification(trade, token_info, lbank_price, order_price, order_result)
        
        logging.info(f"‚úÖ –ü—É–ª —É—Å–ø—ñ—à–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ: {symbol}")
        return True
        
    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø—É–ª—É: {e}")
        return False
    
    async def send_trade_notification(self, trade: Dict, token_info: Dict, 
                                    market_price: float, order_price: float, order_result: Dict):
        """–í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ —É–≥–æ–¥—É"""
        try:
            success = order_result.get('result', False)
            
            message = (
                f"üöÄ *–í–µ–ª–∏–∫–∏–π –ø—É–ª –≤–∏—è–≤–ª–µ–Ω–æ!*\n\n"
                f"üìä *–î–µ—Ç–∞–ª—ñ –ø—É–ª—É:*\n"
                f"‚Ä¢ –¢–æ–∫–µ–Ω: `{token_info['symbol']}`\n"
                f"‚Ä¢ –ú–µ—Ä–µ–∂–∞: `{trade['chain'].upper()}`\n"
                f"‚Ä¢ –û–±—Å—è–≥ 24h: `${trade['amount_usd']:,.2f}`\n"
                f"‚Ä¢ –¶—ñ–Ω–∞: `${trade['price']:.6f}`\n\n"
                f"üìà *–†–∏–Ω–∫–æ–≤—ñ –¥–∞–Ω—ñ:*\n"
                f"‚Ä¢ –ö–∞–ø—ñ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—è: `${token_info['market_cap']:,.0f}`\n"
                f"‚Ä¢ –û–±—Å—è–≥ 24h: `${token_info['volume_24h']:,.0f}`\n"
                f"‚Ä¢ LBank —Ü—ñ–Ω–∞: `${market_price:.6f}`\n"
                f"‚Ä¢ –¶—ñ–Ω–∞ –æ—Ä–¥–µ—Ä–∞: `${order_price:.6f}`\n"
                f"‚Ä¢ Premium: `{Config.PRICE_PREMIUM*100:.2f}%`\n\n"
                f"üõí *–û—Ä–¥–µ—Ä –Ω–∞ LBank:*\n"
                f"‚Ä¢ –°—Ç–∞—Ç—É—Å: `{'‚úÖ –£—Å–ø—ñ—à–Ω–æ' if success else '‚ùå –ü–æ–º–∏–ª–∫–∞'}`\n"
                f"‚Ä¢ –ß–∞—Å: `{datetime.now().strftime('%H:%M:%S')}`\n\n"
                f"üîó *[GeckoTerminal]({trade['dex_url']})*"
            )
            
            telegram_client.send_message(message, parse_mode="Markdown")
            
        except Exception as e:
            logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
arbitrage_bot = ArbitrageBot()

def send_telegram_command(command: str, chat_id: str = None):
    """–û–±—Ä–æ–±–∫–∞ Telegram –∫–æ–º–∞–Ω–¥"""
    try:
        if not chat_id:
            chat_id = Config.TELEGRAM_CHAT_ID
            
        if command == '/start' or command == '/help':
            help_text = (
                "ü§ñ *GeckoTerminal/LBank Arbitrage Bot*\n\n"
                "–¶–µ–π –±–æ—Ç —Å–∫–∞–Ω—É—î –≤–µ–ª–∏–∫—ñ –ø—É–ª–∏ –Ω–∞ Solana —Ç–∞ BSC:\n"
                "‚Ä¢ –ú–æ–Ω—ñ—Ç–æ—Ä–∏—Ç—å GeckoTerminal –¥–ª—è –ø—É–ª—ñ–≤ >$3000\n"
                "‚Ä¢ –§—ñ–ª—å—Ç—Ä—É—î —Ç–æ–∫–µ–Ω–∏ –∑–∞ –∫—Ä–∏—Ç–µ—Ä—ñ—è–º–∏\n"
                "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∫—É–ø—É—î –Ω–∞ LBank\n"
                "‚Ä¢ –¶—ñ–Ω–∞: +0.01% –¥–æ —Ä–∏–Ω–∫–æ–≤–æ—ó\n\n"
                "‚öôÔ∏è *–§—ñ–ª—å—Ç—Ä–∏:*\n"
                f"‚Ä¢ –ö–∞–ø—ñ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—è: ${Config.MIN_MARKET_CAP:,} - ${Config.MAX_MARKET_CAP:,}\n"
                f"‚Ä¢ –û–±—Å—è–≥: >${Config.MIN_VOLUME:,}/24h\n"
                f"‚Ä¢ –ú–µ—Ä–µ–∂—ñ: {', '.join(Config.ALLOWED_CHAINS).upper()}\n"
                f"‚Ä¢ –ú—ñ–Ω. –æ–±—Å—è–≥: ${Config.MIN_TRADE_AMOUNT}\n\n"
                "üìä *–ö–æ–º–∞–Ω–¥–∏:*\n"
                "/scan_start - –ü–æ—á–∞—Ç–∏ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è\n"
                "/scan_stop - –ó—É–ø–∏–Ω–∏—Ç–∏ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è\n"
                "/status - –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞"
            )
            telegram_client.send_message(help_text, parse_mode="Markdown")
            
        elif command == '/scan_start':
            if not arbitrage_bot.is_scanning:
                def start():
                    loop = asyncio.new_event_loop()
                    asyncio.set_event_loop(loop)
                    loop.run_until_complete(arbitrage_bot.start_auto_scan())
                thread = threading.Thread(target=start, daemon=True)
                thread.start()
                telegram_client.send_message("üîç –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è –∑–∞–ø—É—â–µ–Ω–æ! –®—É–∫–∞—é –≤–µ–ª–∏–∫—ñ –ø—É–ª–∏...")
            else:
                telegram_client.send_message("‚ö†Ô∏è –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è –≤–∂–µ –∑–∞–ø—É—â–µ–Ω–æ!")
                
        elif command == '/scan_stop':
            async def stop():
                await arbitrage_bot.stop_auto_scan()
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            loop.run_until_complete(stop())
            telegram_client.send_message("‚èπÔ∏è –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è –∑—É–ø–∏–Ω–µ–Ω–æ!")
            
        elif command == '/status':
            status_text = (
                "üìä *–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:*\n\n"
                f"‚Ä¢ –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è: {'‚úÖ –ê–∫—Ç–∏–≤–Ω–µ' if arbitrage_bot.is_scanning else '‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–µ'}\n"
                f"‚Ä¢ –ú–µ—Ä–µ–∂—ñ: {', '.join(Config.ALLOWED_CHAINS).upper()}\n"
                f"‚Ä¢ –û–±—Ä–æ–±–ª–µ–Ω–æ –ø—É–ª—ñ–≤: {len(arbitrage_bot.last_processed)}\n"
                f"‚Ä¢ –ú—ñ–Ω. –æ–±—Å—è–≥: ${Config.MIN_TRADE_AMOUNT}\n"
                f"‚Ä¢ –û–±—Å—è–≥ –æ—Ä–¥–µ—Ä–∞: ${Config.ORDER_VOLUME}\n\n"
                f"‚è∞ *–ß–∞—Å:* {datetime.now().strftime('%H:%M:%S')}"
            )
            telegram_client.send_message(status_text, parse_mode="Markdown")
            
    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∫–æ–º–∞–Ω–¥–∏: {e}")

def run_scanner():
    """–ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–µ—Ä–∞ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ"""
    async def start():
        await arbitrage_bot.start_auto_scan()
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π event loop –¥–ª—è –ø–æ—Ç–æ–∫—É
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    loop.run_until_complete(start())

if __name__ == "__main__":
    logging.info("üöÄ Arbitrage Bot –∑ GeckoTerminal API –∑–∞–ø—É—â–µ–Ω–æ!")
    logging.info(f"üì° –ú–µ—Ä–µ–∂—ñ: {Config.ALLOWED_CHAINS}")
    logging.info(f"üí∞ –ú—ñ–Ω. –æ–±—Å—è–≥: ${Config.MIN_TRADE_AMOUNT}")
    logging.info(f"üíµ –û–±—Å—è–≥ –æ—Ä–¥–µ—Ä–∞: ${Config.ORDER_VOLUME}")
    logging.info(f"üìä –ú—ñ–Ω. –∫–∞–ø—ñ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—è: ${Config.MIN_MARKET_CAP:,}")
    
    # –û—á–∏—â–∞—î–º–æ –≤—Å—ñ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ webhook
    try:
        logging.info("üßπ –û—á–∏—â–∞—é —Å—Ç–∞—Ä—ñ webhook...")
        requests.get(f"https://api.telegram.org/bot{Config.TELEGRAM_TOKEN}/deleteWebhook", timeout=5)
        time.sleep(2)
    except Exception as e:
        logging.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—á–∏—Å—Ç–∏—Ç–∏ webhook: {e}")
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Å–∫–∞–Ω–µ—Ä
    logging.info("üì° –ó–∞–ø—É—Å–∫–∞—é —Å–∫–∞–Ω–µ—Ä –ø—É–ª—ñ–≤...")
    scanner_thread = threading.Thread(target=run_scanner, daemon=True)
    scanner_thread.start()
    
    # –ü—Ä–æ—Å—Ç–∏–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥
    from flask import Flask, request, jsonify
    app = Flask(__name__)
    
    @app.route('/')
    def home():
        return "ü§ñ Arbitrage Bot is Running! Use /command endpoint to send commands.", 200
    
    @app.route('/command', methods=['POST'])
    def command_handler():
        try:
            data = request.get_json()
            command = data.get('command', '')
            chat_id = data.get('chat_id', Config.TELEGRAM_CHAT_ID)
            
            if command:
                send_telegram_command(command, chat_id)
                return jsonify({'status': 'success', 'message': 'Command processed'})
            else:
                return jsonify({'status': 'error', 'message': 'No command provided'}), 400
                
        except Exception as e:
            return jsonify({'status': 'error', 'message': str(e)}), 500
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ Flask
    port = int(os.environ.get('PORT', 10000))
    logging.info(f"üåê –ó–∞–ø—É—Å–∫–∞—é –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—ñ {port}")
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ Flask –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
    def run_flask():
        app.run(host='0.0.0.0', port=port, debug=False, use_reloader=False)
    
    flask_thread = threading.Thread(target=run_flask, daemon=True)
    flask_thread.start()
    
    # –ß–µ–∫–∞—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø–æ—Ç–æ–∫—ñ–≤
    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        logging.info("‚èπÔ∏è –ó—É–ø–∏–Ω–∫–∞ –±–æ—Ç–∞...")
        arbitrage_bot.is_scanning = False