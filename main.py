import pandas as pd
import numpy as np
import requests
import time
from datetime import datetime, timedelta
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.ensemble import IsolationForest
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
import asyncio
from flask import Flask, request, jsonify
import threading
import json
from typing import Dict, List, Optional, Tuple
import logging
import math
import os

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class AdvancedPumpDumpBot:
    def __init__(self, token: str):
        self.token = token
        self.app = Application.builder().token(token).build()
        self.flask_app = Flask(__name__)
        self.setup_flask_routes()
        
        # –ü–æ—Ä–æ–≥–∏ –¥–ª—è –ø–∞–º–ø—É
        self.pump_thresholds = {
            'volume_ratio': 3.0,  # –ó–º–µ–Ω—à–µ–Ω–æ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
            'price_change_1h': 5.0,
            'price_change_5m': 2.0,
            'rsi_threshold': 60,
            'buy_pressure_ratio': 1.2,
            'macd_signal': 0.0005
        }
        
        # –ü–æ—Ä–æ–≥–∏ –¥–ª—è –¥–∞–º–ø—É
        self.dump_thresholds = {
            'volume_ratio': 2.5,
            'price_change_1h': -4.0,
            'price_change_5m': -1.5,
            'rsi_threshold': 40,
            'sell_pressure_ratio': 1.5,
            'macd_signal': -0.0005
        }
        
        self.coin_blacklist = set()
        self.last_signals = {}
        self.whale_alert_cooldown = {}
        self.setup_handlers()
        
    def setup_flask_routes(self):
        @self.flask_app.route('/webhook', methods=['POST'])
        def webhook():
            data = request.json
            return self.handle_webhook(data)
            
        @self.flask_app.route('/stats', methods=['GET'])
        def stats():
            return jsonify({
                'last_signals': self.last_signals,
                'settings': {
                    'pump': self.pump_thresholds,
                    'dump': self.dump_thresholds
                }
            })
            
        @self.flask_app.route('/update_settings', methods=['POST'])
        def update_settings():
            data = request.json
            self.update_settings(data)
            return jsonify({'status': 'success'})
            
        @self.flask_app.route('/health', methods=['GET'])
        def health():
            return jsonify({'status': 'healthy', 'timestamp': datetime.now().isoformat()})
    
    def setup_handlers(self):
        self.app.add_handler(CommandHandler("start", self.start))
        self.app.add_handler(CommandHandler("scan", self.scan_command))
        self.app.add_handler(CommandHandler("settings", self.settings_command))
        self.app.add_handler(CommandHandler("blacklist", self.blacklist_command))
        self.app.add_handler(CommandHandler("debug", self.debug_command))
        self.app.add_handler(CallbackQueryHandler(self.button_handler))
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        keyboard = [
            [InlineKeyboardButton("üîç –°–∫–∞–Ω—É–≤–∞—Ç–∏ –∑–∞—Ä–∞–∑", callback_data="scan_now")],
            [InlineKeyboardButton("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", callback_data="settings")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
            [InlineKeyboardButton("üö´ –ß–æ—Ä–Ω–∏–π —Å–ø–∏—Å–æ–∫", callback_data="blacklist")],
            [InlineKeyboardButton("üêã Whale Alert", callback_data="whale_alert")],
            [InlineKeyboardButton("üìà –¢–û–ü —Å–∏–≥–Ω–∞–ª–∏", callback_data="top_signals")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "ü§ñ Advanced Pump & Dump Detect Bot\n\n"
            "–ú–æ–∂–ª–∏–≤–æ—Å—Ç—ñ:\n"
            "‚Ä¢ üöÄ –î–µ—Ç–µ–∫—Ü—ñ—è –ø–∞–º–ø—ñ–≤\n"
            "‚Ä¢ üìâ –î–µ—Ç–µ–∫—Ü—ñ—è –¥–∞–º–ø—ñ–≤\n"
            "‚Ä¢ üêã Whale transactions monitoring\n"
            "‚Ä¢ üìä RSI & MACD –∞–Ω–∞–ª—ñ–∑\n"
            "‚Ä¢ üîÑ Volume anomaly detection\n"
            "‚Ä¢ üåä Order book analysis\n"
            "‚Ä¢ ‚ö° Real-time alerts\n"
            "‚Ä¢ üåê Webhook integration",
            reply_markup=reply_markup
        )

    async def get_market_data(self, symbol: str) -> Optional[Dict]:
        try:
            logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–ª—è {symbol}")
            
            # –û—Å–Ω–æ–≤–Ω—ñ –¥–∞–Ω—ñ
            url = f"https://api.binance.com/api/v3/ticker/24hr?symbol={symbol}USDT"
            response = requests.get(url, timeout=10)
            data = response.json()
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø–æ–º–∏–ª–∫—É API
            if 'code' in data:
                logger.warning(f"API –ø–æ–º–∏–ª–∫–∞ –¥–ª—è {symbol}: {data}")
                return None
            
            # –ö–ª–∞–π–Ω—Å–∏ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º—ñ–≤
            timeframes = {
                '5m': '&interval=5m&limit=100',
                '1h': '&interval=1h&limit=50',
                '15m': '&interval=15m&limit=100'
            }
            
            klines_data = {}
            for tf, params in timeframes.items():
                klines_url = f"https://api.binance.com/api/v3/klines?symbol={symbol}USDT{params}"
                klines_response = requests.get(klines_url, timeout=10)
                klines_data[tf] = klines_response.json()
            
            # Order book data
            orderbook_url = f"https://api.binance.com/api/v3/depth?symbol={symbol}USDT&limit=10"
            orderbook_response = requests.get(orderbook_url, timeout=10)
            orderbook_data = orderbook_response.json()
            
            market_data = {
                'symbol': symbol,
                'price': float(data['lastPrice']),
                'volume': float(data['volume']),
                'price_change': float(data['priceChangePercent']),
                'high': float(data['highPrice']),
                'low': float(data['lowPrice']),
                'quote_volume': float(data['quoteVolume']),
                'klines': klines_data,
                'orderbook': orderbook_data
            }
            
            logger.info(f"–î–∞–Ω—ñ –æ—Ç—Ä–∏–º–∞–Ω—ñ –¥–ª—è {symbol}: price={market_data['price']}, volume={market_data['volume']}")
            return market_data
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–ª—è {symbol}: {e}")
            return None

    def calculate_rsi(self, prices: np.ndarray, period: int = 14) -> float:
        """–í–ª–∞—Å–Ω–∞ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è RSI"""
        if len(prices) < period + 1:
            return 50.0
        
        try:
            deltas = np.diff(prices)
            gains = np.where(deltas > 0, deltas, 0)
            losses = np.where(deltas < 0, -deltas, 0)
            
            avg_gain = np.mean(gains[-period:])
            avg_loss = np.mean(losses[-period:])
            
            if avg_loss == 0:
                return 100.0
            
            rs = avg_gain / avg_loss
            rsi = 100 - (100 / (1 + rs))
            
            return rsi
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É RSI: {e}")
            return 50.0

    def calculate_ema(self, data: np.ndarray, period: int) -> float:
        """–ï–∫—Å–ø–æ–Ω–µ–Ω—Ü—ñ–π–Ω–∞ –∫–æ–≤–∑–Ω–∞ —Å–µ—Ä–µ–¥–Ω—è"""
        if len(data) < period:
            return np.mean(data) if len(data) > 0 else 0
        
        try:
            weights = np.exp(np.linspace(-1., 0., period))
            weights /= weights.sum()
            
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–≥–æ—Ä—Ç–∫—É –¥–ª—è EMA
            ema = np.convolve(data, weights, mode='valid')
            return ema[-1] if len(ema) > 0 else np.mean(data)
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É EMA: {e}")
            return np.mean(data)

    def calculate_macd(self, prices: np.ndarray, fast_period: int = 12, slow_period: int = 26, signal_period: int = 9) -> float:
        """–í–ª–∞—Å–Ω–∞ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è MACD"""
        if len(prices) < slow_period:
            return 0.0
        
        try:
            fast_ema = self.calculate_ema(prices, fast_period)
            slow_ema = self.calculate_ema(prices, slow_period)
            macd_line = fast_ema - slow_ema
            
            return macd_line
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É MACD: {e}")
            return 0.0

    def calculate_bollinger_bands(self, prices: np.ndarray, period: int = 20, std_dev: int = 2) -> Tuple[float, float, float]:
        """–í–ª–∞—Å–Ω–∞ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è Bollinger Bands"""
        if len(prices) < period:
            return prices[-1], prices[-1], prices[-1]
        
        try:
            sma = np.mean(prices[-period:])
            std = np.std(prices[-period:])
            
            upper_band = sma + (std * std_dev)
            lower_band = sma - (std * std_dev)
            
            return upper_band, sma, lower_band
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É Bollinger Bands: {e}")
            return prices[-1], prices[-1], prices[-1]

    def calculate_sma(self, data: np.ndarray, period: int) -> float:
        """–ü—Ä–æ—Å—Ç–∞ –∫–æ–≤–∑–Ω–∞ —Å–µ—Ä–µ–¥–Ω—è"""
        if len(data) < period:
            return np.mean(data) if len(data) > 0 else 0
        
        try:
            return np.mean(data[-period:])
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É SMA: {e}")
            return np.mean(data)

    async def calculate_technical_indicators(self, klines_data: List) -> Dict:
        try:
            closes = np.array([float(x[4]) for x in klines_data])
            volumes = np.array([float(x[5]) for x in klines_data])
            
            # RSI
            rsi = self.calculate_rsi(closes)
            
            # MACD
            macd = self.calculate_macd(closes)
            
            # Bollinger Bands
            upper_bb, middle_bb, lower_bb = self.calculate_bollinger_bands(closes)
            bb_position = (closes[-1] - lower_bb) / (upper_bb - lower_bb) if upper_bb != lower_bb else 0.5
            
            # Volume SMA
            volume_sma = self.calculate_sma(volumes, 20)
            volume_ratio = volumes[-1] / volume_sma if volume_sma > 0 else 1
            
            # Price changes
            price_change_1h = ((closes[-1] - closes[-12]) / closes[-12]) * 100 if len(closes) >= 12 else 0
            price_change_5m = ((closes[-1] - closes[-2]) / closes[-2]) * 100 if len(closes) >= 2 else 0
            
            indicators = {
                'rsi': rsi,
                'macd': macd,
                'bb_position': bb_position,
                'volume_ratio': volume_ratio,
                'current_price': closes[-1],
                'price_5m_ago': closes[-2] if len(closes) >= 2 else closes[0],
                'price_1h_ago': closes[-12] if len(closes) >= 12 else closes[0],
                'price_change_1h': price_change_1h,
                'price_change_5m': price_change_5m
            }
            
            logger.debug(f"–Ü–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏: {indicators}")
            return indicators
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É —Ç–µ—Ö–Ω—ñ—á–Ω–∏—Ö —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä—ñ–≤: {e}")
            return {
                'rsi': 50.0,
                'macd': 0.0,
                'bb_position': 0.5,
                'volume_ratio': 1.0,
                'current_price': 0.0,
                'price_5m_ago': 0.0,
                'price_1h_ago': 0.0,
                'price_change_1h': 0.0,
                'price_change_5m': 0.0
            }

    async def detect_pump_pattern(self, market_data: Dict, tech_indicators: Dict) -> Dict:
        score = 0
        signals = []
        
        try:
            # Volume analysis
            volume_ratio = tech_indicators['volume_ratio']
            if volume_ratio > self.pump_thresholds['volume_ratio']:
                score += 0.3
                signals.append(f"Volume x{volume_ratio:.1f}")
            
            # Price momentum
            if tech_indicators['price_change_5m'] > self.pump_thresholds['price_change_5m']:
                score += 0.2
                signals.append(f"+{tech_indicators['price_change_5m']:.1f}% 5m")
            
            # RSI condition
            if tech_indicators['rsi'] > self.pump_thresholds['rsi_threshold']:
                score += 0.1
                signals.append(f"RSI {tech_indicators['rsi']:.1f}")
            
            # MACD condition
            if tech_indicators['macd'] > self.pump_thresholds['macd_signal']:
                score += 0.1
                signals.append(f"MACD {tech_indicators['macd']:.4f}")
            
            # Order book analysis
            ob_analysis = self.analyze_orderbook(market_data['orderbook'])
            if ob_analysis['buy_pressure'] > self.pump_thresholds['buy_pressure_ratio']:
                score += 0.2
                signals.append(f"Buy pressure {ob_analysis['buy_pressure']:.1f}")
            
            logger.info(f"Pump detection for {market_data['symbol']}: score={score}, signals={signals}")
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –¥–µ—Ç–µ–∫—Ü—ñ—ó –ø–∞–º–ø—É: {e}")
        
        return {'score': min(score, 1.0), 'signals': signals, 'confidence': 'high' if score > 0.6 else 'medium'}

    async def detect_dump_pattern(self, market_data: Dict, tech_indicators: Dict) -> Dict:
        score = 0
        signals = []
        
        try:
            # Volume analysis (selling volume)
            volume_ratio = tech_indicators['volume_ratio']
            if volume_ratio > self.dump_thresholds['volume_ratio']:
                score += 0.3
                signals.append(f"Sell volume x{volume_ratio:.1f}")
            
            # Price decline
            if tech_indicators['price_change_5m'] < self.dump_thresholds['price_change_5m']:
                score += 0.2
                signals.append(f"{tech_indicators['price_change_5m']:.1f}% 5m")
            
            # RSI condition (oversold)
            if tech_indicators['rsi'] < self.dump_thresholds['rsi_threshold']:
                score += 0.1
                signals.append(f"RSI {tech_indicators['rsi']:.1f}")
            
            # MACD condition
            if tech_indicators['macd'] < self.dump_thresholds['macd_signal']:
                score += 0.1
                signals.append(f"MACD {tech_indicators['macd']:.4f}")
            
            # Order book analysis (sell pressure)
            ob_analysis = self.analyze_orderbook(market_data['orderbook'])
            if ob_analysis['sell_pressure'] > self.dump_thresholds['sell_pressure_ratio']:
                score += 0.2
                signals.append(f"Sell pressure {ob_analysis['sell_pressure']:.1f}")
            
            logger.info(f"Dump detection for {market_data['symbol']}: score={score}, signals={signals}")
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –¥–µ—Ç–µ–∫—Ü—ñ—ó –¥–∞–º–ø—É: {e}")
        
        return {'score': min(score, 1.0), 'signals': signals, 'confidence': 'high' if score > 0.6 else 'medium'}

    def analyze_orderbook(self, orderbook: Dict) -> Dict:
        try:
            bids = np.array([float(bid[1]) for bid in orderbook['bids'][:5]])  # –¢–æ–ø 5 bid
            asks = np.array([float(ask[1]) for ask in orderbook['asks'][:5]])  # –¢–æ–ø 5 ask
            
            total_bids = np.sum(bids)
            total_asks = np.sum(asks)
            
            buy_pressure = total_bids / total_asks if total_asks > 0 else 1
            sell_pressure = total_asks / total_bids if total_bids > 0 else 1
            
            return {
                'buy_pressure': buy_pressure,
                'sell_pressure': sell_pressure,
                'imbalance': abs(total_bids - total_asks) / (total_bids + total_asks) if (total_bids + total_asks) > 0 else 0
            }
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É —Å—Ç–∞–∫–∞–Ω—É: {e}")
            return {
                'buy_pressure': 1.0,
                'sell_pressure': 1.0,
                'imbalance': 0.0
            }

    async def scan_top_coins(self, scan_type: str = 'both'):
        try:
            logger.info(f"–ü–æ—á–∞—Ç–æ–∫ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è —Ç–∏–ø—É: {scan_type}")
            
            response = requests.get("https://api.binance.com/api/v3/ticker/24hr", timeout=15)
            all_data = response.json()
            
            usdt_pairs = [x for x in all_data if x['symbol'].endswith('USDT')]
            sorted_by_volume = sorted(usdt_pairs, 
                                    key=lambda x: float(x['volume']), 
                                    reverse=True)[:20]  # –¢–æ–ø 20 –ø–æ –æ–±'—î–º—É
            
            logger.info(f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(sorted_by_volume)} USDT –ø–∞—Ä")
            
            results = {'pump': [], 'dump': []}
            
            for coin in sorted_by_volume:
                symbol = coin['symbol'].replace('USDT', '')
                if symbol in self.coin_blacklist:
                    continue
                    
                logger.info(f"–ê–Ω–∞–ª—ñ–∑ –º–æ–Ω–µ—Ç–∏: {symbol}")
                market_data = await self.get_market_data(symbol)
                if not market_data:
                    continue
                
                # –¢–µ—Ö–Ω—ñ—á–Ω—ñ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏
                tech_indicators = await self.calculate_technical_indicators(
                    market_data['klines']['5m']
                )
                
                # –î–µ—Ç–µ–∫—Ü—ñ—è –ø–∞–º–ø—É
                if scan_type in ['both', 'pump']:
                    pump_result = await self.detect_pump_pattern(market_data, tech_indicators)
                    if pump_result['score'] > 0.4:  # –ó–º–µ–Ω—à–µ–Ω–æ –ø–æ—Ä—ñ–≥ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
                        results['pump'].append({
                            'symbol': symbol,
                            'score': pump_result['score'],
                            'signals': pump_result['signals'],
                            'confidence': pump_result['confidence'],
                            'price': market_data['price'],
                            'volume': market_data['volume'],
                            'price_change_24h': market_data['price_change']
                        })
                        logger.info(f"–ó–Ω–∞–π–¥–µ–Ω–æ pump —Å–∏–≥–Ω–∞–ª –¥–ª—è {symbol}: {pump_result['score']:.2%}")
                
                # –î–µ—Ç–µ–∫—Ü—ñ—è –¥–∞–º–ø—É
                if scan_type in ['both', 'dump']:
                    dump_result = await self.detect_dump_pattern(market_data, tech_indicators)
                    if dump_result['score'] > 0.4:  # –ó–º–µ–Ω—à–µ–Ω–æ –ø–æ—Ä—ñ–≥ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
                        results['dump'].append({
                            'symbol': symbol,
                            'score': dump_result['score'],
                            'signals': dump_result['signals'],
                            'confidence': dump_result['confidence'],
                            'price': market_data['price'],
                            'volume': market_data['volume'],
                            'price_change_24h': market_data['price_change']
                        })
                        logger.info(f"–ó–Ω–∞–π–¥–µ–Ω–æ dump —Å–∏–≥–Ω–∞–ª –¥–ª—è {symbol}: {dump_result['score']:.2%}")
            
            # –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
            for key in results:
                results[key].sort(key=lambda x: x['score'], reverse=True)
            
            logger.info(f"–°–∫–∞–Ω—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ. Pump: {len(results['pump'])}, Dump: {len(results['dump'])}")
            return results
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è: {e}")
            return {'pump': [], 'dump': []}

    async def send_alert(self, context: ContextTypes.DEFAULT_TYPE, signal_data: Dict, signal_type: str):
        symbol = signal_data['symbol']
        
        if signal_type == 'pump':
            message = f"üöÄ –ü–û–¢–ï–ù–¶–Ü–ô–ù–ò–ô –ü–ê–ú–ü\n\n"
            emoji = "üöÄ"
        else:
            message = f"üìâ –ü–û–¢–ï–ù–¶–Ü–ô–ù–ò–ô –î–ê–ú–ü\n\n"
            emoji = "üìâ"
        
        message += f"{emoji} –ú–æ–Ω–µ—Ç–∞: {symbol}\n"
        message += f"üí∞ –¶—ñ–Ω–∞: ${signal_data['price']:.6f}\n"
        message += f"üìà 24h change: {signal_data['price_change_24h']:.1f}%\n"
        message += f"üìä –í–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å: {signal_data['confidence']}\n"
        message += f"‚ö° Score: {signal_data['score']:.2%}\n\n"
        message += "üì∂ –°–∏–≥–Ω–∞–ª–∏:\n"
        
        for signal in signal_data['signals'][:5]:
            message += f"‚Ä¢ {signal}\n"
        
        message += f"\n‚è∞ {datetime.now().strftime('%H:%M:%S')}"
        
        # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ —Å–∏–≥–Ω–∞–ª—É
        self.last_signals[symbol] = {
            'type': signal_type,
            'time': datetime.now().isoformat(),
            'data': signal_data
        }
        
        await context.bot.send_message(
            chat_id=context.job.chat_id,
            text=message,
            parse_mode='HTML'
        )

    async def scan_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è"""
        await update.message.reply_text("üîç –ó–∞–ø—É—Å–∫–∞—é —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è...")
        results = await self.scan_top_coins('both')
        
        message = "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è:\n\n"
        
        if not results['pump'] and not results['dump']:
            message += "‚ÑπÔ∏è –°–∏–≥–Ω–∞–ª—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞–±–æ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ –ø—ñ–∑–Ω—ñ—à–µ.\n"
            message += f"–ü–æ—Ç–æ—á–Ω—ñ –ø–æ—Ä–æ–≥–∏:\n"
            message += f"Pump: Volume > {self.pump_thresholds['volume_ratio']}x, Price change > {self.pump_thresholds['price_change_5m']}%\n"
            message += f"Dump: Volume > {self.dump_thresholds['volume_ratio']}x, Price change < {self.dump_thresholds['price_change_5m']}%"
        else:
            for signal_type in ['pump', 'dump']:
                if results[signal_type]:
                    message += f"{'üöÄ' if signal_type == 'pump' else 'üìâ'} {signal_type.upper()}:\n"
                    for i, signal in enumerate(results[signal_type][:5], 1):
                        message += f"{i}. {signal['symbol']} - {signal['score']:.2%} ({len(signal['signals'])} —Å–∏–≥–Ω–∞–ª—ñ–≤)\n"
                    message += "\n"
            
        await update.message.reply_text(message)

    async def settings_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å"""
        settings_msg = self.get_settings_message()
        await update.message.reply_text(settings_msg)

    async def blacklist_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è —á–æ—Ä–Ω–∏–º —Å–ø–∏—Å–∫–æ–º"""
        if context.args:
            coin = context.args[0].upper()
            if coin in self.coin_blacklist:
                self.coin_blacklist.remove(coin)
                await update.message.reply_text(f"‚úÖ {coin} –≤–∏–¥–∞–ª–µ–Ω–æ –∑ —á–æ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É")
            else:
                self.coin_blacklist.add(coin)
                await update.message.reply_text(f"‚úÖ {coin} –¥–æ–¥–∞–Ω–æ –¥–æ —á–æ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É")
        else:
            blacklist_msg = "üö´ –ß–æ—Ä–Ω–∏–π —Å–ø–∏—Å–æ–∫:\n" + "\n".join(self.coin_blacklist) if self.coin_blacklist else "–ß–æ—Ä–Ω–∏–π —Å–ø–∏—Å–æ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π"
            await update.message.reply_text(blacklist_msg)

    async def debug_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–µ–±–∞–≥—É"""
        await update.message.reply_text("üõ†Ô∏è –†–µ–∂–∏–º –¥–µ–±–∞–≥—É...")
        
        # –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –æ–¥–Ω—ñ—î—ó –º–æ–Ω–µ—Ç–∏
        test_symbol = "BTC"
        market_data = await self.get_market_data(test_symbol)
        
        if market_data:
            tech_indicators = await self.calculate_technical_indicators(market_data['klines']['5m'])
            
            message = f"üîß –î–µ–±–∞–≥ –¥–ª—è {test_symbol}:\n"
            message += f"–¶—ñ–Ω–∞: ${market_data['price']}\n"
            message += f"Volume ratio: {tech_indicators['volume_ratio']:.2f}\n"
            message += f"RSI: {tech_indicators['rsi']:.1f}\n"
            message += f"MACD: {tech_indicators['macd']:.6f}\n"
            message += f"5m change: {tech_indicators['price_change_5m']:.2f}%"
            
            await update.message.reply_text(message)
        else:
            await update.message.reply_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –¥–ª—è —Ç–µ—Å—Ç—É")

    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        
        if query.data == "scan_now":
            await query.edit_message_text("üîç –°–∫–∞–Ω—É—é —Ç–æ–ø –º–æ–Ω–µ—Ç–∏...")
            results = await self.scan_top_coins('both')
            
            message = "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è:\n\n"
            
            if not results['pump'] and not results['dump']:
                message += "‚ÑπÔ∏è –°–∏–≥–Ω–∞–ª—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ\n"
                message += "–°–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /debug –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ä–æ–±–æ—Ç–∏"
            else:
                for signal_type in ['pump', 'dump']:
                    if results[signal_type]:
                        message += f"{'üöÄ' if signal_type == 'pump' else 'üìâ'} {signal_type.upper()}:\n"
                        for i, signal in enumerate(results[signal_type][:3], 1):
                            message += f"{i}. {signal['symbol']} - {signal['score']:.2%}\n"
                        message += "\n"
                
            await query.edit_message_text(message)
            
        elif query.data == "settings":
            settings_msg = self.get_settings_message()
            await query.edit_message_text(settings_msg)
            
        elif query.data == "stats":
            stats_msg = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            stats_msg += f"–û—Å—Ç–∞–Ω–Ω—ñ —Å–∏–≥–Ω–∞–ª–∏: {len(self.last_signals)}\n"
            stats_msg += f"–ß–æ—Ä–Ω–∏–π —Å–ø–∏—Å–æ–∫: {len(self.coin_blacklist)} –º–æ–Ω–µ—Ç"
            await query.edit_message_text(stats_msg)
            
        elif query.data == "blacklist":
            blacklist_msg = "üö´ –ß–æ—Ä–Ω–∏–π —Å–ø–∏—Å–æ–∫:\n" + "\n".join(self.coin_blacklist) if self.coin_blacklist else "–ß–æ—Ä–Ω–∏–π —Å–ø–∏—Å–æ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π"
            await query.edit_message_text(blacklist_msg)
            
        elif query.data == "whale_alert":
            await query.edit_message_text("üêã Whale Alert —Ñ—É–Ω–∫—Ü—ñ—è –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ...")
            
        elif query.data == "top_signals":
            await query.edit_message_text("üìà –¢–û–ü —Å–∏–≥–Ω–∞–ª–∏ —Ñ—É–Ω–∫—Ü—ñ—è –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ...")

    def get_settings_message(self) -> str:
        msg = "‚öôÔ∏è –ü–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:\n\n"
        msg += "üöÄ Pump Detection:\n"
        for k, v in self.pump_thresholds.items():
            msg += f"  {k}: {v}\n"
        
        msg += "\nüìâ Dump Detection:\n"
        for k, v in self.dump_thresholds.items():
            msg += f"  {k}: {v}\n"
        
        return msg

    def run_flask(self):
        """–ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞"""
        port = int(os.environ.get('PORT', 5000))
        self.flask_app.run(host='0.0.0.0', port=port, debug=False, use_reloader=False)

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        # –ó–∞–ø—É—Å–∫ Flask –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
        flask_thread = threading.Thread(target=self.run_flask, daemon=True)
        flask_thread.start()
        
        print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π...")
        print("üåê Flask —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–∏–π")
        print("üìä –î–æ—Å—Ç—É–ø–Ω—ñ endpoints: /webhook, /stats, /update_settings, /health")
        print("üí¨ –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏: /start, /scan, /settings, /blacklist, /debug")
        
        # –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞
        self.app.run_polling()

# –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
if __name__ == "__main__":
    TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
    if not TOKEN:
        print("‚ùå –ü–æ–º–∏–ª–∫–∞: TELEGRAM_BOT_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è")
        print("‚ÑπÔ∏è –î–æ–¥–∞–π—Ç–µ TELEGRAM_BOT_TOKEN –¥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å Render")
        exit(1)
    
    bot = AdvancedPumpDumpBot(TOKEN)
    bot.run()