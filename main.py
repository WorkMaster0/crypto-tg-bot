import pandas as pd
import numpy as np
import ccxt
import asyncio
import time
from datetime import datetime, timedelta
import logging
from typing import Dict, List, Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
import talib
from scipy import stats
import warnings
warnings.filterwarnings('ignore')

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('profit_bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class ProfitFuturesBot:
    def __init__(self, token: str):
        self.token = token
        self.app = Application.builder().token(token).build()
        
        # –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±—ñ—Ä–∂—ñ
        self.exchange = ccxt.binance({
            'enableRateLimit': True,
            'options': {'defaultType': 'future'}
        })
        
        # –†–µ–∞–ª—å–Ω—ñ —Ç–æ—Ä–≥–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
        self.settings = {
            'risk_per_trade': 0.02,  # 2% —Ä–∏–∑–∏–∫ –Ω–∞ —É–≥–æ–¥—É
            'take_profit_ratio': 2.0,
            'max_open_positions': 3,
            'min_volume_usdt': 1000000,
            'min_volatility': 0.003,
            'ema_fast': 9,
            'ema_slow': 21,
            'rsi_period': 14,
            'atr_period': 14
        }
        
        # –ê–∫—Ç–∏–≤–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó
        self.positions = {}
        # –Ü—Å—Ç–æ—Ä—ñ—è —É–≥–æ–¥
        self.trade_history = []
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.performance = {
            'total_trades': 0,
            'winning_trades': 0,
            'total_profit': 0.0,
            'max_drawdown': 0.0,
            'current_balance': 10000.0  # –ü–æ—á–∞—Ç–∫–æ–≤–∏–π –±–∞–ª–∞–Ω—Å
        }
        
        self.setup_handlers()

    def setup_handlers(self):
        """–†–µ–∞–ª—å–Ω—ñ —Ç–æ—Ä–≥–æ–≤—ñ –∫–æ–º–∞–Ω–¥–∏"""
        handlers = [
            CommandHandler("start", self.start_command),
            CommandHandler("scan", self.scan_opportunities),
            CommandHandler("positions", self.show_positions),
            CommandHandler("balance", self.show_balance),
            CommandHandler("analysis", self.market_analysis),
            CommandHandler("settings", self.show_settings),
            CommandHandler("history", self.trade_history),
            CommandHandler("signals", self.live_signals),
            CallbackQueryHandler(self.handle_callback)
        ]
        
        for handler in handlers:
            self.app.add_handler(handler)

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°—Ç–∞—Ä—Ç–æ–≤–∞ –∫–æ–º–∞–Ω–¥–∞ –∑ —Ä–µ–∞–ª—å–Ω–∏–º–∏ –æ–ø—Ü—ñ—è–º–∏"""
        keyboard = [
            [InlineKeyboardButton("üîç –°–∫–∞–Ω—É–≤–∞—Ç–∏ —Ä–∏–Ω–æ–∫", callback_data="scan"),
             InlineKeyboardButton("üìä –ú–æ—ó –ø–æ–∑–∏—Ü—ñ—ó", callback_data="positions")],
            [InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="balance"),
             InlineKeyboardButton("üìà –ê–Ω–∞–ª—ñ–∑ —Ä–∏–Ω–∫—É", callback_data="analysis")],
            [InlineKeyboardButton("‚ö° –ñ–∏–≤—ñ —Å–∏–≥–Ω–∞–ª–∏", callback_data="signals"),
             InlineKeyboardButton("üìã –Ü—Å—Ç–æ—Ä—ñ—è —É–≥–æ–¥", callback_data="history")],
            [InlineKeyboardButton("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", callback_data="settings")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üí∞ **PROFIT FUTURES BOT**\n\n"
            "–†–µ–∞–ª—å–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫ –¥–ª—è –∑–∞—Ä–æ–±—ñ—Ç–∫—É –Ω–∞ —Ñ'—é—á–µ—Ä—Å–∞—Ö\n\n"
            "üìä *–ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å:*\n"
            f"‚Ä¢ –ë–∞–ª–∞–Ω—Å: ${self.performance['current_balance']:,.2f}\n"
            f"‚Ä¢ –£–≥–æ–¥: {self.performance['total_trades']}\n"
            f"‚Ä¢ –ü—Ä–∏–±—É—Ç–æ–∫: ${self.performance['total_profit']:,.2f}\n"
            f"‚Ä¢ –í—ñ–¥–∫—Ä–∏—Ç–æ –ø–æ–∑–∏—Ü—ñ–π: {len(self.positions)}\n\n"
            "üéØ *–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:*",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

    async def scan_opportunities(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–∫–∞–Ω—É–≤–∞–Ω–Ω—è —Ä–∏–Ω–∫—É –Ω–∞ —Ä–µ–∞–ª—å–Ω—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ"""
        try:
            msg = await update.message.reply_text("üîç –°–∫–∞–Ω—É—é —Ä–∏–Ω–æ–∫ –¥–ª—è –∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –ø—Ä–∏–±—É—Ç–∫–æ–≤–∏—Ö —É–≥–æ–¥...")
            
            symbols = ['BTC/USDT', 'ETH/USDT', 'BNB/USDT', 'SOL/USDT', 'XRP/USDT']
            opportunities = []
            
            for symbol in symbols:
                opportunity = await self.analyze_symbol(symbol)
                if opportunity and opportunity['score'] >= 7:
                    opportunities.append(opportunity)
            
            if opportunities:
                opportunities.sort(key=lambda x: x['score'], reverse=True)
                
                response = "üéØ **–ù–ê–ô–ö–†–ê–©–Ü –û–ü–û–†–¢–£–ù–Ü–¢–ï–¢–ò:**\n\n"
                
                for i, opp in enumerate(opportunities[:3], 1):
                    response += f"{i}. **{opp['symbol']}** - –û—Ü—ñ–Ω–∫–∞: {opp['score']}/10\n"
                    response += f"   üìà –ù–∞–ø—Ä—è–º: {opp['direction']}\n"
                    response += f"   üí∞ –ü–æ—Ç–µ–Ω—Ü—ñ–∞–ª: {opp['potential']:.2f}%\n"
                    response += f"   ‚ö° –í—ñ—Ä–æ–≥—ñ–¥–Ω—ñ—Å—Ç—å: {opp['probability']:.0%}\n"
                    response += f"   üìä –û–±'—î–º: ${opp['volume']:,.0f}\n\n"
                
                response += "üîî *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è:* –£–≤–∞–∂–Ω–æ –º–æ–Ω—ñ—Ç–æ—Ä—å—Ç–µ —Ü—ñ –∞–∫—Ç–∏–≤–∏"
                await msg.edit_text(response, parse_mode='Markdown')
            else:
                await msg.edit_text("üìâ –ù–∞—Ä–∞–∑—ñ —Å–∏–ª—å–Ω–∏—Ö –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ß–µ–∫–∞–π—Ç–µ –∫—Ä–∞—â–∏—Ö —É–º–æ–≤.")
                
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è: {e}")
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è —Ä–∏–Ω–∫—É")

    async def analyze_symbol(self, symbol: str) -> Optional[Dict]:
        """–†–µ–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ —Å–∏–º–≤–æ–ª—É"""
        try:
            # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö
            ohlcv = await self.get_ohlcv(symbol, '15m', 100)
            if not ohlcv or len(ohlcv) < 50:
                return None
            
            closes = np.array([x[4] for x in ohlcv])
            highs = np.array([x[2] for x in ohlcv])
            lows = np.array([x[3] for x in ohlcv])
            volumes = np.array([x[5] for x in ohlcv])
            
            # –¢–µ—Ö–Ω—ñ—á–Ω—ñ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏
            ema_fast = talib.EMA(closes, self.settings['ema_fast'])
            ema_slow = talib.EMA(closes, self.settings['ema_slow'])
            rsi = talib.RSI(closes, self.settings['rsi_period'])
            atr = talib.ATR(highs, lows, closes, self.settings['atr_period'])
            
            if any(np.isnan([ema_fast[-1], ema_slow[-1], rsi[-1], atr[-1]])):
                return None
            
            # –ê–Ω–∞–ª—ñ–∑ —Ç—Ä–µ–Ω–¥—É
            trend_strength = self.calculate_trend_strength(closes)
            volume_analysis = self.analyze_volume(volumes)
            
            # –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –Ω–∞–ø—Ä—è–º–∫—É
            if ema_fast[-1] > ema_slow[-1] and rsi[-1] > 50:
                direction = "LONG"
                probability = min(rsi[-1] / 100, 0.85)
            elif ema_fast[-1] < ema_slow[-1] and rsi[-1] < 50:
                direction = "SHORT"
                probability = min((100 - rsi[-1]) / 100, 0.85)
            else:
                return None
            
            # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –æ—Ü—ñ–Ω–∫–∏
            score = self.calculate_score(
                trend_strength, volume_analysis, probability, 
                np.mean(volumes[-5:]), atr[-1]
            )
            
            return {
                'symbol': symbol,
                'direction': direction,
                'score': score,
                'probability': probability,
                'potential': atr[-1] / closes[-1] * 100 * 3,  # 3x ATR
                'volume': np.mean(volumes[-5:])
            }
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É {symbol}: {e}")
            return None

    def calculate_trend_strength(self, prices: np.ndarray) -> float:
        """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Å–∏–ª–∏ —Ç—Ä–µ–Ω–¥—É"""
        if len(prices) < 20:
            return 0.5
        
        x = np.arange(len(prices))
        slope, _, r_value, _, _ = stats.linregress(x, prices)
        return abs(r_value) * (1 if slope > 0 else -1)

    def analyze_volume(self, volumes: np.ndarray) -> float:
        """–ê–Ω–∞–ª—ñ–∑ –æ–±'—î–º—ñ–≤"""
        if len(volumes) < 20:
            return 0.5
        
        current_volume = volumes[-1]
        avg_volume = np.mean(volumes[:-5])
        return min(current_volume / avg_volume, 2.0)

    def calculate_score(self, trend: float, volume: float, probability: float, 
                      avg_volume: float, atr: float) -> int:
        """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∑–∞–≥–∞–ª—å–Ω–æ—ó –æ—Ü—ñ–Ω–∫–∏"""
        # –í–∞–≥–∏ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ñ–∞–∫—Ç–æ—Ä—ñ–≤
        weights = {
            'trend': 0.3,
            'volume': 0.25,
            'probability': 0.25,
            'liquidity': 0.1,
            'volatility': 0.1
        }
        
        # –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è —Ñ–∞–∫—Ç–æ—Ä—ñ–≤
        trend_score = abs(trend) * 10
        volume_score = min(volume, 2.0) * 5
        probability_score = probability * 10
        liquidity_score = min(avg_volume / 1000000, 2.0) * 5
        volatility_score = min(atr * 1000, 2.0) * 5
        
        # –ó–∞–≥–∞–ª—å–Ω–∞ –æ—Ü—ñ–Ω–∫–∞
        total_score = (
            trend_score * weights['trend'] +
            volume_score * weights['volume'] +
            probability_score * weights['probability'] +
            liquidity_score * weights['liquidity'] +
            volatility_score * weights['volatility']
        )
        
        return min(int(total_score), 10)

    async def show_positions(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó"""
        if not self.positions:
            await update.message.reply_text("üì≠ –ù–µ–º–∞—î –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –ø–æ–∑–∏—Ü—ñ–π")
            return
        
        response = "üìä **–ü–û–¢–û–ß–ù–Ü –ü–û–ó–ò–¶–Ü–á:**\n\n"
        total_pnl = 0
        
        for symbol, position in self.positions.items():
            pnl = (position['current_price'] - position['entry_price']) * position['size'] * (
                1 if position['direction'] == 'LONG' else -1
            )
            total_pnl += pnl
            
            response += f"üéØ **{symbol}** - {position['direction']}\n"
            response += f"   üìà –í—Ö—ñ–¥: ${position['entry_price']:.2f}\n"
            response += f"   üìä –ü–æ—Ç–æ—á–Ω–∞: ${position['current_price']:.2f}\n"
            response += f"   üìè –†–æ–∑–º—ñ—Ä: {position['size']:.3f}\n"
            response += f"   üí∞ PnL: ${pnl:.2f} ({pnl/position['entry_price']/position['size']*100:.2f}%)\n\n"
        
        response += f"üìà **–ó–∞–≥–∞–ª—å–Ω–∏–π PnL: ${total_pnl:.2f}**"
        await update.message.reply_text(response, parse_mode='Markdown')

    async def show_balance(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç–∏ –±–∞–ª–∞–Ω—Å —Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        response = (
            "üí∞ **–ë–ê–õ–ê–ù–° –¢–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê:**\n\n"
            f"üìä –ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å: ${self.performance['current_balance']:,.2f}\n"
            f"üìà –£—Å—å–æ–≥–æ —É–≥–æ–¥: {self.performance['total_trades']}\n"
            f"‚úÖ –í–∏–≥—Ä–∞—à–Ω–∏—Ö: {self.performance['winning_trades']}\n"
            f"üìâ –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø—ñ—Ö—É: {self.performance['winning_trades']/max(self.performance['total_trades'],1)*100:.1f}%\n"
            f"üí∞ –ó–∞–≥–∞–ª—å–Ω–∏–π –ø—Ä–∏–±—É—Ç–æ–∫: ${self.performance['total_profit']:,.2f}\n"
            f"‚ö° –ú–∞–∫—Å. –ø—Ä–æ—Å—ñ–¥–∞–Ω–Ω—è: {self.performance['max_drawdown']:.2f}%\n\n"
            "üéØ *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–Ω–æ–≤–ª—é—î—Ç—å—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ*"
        )
        await update.message.reply_text(response, parse_mode='Markdown')

    async def market_analysis(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ì–ª–∏–±–∏–Ω–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ —Ä–∏–Ω–∫—É"""
        try:
            msg = await update.message.reply_text("üìà –ü—Ä–æ–≤–æ–¥–∂—É –≥–ª–∏–±–∏–Ω–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ —Ä–∏–Ω–∫—É...")
            
            analysis = await self.get_market_analysis()
            
            response = "üìä **–ê–ù–ê–õ–Ü–ó –†–ò–ù–ö–£:**\n\n"
            response += f"üìà –ó–∞–≥–∞–ª—å–Ω–∏–π —Ç—Ä–µ–Ω–¥: {analysis['overall_trend']}\n"
            response += f"‚ö° –í–æ–ª–∞—Ç–∏–ª—å–Ω—ñ—Å—Ç—å: {analysis['volatility']}\n"
            response += f"üìä –û–±'—î–º–∏: {analysis['volume_status']}\n"
            response += f"üéØ –ù–∞–π—Å–∏–ª—å–Ω—ñ—à—ñ –∞–∫—Ç–∏–≤–∏: {', '.join(analysis['strong_assets'][:3])}\n\n"
            
            response += "üí° **–†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–á:**\n"
            for recommendation in analysis['recommendations']:
                response += f"‚Ä¢ {recommendation}\n"
            
            await msg.edit_text(response, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É —Ä–∏–Ω–∫—É: {e}")
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É —Ä–∏–Ω–∫—É")

    async def get_market_analysis(self) -> Dict:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ –∞–Ω–∞–ª—ñ–∑ —Ä–∏–Ω–∫—É"""
        symbols = ['BTC/USDT', 'ETH/USDT', 'BNB/USDT', 'SOL/USDT', 'XRP/USDT']
        trends = []
        volatilities = []
        volumes = []
        strong_assets = []
        
        for symbol in symbols:
            try:
                ohlcv = await self.get_ohlcv(symbol, '1h', 50)
                if ohlcv:
                    closes = np.array([x[4] for x in ohlcv])
                    price_change = (closes[-1] - closes[0]) / closes[0] * 100
                    trends.append(price_change)
                    
                    volatility = np.std(np.diff(closes) / closes[:-1]) * 100
                    volatilities.append(volatility)
                    
                    avg_volume = np.mean([x[5] for x in ohlcv[-20:]])
                    volumes.append(avg_volume)
                    
                    if abs(price_change) > 5:
                        strong_assets.append(symbol)
            except:
                continue
        
        overall_trend = "–ë–ò–ß–ò–ô" if np.mean(trends) > 0.5 else "–ú–ï–î–í–ï–ñ–ò–ô" if np.mean(trends) < -0.5 else "–ù–ï–ô–¢–†–ê–õ–¨–ù–ò–ô"
        
        return {
            'overall_trend': overall_trend,
            'volatility': "–í–ò–°–û–ö–ê" if np.mean(volatilities) > 0.02 else "–°–ï–†–ï–î–ù–Ø" if np.mean(volatilities) > 0.01 else "–ù–ò–ó–¨–ö–ê",
            'volume_status': "–í–ò–°–û–ö–ò–ô" if np.mean(volumes) > 5000000 else "–°–ï–†–ï–î–ù–Ü–ô" if np.mean(volumes) > 1000000 else "–ù–ò–ó–¨–ö–ò–ô",
            'strong_assets': strong_assets,
            'recommendations': [
                "–£–≤–∞–≥–∞ –¥–æ —Ä–∏–∑–∏–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç—É",
                "–î–∏–≤–µ—Ä—Å–∏—Ñ—ñ–∫—É–π—Ç–µ –ø–æ—Ä—Ç—Ñ–µ–ª—å",
                "–°–ª—ñ–¥–∫—É–π—Ç–µ –∑–∞ –æ–±'—î–º–∞–º–∏"
            ]
        }

    async def live_signals(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ñ–∏–≤—ñ —Ç–æ—Ä–≥–æ–≤—ñ —Å–∏–≥–Ω–∞–ª–∏"""
        try:
            msg = await update.message.reply_text("‚ö° –®—É–∫–∞—é –∂–∏–≤—ñ —Ç–æ—Ä–≥–æ–≤—ñ —Å–∏–≥–Ω–∞–ª–∏...")
            
            signals = await self.generate_signals()
            
            if signals:
                response = "üéØ **–ñ–ò–í–Ü –°–ò–ì–ù–ê–õ–ò:**\n\n"
                
                for signal in signals[:5]:
                    response += f"üîî **{signal['symbol']}** - {signal['direction']}\n"
                    response += f"   üí∞ –¶—ñ–Ω–∞: ${signal['price']:.2f}\n"
                    response += f"   üéØ –°—Ç–æ–ø: ${signal['stop_loss']:.2f}\n"
                    response += f"   üìà –¢–µ–π–∫: ${signal['take_profit']:.2f}\n"
                    response += f"   ‚ö° –°–∏–ª–∞: {signal['strength']}/10\n\n"
                
                await msg.edit_text(response, parse_mode='Markdown')
            else:
                await msg.edit_text("üìâ –ù–∞—Ä–∞–∑—ñ —Å–∏–ª—å–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å–∏–≥–Ω–∞–ª—ñ–≤: {e}")
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Å–∏–≥–Ω–∞–ª—ñ–≤")

    async def generate_signals(self) -> List[Dict]:
        """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–æ—Ä–≥–æ–≤–∏—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤"""
        symbols = ['BTC/USDT', 'ETH/USDT', 'BNB/USDT']
        signals = []
        
        for symbol in symbols:
            try:
                ohlcv = await self.get_ohlcv(symbol, '5m', 50)
                if not ohlcv:
                    continue
                
                closes = np.array([x[4] for x in ohlcv])
                current_price = closes[-1]
                
                # –ü—Ä–æ—Å—Ç–∞ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—è –Ω–∞ –æ—Å–Ω–æ–≤—ñ EMA
                ema9 = talib.EMA(closes, 9)
                ema21 = talib.EMA(closes, 21)
                
                if len(ema9) < 2 or len(ema21) < 2:
                    continue
                
                if ema9[-1] > ema21[-1] and ema9[-2] <= ema21[-2]:
                    # BUY signal
                    atr = talib.ATR(
                        np.array([x[2] for x in ohlcv]),
                        np.array([x[3] for x in ohlcv]),
                        closes,
                        14
                    )[-1]
                    
                    signals.append({
                        'symbol': symbol,
                        'direction': 'BUY',
                        'price': current_price,
                        'stop_loss': current_price - 2 * atr,
                        'take_profit': current_price + 4 * atr,
                        'strength': 7
                    })
                    
                elif ema9[-1] < ema21[-1] and ema9[-2] >= ema21[-2]:
                    # SELL signal
                    atr = talib.ATR(
                        np.array([x[2] for x in ohlcv]),
                        np.array([x[3] for x in ohlcv]),
                        closes,
                        14
                    )[-1]
                    
                    signals.append({
                        'symbol': symbol,
                        'direction': 'SELL',
                        'price': current_price,
                        'stop_loss': current_price + 2 * atr,
                        'take_profit': current_price - 4 * atr,
                        'strength': 7
                    })
                    
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Å–∏–≥–Ω–∞–ª—É –¥–ª—è {symbol}: {e}")
                continue
        
        return signals

    async def trade_history(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–Ü—Å—Ç–æ—Ä—ñ—è —É–≥–æ–¥"""
        if not self.trade_history:
            await update.message.reply_text("üìã –Ü—Å—Ç–æ—Ä—ñ—è —É–≥–æ–¥ –ø–æ—Ä–æ–∂–Ω—è")
            return
        
        response = "üìã **–û–°–¢–ê–ù–ù–Ü –£–ì–û–î–ò:**\n\n"
        
        for trade in self.trade_history[-10:]:
            profit_color = "üü¢" if trade['profit'] >= 0 else "üî¥"
            response += f"{profit_color} {trade['symbol']} {trade['direction']}\n"
            response += f"   üìÖ {trade['time']}\n"
            response += f"   üí∞ –ü—Ä–∏–±—É—Ç–æ–∫: ${trade['profit']:.2f}\n"
            response += f"   üìä –†–æ–∑–º—ñ—Ä: {trade['size']:.3f}\n\n"
        
        await update.message.reply_text(response, parse_mode='Markdown')

    async def show_settings(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"""
        response = (
            "‚öôÔ∏è **–ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø –¢–û–†–ì–Ü–í–õ–Ü:**\n\n"
            f"üìâ –†–∏–∑–∏–∫ –Ω–∞ —É–≥–æ–¥—É: {self.settings['risk_per_trade']*100:.1f}%\n"
            f"üéØ Take Profit/Stop Loss: {self.settings['take_profit_ratio']:.1f}\n"
            f"üìä –ú–∞–∫—Å. –ø–æ–∑–∏—Ü—ñ–π: {self.settings['max_open_positions']}\n"
            f"üìà –ú—ñ–Ω. –æ–±'—î–º: ${self.settings['min_volume_usdt']:,.0f}\n"
            f"‚ö° –ú—ñ–Ω. –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ñ—Å—Ç—å: {self.settings['min_volatility']*100:.1f}%\n\n"
            "üîß *–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω—ñ –¥–ª—è –±–µ–∑–ø–µ—á–Ω–æ—ó —Ç–æ—Ä–≥—ñ–≤–ª—ñ*"
        )
        await update.message.reply_text(response, parse_mode='Markdown')

    async def get_ohlcv(self, symbol: str, timeframe: str = '15m', limit: int = 100) -> Optional[List]:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ OHLCV –¥–∞–Ω—ñ"""
        try:
            ohlcv = await asyncio.get_event_loop().run_in_executor(
                None, lambda: self.exchange.fetch_ohlcv(symbol, timeframe, limit)
            )
            return ohlcv
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–ª—è {symbol}: {e}")
            return None

    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–Ω–∏–∫ callback"""
        query = update.callback_query
        await query.answer()
        
        try:
            if query.data == "scan":
                await self.scan_opportunities(query, context)
            elif query.data == "positions":
                await self.show_positions(query, context)
            elif query.data == "balance":
                await self.show_balance(query, context)
            elif query.data == "analysis":
                await self.market_analysis(query, context)
            elif query.data == "signals":
                await self.live_signals(query, context)
            elif query.data == "history":
                await self.trade_history(query, context)
            elif query.data == "settings":
                await self.show_settings(query, context)
                
        except Exception as e:
            await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Ç—É")

    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞—é Profit Futures Bot...")
            await self.app.initialize()
            await self.app.start()
            await self.app.updater.start_polling()
            
            logger.info("‚úÖ –ë–æ—Ç —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ!")
            
            # –§–æ–Ω–æ–≤–∏–π –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥
            asyncio.create_task(self.background_monitoring())
            
            while True:
                await asyncio.sleep(3600)
                
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É: {e}")
            raise

    async def background_monitoring(self):
        """–§–æ–Ω–æ–≤–∏–π –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —Ä–∏–Ω–∫—É"""
        while True:
            try:
                # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ü—ñ–Ω –¥–ª—è –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –ø–æ–∑–∏—Ü—ñ–π
                for symbol in list(self.positions.keys()):
                    try:
                        ticker = await asyncio.get_event_loop().run_in_executor(
                            None, lambda: self.exchange.fetch_ticker(symbol)
                        )
                        if ticker:
                            self.positions[symbol]['current_price'] = ticker['last']
                    except:
                        continue
                
                # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —É–º–æ–≤ –¥–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ–π
                await self.check_exit_conditions()
                
                await asyncio.sleep(60)
                
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É: {e}")
                await asyncio.sleep(30)

    async def check_exit_conditions(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —É–º–æ–≤ –¥–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ–π"""
        # –†–µ–∞–ª—ñ–∑–∞—Ü—ñ—è –ª–æ–≥—ñ–∫–∏ –∑–∞–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ–π
        pass

async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    try:
        BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
        if not BOT_TOKEN:
            logger.error("–í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å TELEGRAM_BOT_TOKEN")
            return
        
        bot = ProfitFuturesBot(BOT_TOKEN)
        await bot.run()
        
    except KeyboardInterrupt:
        logger.info("–ó—É–ø–∏–Ω–∫–∞ –±–æ—Ç–∞...")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")

if __name__ == '__main__':
    asyncio.run(main())