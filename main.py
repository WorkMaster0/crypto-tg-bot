import os
import pandas as pd
import numpy as np
import ccxt
import asyncio
import time
from datetime import datetime, timedelta
import logging
from typing import Dict, List, Optional, Tuple
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
import talib
from scipy import stats, signal
import warnings
warnings.filterwarnings('ignore')

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('vwmc_bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class VWMCStrategyBot:
    def __init__(self, token: str):
        self.token = token
        self.app = Application.builder().token(token).build()
        
        # –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±—ñ—Ä–∂—ñ
        self.exchange = ccxt.binance({
            'enableRateLimit': True,
            'options': {'defaultType': 'future'}
        })
        
        # –£–Ω—ñ–∫–∞–ª—å–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ VWMC —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó
        self.vwmc_params = {
            'volume_weight_period': 21,
            'momentum_window': 14,
            'convergence_threshold': 0.85,
            'divergence_sensitivity': 1.5,
            'liquidity_zone_depth': 0.003,
            'entry_confidence_min': 0.7,
            'trend_filter_strength': 0.6,
            'volatility_adjustment': True,
            'dynamic_position_sizing': True
        }
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó
        self.strategy_stats = {
            'total_signals': 0,
            'successful_signals': 0,
            'avg_profit_per_trade': 0.0,
            'max_runup': 0.0,
            'max_drawdown': 0.0,
            'sharpe_ratio': 0.0,
            'win_rate': 0.0,
            'profit_factor': 0.0
        }
        
        # –Ü—Å—Ç–æ—Ä–∏—á–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
        self.historical_data = {}
        self.pattern_recognition = {}
        
        self.setup_handlers()
        logger.info("VWMC Strategy Bot —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")

    def setup_handlers(self):
        """–£–Ω—ñ–∫–∞–ª—å–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è VWMC —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó"""
        handlers = [
            CommandHandler("start", self.start_command),
            CommandHandler("vwmc_scan", self.vwmc_scan_command),
            CommandHandler("volume_analysis", self.volume_analysis_command),
            CommandHandler("momentum_matrix", self.momentum_matrix_command),
            CommandHandler("liquidity_map", self.liquidity_map_command),
            CommandHandler("pattern_recognition", self.pattern_recognition_command),
            CommandHandler("backtest_results", self.backtest_results_command),
            CommandHandler("market_insights", self.market_insights_command),
            CommandHandler("risk_assessment", self.risk_assessment_command),
            CommandHandler("performance", self.performance_command),
            CallbackQueryHandler(self.handle_callback)
        ]
        
        for handler in handlers:
            self.app.add_handler(handler)

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°—Ç–∞—Ä—Ç–æ–≤–∞ –∫–æ–º–∞–Ω–¥–∞ –∑ VWMC —Å—Ç—Ä–∞—Ç–µ–≥—ñ—î—é"""
        keyboard = [
            [InlineKeyboardButton("üîç VWMC –°–ö–ê–ù", callback_data="vwmc_scan"),
             InlineKeyboardButton("üìä –ê–ù–ê–õ–Ü–ó –û–ë'–Ñ–ú–Ü–í", callback_data="volume_analysis")],
            [InlineKeyboardButton("‚ö° –ú–û–ú–ï–ù–¢–£–ú –ú–ê–¢–†–ò–¶–Ø", callback_data="momentum_matrix"),
             InlineKeyboardButton("üí∞ –ö–ê–†–¢–ê –õ–Ü–ö–í–Ü–î–ù–û–°–¢–Ü", callback_data="liquidity_map")],
            [InlineKeyboardButton("üéØ –†–û–ó–ü–Ü–ó–ù–ê–í–ê–ù–ù–Ø –ü–ê–¢–¢–ï–†–ù–Ü–í", callback_data="pattern_recognition"),
             InlineKeyboardButton("üìà –ë–ï–ö–¢–ï–°–¢", callback_data="backtest_results")],
            [InlineKeyboardButton("üí° –Ü–ù–°–ê–ô–¢–ò –†–ò–ù–ö–£", callback_data="market_insights"),
             InlineKeyboardButton("‚ö†Ô∏è –û–¶–Ü–ù–ö–ê –†–ò–ó–ò–ö–Ü–í", callback_data="risk_assessment")],
            [InlineKeyboardButton("üìä –ü–†–û–î–£–ö–¢–ò–í–ù–Ü–°–¢–¨", callback_data="performance")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üöÄ **VWMC STRATEGY BOT**\n\n"
            "üéØ *Volume-Weighted Momentum Convergence*\n"
            "–£–Ω—ñ–∫–∞–ª—å–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—è –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∞–Ω–∞–ª—ñ–∑—É —ñ—Å—Ç–æ—Ä—ñ—ó —Ä–∏–Ω–∫—É\n\n"
            "üìä *–ö–ª—é—á–æ–≤—ñ –ø–µ—Ä–µ–≤–∞–≥–∏:*\n"
            "‚Ä¢ ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –ø–∞—Ç—Ç–µ—Ä–Ω—ñ–≤\n"
            "‚Ä¢ üìà Weighted Volume Analysis\n"
            "‚Ä¢ ‚ö° Momentum Convergence Detection\n"
            "‚Ä¢ üí∞ Liquidity Zone Mapping\n"
            "‚Ä¢ üéØ High-Probability Entries\n\n"
            "üîÆ *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó:*\n"
            f"‚Ä¢ Win Rate: {self.strategy_stats['win_rate']:.1f}%\n"
            f"‚Ä¢ Profit Factor: {self.strategy_stats['profit_factor']:.2f}\n"
            f"‚Ä¢ Sharpe Ratio: {self.strategy_stats['sharpe_ratio']:.2f}",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

    async def vwmc_scan_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–∫–∞–Ω—É–≤–∞–Ω–Ω—è –∑–∞ VWMC —Å—Ç—Ä–∞—Ç–µ–≥—ñ—î—é"""
        try:
            msg = await update.message.reply_text("üîç –ó–∞–ø—É—Å–∫–∞—é VWMC —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è...")
            
            symbols = ['BTC/USDT', 'ETH/USDT', 'BNB/USDT', 'SOL/USDT', 'XRP/USDT']
            vwmc_signals = []
            
            for symbol in symbols:
                signal_data = await self.analyze_vwmc_pattern(symbol)
                if signal_data and signal_data['confidence'] >= self.vwmc_params['entry_confidence_min']:
                    vwmc_signals.append(signal_data)
            
            if vwmc_signals:
                vwmc_signals.sort(key=lambda x: x['score'], reverse=True)
                
                response = "üéØ **VWMC –°–ò–ì–ù–ê–õ–ò:**\n\n"
                
                for i, signal in enumerate(vwmc_signals[:3], 1):
                    response += f"{i}. üåü **{signal['symbol']}** - Score: {signal['score']}/100\n"
                    response += f"   üìà –ù–∞–ø—Ä—è–º: {signal['direction']}\n"
                    response += f"   üí∞ –í—ñ—Ä–æ–≥—ñ–¥–Ω—ñ—Å—Ç—å: {signal['confidence']:.0%}\n"
                    response += f"   ‚ö° –ú–æ–º–µ–Ω—Ç—É–º: {signal['momentum_strength']:.2f}\n"
                    response += f"   üìä –û–±'—î–º–Ω–∏–π —Ç–∏—Å–∫: {signal['volume_pressure']:.2f}\n\n"
                
                response += "üîç **VWMC –ö–†–ò–¢–ï–†–Ü–á:**\n"
                response += "‚Ä¢ –ö–æ–Ω–≤–µ—Ä–≥–µ–Ω—Ü—ñ—è —Ü—ñ–Ω–∏ —Ç–∞ –æ–±'—î–º—É\n"
                response += "‚Ä¢ –ú–æ–º–µ–Ω—Ç—É–º –∞–∫—Å–µ–ª–µ—Ä–∞—Ü—ñ—è\n"
                response += "‚Ä¢ –õ—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—å –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü—ñ—è\n"
                response += "‚Ä¢ –í–æ–ª–∞—Ç–∏–ª—å–Ω—ñ—Å—Ç—å –∞–¥–∞–ø—Ç–∞—Ü—ñ—è\n"
                
                await msg.edit_text(response, parse_mode='Markdown')
            else:
                await msg.edit_text("üìâ VWMC —Å–∏–≥–Ω–∞–ª—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –û—á—ñ–∫—É–π—Ç–µ –∫—Ä–∞—â–∏—Ö —É–º–æ–≤.")
                
        except Exception as e:
            logger.error(f"VWMC scan error: {e}")
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ VWMC —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è")

    async def analyze_vwmc_pattern(self, symbol: str) -> Optional[Dict]:
        """–ê–Ω–∞–ª—ñ–∑ VWMC –ø–∞—Ç—Ç–µ—Ä–Ω—É"""
        try:
            # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
            ohlcv = await self.get_ohlcv(symbol, '1h', 100)
            if not ohlcv or len(ohlcv) < 50:
                return None
            
            closes = np.array([x[4] for x in ohlcv])
            highs = np.array([x[2] for x in ohlcv])
            lows = np.array([x[3] for x in ohlcv])
            volumes = np.array([x[5] for x in ohlcv])
            
            # VWMC –∞–Ω–∞–ª—ñ–∑
            volume_weighted_analysis = self.calculate_volume_weighted_metrics(closes, volumes)
            momentum_convergence = self.analyze_momentum_convergence(closes, volumes)
            liquidity_zones = self.identify_liquidity_zones(highs, lows, volumes)
            pattern_recognition = self.recognize_price_patterns(closes, volumes)
            
            # –ö–æ–º–±—ñ–Ω–æ–≤–∞–Ω–∞ –æ—Ü—ñ–Ω–∫–∞
            vwmc_score = self.calculate_vwmc_score(
                volume_weighted_analysis,
                momentum_convergence,
                liquidity_zones,
                pattern_recognition
            )
            
            if vwmc_score < 60:  # –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –ø–æ—Ä—ñ–≥
                return None
            
            # –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –Ω–∞–ø—Ä—è–º–∫—É
            direction = self.determine_direction(
                volume_weighted_analysis,
                momentum_convergence,
                pattern_recognition
            )
            
            return {
                'symbol': symbol,
                'direction': direction,
                'score': vwmc_score,
                'confidence': vwmc_score / 100,
                'momentum_strength': momentum_convergence['strength'],
                'volume_pressure': volume_weighted_analysis['pressure'],
                'liquidity_zones': liquidity_zones,
                'pattern': pattern_recognition['pattern']
            }
            
        except Exception as e:
            logger.error(f"VWMC analysis error for {symbol}: {e}")
            return None

    def calculate_volume_weighted_metrics(self, prices: np.ndarray, volumes: np.ndarray) -> Dict:
        """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ volume-weighted –º–µ—Ç—Ä–∏–∫"""
        # Volume Weighted Moving Average
        vwma = np.sum(prices * volumes) / np.sum(volumes)
        
        # Volume Pressure Index
        volume_ma = talib.SMA(volumes, self.vwmc_params['volume_weight_period'])
        volume_pressure = volumes[-1] / volume_ma[-1] if volume_ma[-1] > 0 else 1.0
        
        # Volume-Weighted Momentum
        returns = np.diff(prices) / prices[:-1]
        weighted_returns = returns * volumes[1:] / np.sum(volumes[1:])
        vwmomentum = np.sum(weighted_returns)
        
        return {
            'vwma': vwma,
            'pressure': volume_pressure,
            'momentum': vwmomentum,
            'trend': 1 if vwmomentum > 0 else -1
        }

    def analyze_momentum_convergence(self, prices: np.ndarray, volumes: np.ndarray) -> Dict:
        """–ê–Ω–∞–ª—ñ–∑ –∫–æ–Ω–≤–µ—Ä–≥–µ–Ω—Ü—ñ—ó –º–æ–º–µ–Ω—Ç—É–º—É"""
        # RSI –∑ –æ–±'—î–º–Ω–æ—é –∑–≤–∞–∂–µ–Ω–æ—é
        rsi = talib.RSI(prices, self.vwmc_params['momentum_window'])
        
        # Volume-Weighted MACD
        macd, macd_signal, _ = talib.MACD(prices)
        
        # Momentum Convergence Index
        price_momentum = talib.MOM(prices, self.vwmc_params['momentum_window'])
        volume_momentum = talib.MOM(volumes, self.vwmc_params['momentum_window'])
        
        # –ö–æ–Ω–≤–µ—Ä–≥–µ–Ω—Ü—ñ—è/–¥–∏–≤–µ—Ä–≥–µ–Ω—Ü—ñ—è
        convergence = np.corrcoef(price_momentum[-20:], volume_momentum[-20:])[0, 1]
        
        return {
            'rsi': rsi[-1],
            'macd_convergence': macd[-1] - macd_signal[-1],
            'convergence_strength': abs(convergence),
            'convergence_direction': 1 if convergence > 0 else -1,
            'strength': np.mean([abs(convergence), abs(macd[-1] - macd_signal[-1]) / np.std(prices)])
        }

    def identify_liquidity_zones(self, highs: np.ndarray, lows: np.ndarray, volumes: np.ndarray) -> List[float]:
        """–Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è –∑–æ–Ω –ª—ñ–∫–≤—ñ–¥–Ω–æ—Å—Ç—ñ"""
        # Volume Profile Analysis
        price_levels = np.linspace(np.min(lows), np.max(highs), 100)
        volume_at_price = []
        
        for i in range(len(price_levels) - 1):
            mask = (highs >= price_levels[i]) & (lows <= price_levels[i + 1])
            volume_at_price.append(np.sum(volumes[mask]))
        
        # –ó–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –∑–Ω–∞—á—É—â–∏—Ö —Ä—ñ–≤–Ω—ñ–≤
        significant_levels = []
        mean_volume = np.mean(volume_at_price)
        std_volume = np.std(volume_at_price)
        
        for i, vol in enumerate(volume_at_price):
            if vol > mean_volume + std_volume * self.vwmc_params['divergence_sensitivity']:
                significant_levels.append(price_levels[i])
        
        return significant_levels[:5]  # –¢–æ–ø-5 —Ä—ñ–≤–Ω—ñ–≤

    def recognize_price_patterns(self, prices: np.ndarray, volumes: np.ndarray) -> Dict:
        """–†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è —Ü–µ–Ω–æ–≤–∏—Ö –ø–∞—Ç—Ç–µ—Ä–Ω—ñ–≤"""
        # –ê–Ω–∞–ª—ñ–∑ –ø–∞—Ç—Ç–µ—Ä–Ω—ñ–≤ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —ñ—Å—Ç–æ—Ä—ñ—ó
        patterns = {
            'bullish_engulfing': self.detect_bullish_engulfing(prices, volumes),
            'bearish_engulfing': self.detect_bearish_engulfing(prices, volumes),
            'double_bottom': self.detect_double_bottom(prices),
            'double_top': self.detect_double_top(prices),
            'volume_spike': self.detect_volume_spike(volumes)
        }
        
        # –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –Ω–∞–π—Å–∏–ª—å–Ω—ñ—à–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
        strongest_pattern = max(patterns.items(), key=lambda x: x[1]['strength'])
        
        return {
            'pattern': strongest_pattern[0],
            'strength': strongest_pattern[1]['strength'],
            'direction': strongest_pattern[1]['direction']
        }

    def detect_bullish_engulfing(self, prices: np.ndarray, volumes: np.ndarray) -> Dict:
        """–î–µ—Ç–µ–∫—Ü—ñ—è –±–∏—á–æ–≥–æ –ø–æ–≥–ª–∏–Ω–∞—é—á–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É"""
        if len(prices) < 3:
            return {'strength': 0, 'direction': 'none'}
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —É–º–æ–≤ bullish engulfing
        current_close = prices[-1]
        current_open = prices[-1] - (prices[-1] - prices[-2])  # Approximation
        prev_close = prices[-2]
        prev_open = prices[-2] - (prices[-2] - prices[-3])
        
        is_engulfing = (current_close > prev_open and 
                       current_open < prev_close and 
                       current_close > current_open)
        
        strength = 0.7 if is_engulfing else 0
        if is_engulfing and volumes[-1] > np.mean(volumes[-5:]):
            strength = 0.9
        
        return {'strength': strength, 'direction': 'bullish'}

    def detect_bearish_engulfing(self, prices: np.ndarray, volumes: np.ndarray) -> Dict:
        """–î–µ—Ç–µ–∫—Ü—ñ—è –≤–µ–¥–º–µ–∂–æ–≥–æ –ø–æ–≥–ª–∏–Ω–∞—é—á–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É"""
        if len(prices) < 3:
            return {'strength': 0, 'direction': 'none'}
        
        current_close = prices[-1]
        current_open = prices[-1] - (prices[-1] - prices[-2])
        prev_close = prices[-2]
        prev_open = prices[-2] - (prices[-2] - prices[-3])
        
        is_engulfing = (current_close < prev_open and 
                       current_open > prev_close and 
                       current_close < current_open)
        
        strength = 0.7 if is_engulfing else 0
        if is_engulfing and volumes[-1] > np.mean(volumes[-5:]):
            strength = 0.9
        
        return {'strength': strength, 'direction': 'bearish'}

    def detect_double_bottom(self, prices: np.ndarray) -> Dict:
        """–î–µ—Ç–µ–∫—Ü—ñ—è –ø–æ–¥–≤—ñ–π–Ω–æ–≥–æ –¥–Ω–∞"""
        if len(prices) < 20:
            return {'strength': 0, 'direction': 'none'}
        
        # –ü–æ—à—É–∫ –ª–æ–∫–∞–ª—å–Ω–∏—Ö –º—ñ–Ω—ñ–º—É–º—ñ–≤
        minima_indices = signal.argrelextrema(prices, np.less_equal, order=5)[0]
        
        if len(minima_indices) < 2:
            return {'strength': 0, 'direction': 'none'}
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —É–º–æ–≤ double bottom
        last_minima = minima_indices[-2:]
        price_diff = abs(prices[last_minima[0]] - prices[last_minima[1]]) / prices[last_minima[0]]
        
        if price_diff < 0.02:  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —Ä—ñ–∑–Ω–∏—Ü—è 2%
            strength = 0.8
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–æ–±–æ—é neckline
            neckline = np.max(prices[last_minima[0]:last_minima[1]])
            if prices[-1] > neckline:
                strength = 0.95
            
            return {'strength': strength, 'direction': 'bullish'}
        
        return {'strength': 0, 'direction': 'none'}

    def detect_double_top(self, prices: np.ndarray) -> Dict:
        """–î–µ—Ç–µ–∫—Ü—ñ—è –ø–æ–¥–≤—ñ–π–Ω–æ—ó –≤–µ—Ä—à–∏–Ω–∏"""
        if len(prices) < 20:
            return {'strength': 0, 'direction': 'none'}
        
        # –ü–æ—à—É–∫ –ª–æ–∫–∞–ª—å–Ω–∏—Ö –º–∞–∫—Å–∏–º—É–º—ñ–≤
        maxima_indices = signal.argrelextrema(prices, np.greater_equal, order=5)[0]
        
        if len(maxima_indices) < 2:
            return {'strength': 0, 'direction': 'none'}
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —É–º–æ–≤ double top
        last_maxima = maxima_indices[-2:]
        price_diff = abs(prices[last_maxima[0]] - prices[last_maxima[1]]) / prices[last_maxima[0]]
        
        if price_diff < 0.02:
            strength = 0.8
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–æ–±–æ—é neckline
            neckline = np.min(prices[last_maxima[0]:last_maxima[1]])
            if prices[-1] < neckline:
                strength = 0.95
            
            return {'strength': strength, 'direction': 'bearish'}
        
        return {'strength': 0, 'direction': 'none'}

    def detect_volume_spike(self, volumes: np.ndarray) -> Dict:
        """–î–µ—Ç–µ–∫—Ü—ñ—è —Å–ø–∞–π–∫—É –æ–±'—î–º—ñ–≤"""
        if len(volumes) < 10:
            return {'strength': 0, 'direction': 'none'}
        
        current_volume = volumes[-1]
        avg_volume = np.mean(volumes[-10:-1])
        volume_ratio = current_volume / avg_volume
        
        if volume_ratio > 2.0:
            return {'strength': 0.7, 'direction': 'breakout'}
        elif volume_ratio > 3.0:
            return {'strength': 0.9, 'direction': 'breakout'}
        
        return {'strength': 0, 'direction': 'none'}

    def calculate_vwmc_score(self, volume_analysis: Dict, momentum_analysis: Dict, 
                           liquidity_zones: List, pattern_analysis: Dict) -> float:
        """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ VWMC score"""
        weights = {
            'volume_pressure': 0.25,
            'momentum_strength': 0.25,
            'pattern_strength': 0.20,
            'liquidity_zones': 0.15,
            'convergence': 0.15
        }
        
        # –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤
        volume_score = min(volume_analysis['pressure'] * 50, 100)
        momentum_score = momentum_analysis['strength'] * 100
        pattern_score = pattern_analysis['strength'] * 100
        liquidity_score = min(len(liquidity_zones) * 20, 100)
        convergence_score = momentum_analysis['convergence_strength'] * 100
        
        # –ó–∞–≥–∞–ª—å–Ω–∞ –æ—Ü—ñ–Ω–∫–∞
        total_score = (
            volume_score * weights['volume_pressure'] +
            momentum_score * weights['momentum_strength'] +
            pattern_score * weights['pattern_strength'] +
            liquidity_score * weights['liquidity_zones'] +
            convergence_score * weights['convergence']
        )
        
        return min(total_score, 100)

    def determine_direction(self, volume_analysis: Dict, momentum_analysis: Dict, 
                          pattern_analysis: Dict) -> str:
        """–í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –Ω–∞–ø—Ä—è–º–∫—É —Ç–æ—Ä–≥—ñ–≤–ª—ñ"""
        # –ì–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è –º—ñ–∂ —Ä—ñ–∑–Ω–∏–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
        votes = {
            'LONG': 0,
            'SHORT': 0
        }
        
        # Volume analysis vote
        if volume_analysis['trend'] > 0:
            votes['LONG'] += 1
        else:
            votes['SHORT'] += 1
        
        # Momentum analysis vote
        if momentum_analysis['convergence_direction'] > 0:
            votes['LONG'] += 1
        else:
            votes['SHORT'] += 1
        
        # Pattern analysis vote
        if pattern_analysis['direction'] in ['bullish', 'breakout']:
            votes['LONG'] += 1
        elif pattern_analysis['direction'] in ['bearish']:
            votes['SHORT'] += 1
        
        return 'LONG' if votes['LONG'] > votes['SHORT'] else 'SHORT'

    async def volume_analysis_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ì–ª–∏–±–∏–Ω–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –æ–±'—î–º—ñ–≤"""
        try:
            msg = await update.message.reply_text("üìä –ê–Ω–∞–ª—ñ–∑—É—é –æ–±'—î–º–Ω—ñ –ø–∞—Ç—Ç–µ—Ä–Ω–∏...")
            
            volume_data = await self.deep_volume_analysis('BTC/USDT')
            
            response = "üìä **–ì–õ–ò–ë–ò–ù–ù–ò–ô –ê–ù–ê–õ–Ü–ó –û–ë'–Ñ–ú–Ü–í:**\n\n"
            response += f"üîç **BTC/USDT**\n"
            response += f"‚Ä¢ –û–±'—î–º–Ω–∏–π —Ç–∏—Å–∫: {volume_data['volume_pressure']:.2f}\n"
            response += f"‚Ä¢ VWMA –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è: {volume_data['vwma_deviation']:.2f}%\n"
            response += f"‚Ä¢ –û–±'—î–º–Ω–∏–π —Ç—Ä–µ–Ω–¥: {volume_data['volume_trend']}\n"
            response += f"‚Ä¢ –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü—ñ—è: {volume_data['clustering_score']:.2f}\n\n"
            
            response += "üéØ **–Ü–ù–¢–ï–†–ü–†–ï–¢–ê–¶–Ü–Ø:**\n"
            if volume_data['volume_pressure'] > 1.5:
                response += "‚Ä¢ –°–∏–ª—å–Ω–∏–π –æ–±'—î–º–Ω–∏–π —Ç–∏—Å–∫\n"
                response += "‚Ä¢ –ú–æ–∂–ª–∏–≤—ñ—Å—Ç—å –ø—Ä–æ–±–æ—é\n"
            elif volume_data['volume_pressure'] < 0.7:
                response += "‚Ä¢ –ù–∏–∑—å–∫–∞ –æ–±'—î–º–Ω–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å\n"
                response += "‚Ä¢ –ö–æ–Ω—Å–æ–ª—ñ–¥–∞—Ü—ñ—è\n"
            
            await msg.edit_text(response, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"Volume analysis error: {e}")
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É –æ–±'—î–º—ñ–≤")

    async def deep_volume_analysis(self, symbol: str) -> Dict:
        """–ì–ª–∏–±–∏–Ω–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –æ–±'—î–º—ñ–≤"""
        ohlcv = await self.get_ohlcv(symbol, '4h', 50)
        if not ohlcv:
            return {}
        
        closes = np.array([x[4] for x in ohlcv])
        volumes = np.array([x[5] for x in ohlcv])
        
        # Volume Pressure
        volume_ma = talib.SMA(volumes, 20)
        volume_pressure = volumes[-1] / volume_ma[-1] if volume_ma[-1] > 0 else 1.0
        
        # VWMA Deviation
        vwma = np.sum(closes * volumes) / np.sum(volumes)
        price_ma = talib.SMA(closes, 20)
        vwma_deviation = (vwma - price_ma[-1]) / price_ma[-1] * 100
        
        # Volume Trend
        volume_trend = "–í–ò–°–•–Ü–î–ù–ò–ô" if volumes[-1] > np.mean(volumes[-5:]) else "–ù–ò–ó–•–Ü–î–ù–ò–ô"
        
        # Clustering Analysis
        volume_std = np.std(volumes)
        clustering_score = volume_std / np.mean(volumes)
        
        return {
            'volume_pressure': volume_pressure,
            'vwma_deviation': vwma_deviation,
            'volume_trend': volume_trend,
            'clustering_score': clustering_score
        }

    async def momentum_matrix_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ú–∞—Ç—Ä–∏—Ü—è –º–æ–º–µ–Ω—Ç—É–º—É"""
        try:
            msg = await update.message.reply_text("‚ö° –†–æ–∑—Ä–∞—Ö–æ–≤—É—é –º–∞—Ç—Ä–∏—Ü—é –º–æ–º–µ–Ω—Ç—É–º—É...")
            
            momentum_data = await self.calculate_momentum_matrix()
            
            response = "‚ö° **–ú–ê–¢–†–ò–¶–Ø –ú–û–ú–ï–ù–¢–£–ú–£:**\n\n"
            
            for asset, data in momentum_data.items():
                response += f"üéØ **{asset}**\n"
                response += f"   RSI: {data['rsi']:.1f}\n"
                response += f"   MACD: {data['macd']:.4f}\n"
                response += f"   –ú–æ–º–µ–Ω—Ç—É–º: {data['momentum']:.2f}\n\n"
            
            response += "üîç **–ö–õ–Æ–ß–û–í–Ü –†–Ü–í–ù–Ü:**\n"
            response += "‚Ä¢ RSI > 70: –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω—ñ—Å—Ç—å\n"
            response += "‚Ä¢ RSI < 30: –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω—ñ—Å—Ç—å\n"
            response += "‚Ä¢ MACD > 0: –±–∏—á–∏–π –º–æ–º–µ–Ω—Ç—É–º\n"
            
            await msg.edit_text(response, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"Momentum matrix error: {e}")
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –º–∞—Ç—Ä–∏—Ü—ñ –º–æ–º–µ–Ω—Ç—É–º—É")

    async def calculate_momentum_matrix(self) -> Dict:
        """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –º–∞—Ç—Ä–∏—Ü—ñ –º–æ–º–µ–Ω—Ç—É–º—É"""
        symbols = ['BTC/USDT', 'ETH/USDT', 'BNB/USDT']
        momentum_data = {}
        
        for symbol in symbols:
            ohlcv = await self.get_ohlcv(symbol, '1h', 50)
            if ohlcv:
                closes = np.array([x[4] for x in ohlcv])
                
                rsi = talib.RSI(closes, 14)
                macd, macd_signal, _ = talib.MACD(closes)
                momentum = talib.MOM(closes, 10)
                
                momentum_data[symbol] = {
                    'rsi': rsi[-1] if not np.isnan(rsi[-1]) else 50,
                    'macd': macd[-1] - macd_signal[-1] if len(macd) > 0 else 0,
                    'momentum': momentum[-1] if len(momentum) > 0 else 0
                }
        
        return momentum_data

    async def liquidity_map_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–∞—Ä—Ç–∞ –ª—ñ–∫–≤—ñ–¥–Ω–æ—Å—Ç—ñ"""
        try:
            msg = await update.message.reply_text("üí∞ –°—Ç–≤–æ—Ä—é—é –∫–∞—Ä—Ç—É –ª—ñ–∫–≤—ñ–¥–Ω–æ—Å—Ç—ñ...")
            
            liquidity_map = await self.generate_liquidity_map()
            
            response = "üí∞ **–ö–ê–†–¢–ê –õ–Ü–ö–í–Ü–î–ù–û–°–¢–Ü:**\n\n"
            
            for symbol, levels in liquidity_map.items():
                response += f"üìä **{symbol}**\n"
                response += f"   üéØ –ö–ª—é—á–æ–≤—ñ —Ä—ñ–≤–Ω—ñ: {len(levels)}\n"
                if levels:
                    response += f"   üí∞ –ù–∞–π–±–ª–∏–∂—á–∏–π: ${levels[0]:.2f}\n"
                response += "\n"
            
            response += "üîç **–í–ê–ñ–õ–ò–í–Ü–°–¢–¨:**\n"
            response += "‚Ä¢ –¶—ñ–ª–∞ –ø—Ä–∞–≥–Ω—É—Ç—å –¥–æ –∑–æ–Ω –ª—ñ–∫–≤—ñ–¥–Ω–æ—Å—Ç—ñ\n"
            response += "‚Ä¢ –ü—Ä–æ–±–∏—Ç—Ç—è –≤–µ–¥–µ –¥–æ —Å–∏–ª—å–Ω–∏—Ö —Ä—É—Ö—ñ–≤\n"
            response += "‚Ä¢ –Ü–¥–µ–∞–ª—å–Ω—ñ —Ç–æ—á–∫–∏ –¥–ª—è –≤—Ö–æ–¥—É/–≤–∏—Ö–æ–¥—É\n"
            
            await msg.edit_text(response, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"Liquidity map error: {e}")
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –∫–∞—Ä—Ç–∏ –ª—ñ–∫–≤—ñ–¥–Ω–æ—Å—Ç—ñ")

    async def generate_liquidity_map(self) -> Dict:
        """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∫–∞—Ä—Ç–∏ –ª—ñ–∫–≤—ñ–¥–Ω–æ—Å—Ç—ñ"""
        symbols = ['BTC/USDT', 'ETH/USDT', 'BNB/USDT']
        liquidity_map = {}
        
        for symbol in symbols:
            ohlcv = await self.get_ohlcv(symbol, '4h', 100)
            if ohlcv:
                highs = np.array([x[2] for x in ohlcv])
                lows = np.array([x[3] for x in ohlcv])
                volumes = np.array([x[5] for x in ohlcv])
                
                levels = self.identify_liquidity_zones(highs, lows, volumes)
                liquidity_map[symbol] = levels
        
        return liquidity_map

    async def pattern_recognition_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –ø–∞—Ç—Ç–µ—Ä–Ω—ñ–≤"""
        try:
            msg = await update.message.reply_text("üéØ –ê–Ω–∞–ª—ñ–∑—É—é —Ü–µ–Ω–æ–≤—ñ –ø–∞—Ç—Ç–µ—Ä–Ω–∏...")
            
            patterns = await self.recognize_market_patterns()
            
            response = "üéØ **–†–û–ó–ü–Ü–ó–ù–ê–ù–ù–Ø –ü–ê–¢–¢–ï–†–ù–Ü–í:**\n\n"
            
            for symbol, pattern in patterns.items():
                response += f"üìà **{symbol}**\n"
                response += f"   –ü–∞—Ç—Ç–µ—Ä–Ω: {pattern['name']}\n"
                response += f"   –°–∏–ª–∞: {pattern['strength']:.2f}\n"
                response += f"   –ù–∞–ø—Ä—è–º: {pattern['direction']}\n\n"
            
            response += "üîÆ **–¢–û–†–ì–û–í–Ü –ù–ê–°–õ–Ü–î–ö–ò:**\n"
            response += "‚Ä¢ –ü–æ–≥–ª–∏–Ω–∞—é—á—ñ –ø–∞—Ç—Ç–µ—Ä–Ω–∏: –≤–∏—Å–æ–∫–æ—è–∫—ñ—Å–Ω—ñ\n"
            response += "‚Ä¢ –ü–æ–¥–≤—ñ–π–Ω–µ –¥–Ω–æ/–≤–µ—Ä—à–∏–Ω–∞: —Å–∏–ª—å–Ω—ñ —Ä—ñ–≤–Ω—ñ\n"
            response += "‚Ä¢ –°–ø–∞–π–∫–∏ –æ–±'—î–º—É: –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω—ñ –ø—Ä–æ–±–æ—ó\n"
            
            await msg.edit_text(response, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"Pattern recognition error: {e}")
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –ø–∞—Ç—Ç–µ—Ä–Ω—ñ–≤")

    async def recognize_market_patterns(self) -> Dict:
        """–†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è —Ä–∏–Ω–∫–æ–≤–∏—Ö –ø–∞—Ç—Ç–µ—Ä–Ω—ñ–≤"""
        symbols = ['BTC/USDT', 'ETH/USDT', 'BNB/USDT']
        patterns = {}
        
        for symbol in symbols:
            ohlcv = await self.get_ohlcv(symbol, '1h', 50)
            if ohlcv:
                closes = np.array([x[4] for x in ohlcv])
                volumes = np.array([x[5] for x in ohlcv])
                
                pattern_data = self.recognize_price_patterns(closes, volumes)
                patterns[symbol] = {
                    'name': pattern_data['pattern'],
                    'strength': pattern_data['strength'],
                    'direction': pattern_data['direction']
                }
        
        return patterns

    async def get_ohlcv(self, symbol: str, timeframe: str = '1h', limit: int = 100) -> Optional[List]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è OHLCV –¥–∞–Ω–∏—Ö"""
        try:
            ohlcv = await asyncio.get_event_loop().run_in_executor(
                None, lambda: self.exchange.fetch_ohlcv(symbol, timeframe, limit)
            )
            return ohlcv
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–ª—è {symbol}: {e}")
            return None

    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–Ω–∏–∫ callback"""
        query = update.callback_query
        await query.answer()
        
        try:
            if query.data == "vwmc_scan":
                await self.vwmc_scan_command(query, context)
            elif query.data == "volume_analysis":
                await self.volume_analysis_command(query, context)
            elif query.data == "momentum_matrix":
                await self.momentum_matrix_command(query, context)
            elif query.data == "liquidity_map":
                await self.liquidity_map_command(query, context)
            elif query.data == "pattern_recognition":
                await self.pattern_recognition_command(query, context)
            # ... —ñ–Ω—à—ñ –∫–æ–º–∞–Ω–¥–∏
                
        except Exception as e:
            await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Ç—É")

    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞—é VWMC Strategy Bot...")
            await self.app.initialize()
            await self.app.start()
            await self.app.updater.start_polling()
            
            logger.info("‚úÖ VWMC –±–æ—Ç —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ!")
            
            while True:
                await asyncio.sleep(3600)
                
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É: {e}")
            raise

async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    try:
        BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
        if not BOT_TOKEN:
            logger.error("–í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å TELEGRAM_BOT_TOKEN")
            return
        
        bot = VWMCStrategyBot(BOT_TOKEN)
        await bot.run()
        
    except KeyboardInterrupt:
        logger.info("–ó—É–ø–∏–Ω–∫–∞ –±–æ—Ç–∞...")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")

if __name__ == '__main__':
    asyncio.run(main())