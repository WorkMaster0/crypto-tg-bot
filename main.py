import pandas as pd
import numpy as np
import requests
import time
from datetime import datetime, timedelta
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.ensemble import IsolationForest
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
import asyncio
from flask import Flask, request, jsonify
import threading
import json
from typing import Dict, List, Optional, Tuple
import logging
import math
import os
import re

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class AdvancedPumpDumpBot:
    def __init__(self, token: str):
        self.token = token
        self.app = Application.builder().token(token).build()
        self.flask_app = Flask(__name__)
        self.setup_flask_routes()
        
        # –°–ø–∏—Å–∫–∏ –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó
        self.popular_coins = {'BTC', 'ETH', 'BNB', 'SOL', 'XRP', 'ADA', 'AVAX', 'DOT', 'DOGE', 'SHIB', 
                             'MATIC', 'LTC', 'LINK', 'ATOM', 'UNI', 'XMR', 'ETC', 'XLM', 'BCH', 'FIL',
                             'APT', 'ARB', 'OP', 'SUI', 'SEI', 'NEAR', 'ALGO', 'FTM', 'AAVE', 'COMP',
                             'MKR', 'SNX', 'CRV', 'SUSHI', '1INCH', 'LDO', 'RUNE', 'INJ', 'IMX', 'RNDR'}
        
        self.garbage_symbols = {'USD', 'EUR', 'GBP', 'JPY', 'CNY', 'RUB', 'TRY', 'BRL', 'KRW', 'AUD',
                               'USDC', 'USDT', 'BUSD', 'DAI', 'TUSD', 'PAX', 'UST', 'HUSD', 'GUSD',
                               'BVND', 'IDRT', 'BIDR', 'BKRW', 'NGN', 'UAH', 'VAI', 'SUSD', 'USDN'}
        
        # –†–µ–≥—É–ª—è—Ä–Ω–∏–π –≤–∏—Ä–∞–∑ –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó —Å–º—ñ—Ç—Ç—è
        self.garbage_pattern = re.compile(r'.*[0-9]+[LNS].*|.*UP|DOWN|BEAR|BULL|HALF|QUARTER.*', re.IGNORECASE)
        
        # –ü–æ—Ä–æ–≥–∏ –¥–ª—è –ø–∞–º–ø—É
        self.pump_thresholds = {
            'volume_ratio': 3.0,
            'price_change_1h': 5.0,
            'price_change_5m': 2.0,
            'rsi_threshold': 60,
            'buy_pressure_ratio': 1.2,
            'macd_signal': 0.0005,
            'min_volume': 100000  # –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –æ–±'—î–º –≤ USDT
        }
        
        # –ü–æ—Ä–æ–≥–∏ –¥–ª—è –¥–∞–º–ø—É
        self.dump_thresholds = {
            'volume_ratio': 2.5,
            'price_change_1h': -4.0,
            'price_change_5m': -1.5,
            'rsi_threshold': 40,
            'sell_pressure_ratio': 1.5,
            'macd_signal': -0.0005,
            'min_volume': 100000  # –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –æ–±'—î–º –≤ USDT
        }
        
        self.coin_blacklist = set()
        self.last_signals = {}
        self.whale_alert_cooldown = {}
        self.setup_handlers()
        
    def setup_flask_routes(self):
        @self.flask_app.route('/webhook', methods=['POST'])
        def webhook():
            data = request.json
            return self.handle_webhook(data)
            
        @self.flask_app.route('/stats', methods=['GET'])
        def stats():
            return jsonify({
                'last_signals': self.last_signals,
                'settings': {
                    'pump': self.pump_thresholds,
                    'dump': self.dump_thresholds
                }
            })
            
        @self.flask_app.route('/update_settings', methods=['POST'])
        def update_settings():
            data = request.json
            self.update_settings(data)
            return jsonify({'status': 'success'})
            
        @self.flask_app.route('/health', methods=['GET'])
        def health():
            return jsonify({'status': 'healthy', 'timestamp': datetime.now().isoformat()})
    
    def setup_handlers(self):
        self.app.add_handler(CommandHandler("start", self.start))
        self.app.add_handler(CommandHandler("scan", self.scan_command))
        self.app.add_handler(CommandHandler("settings", self.settings_command))
        self.app.add_handler(CommandHandler("blacklist", self.blacklist_command))
        self.app.add_handler(CommandHandler("debug", self.debug_command))
        self.app.add_handler(CommandHandler("whale", self.whale_command))
        self.app.add_handler(CommandHandler("topsignals", self.top_signals_command))
        self.app.add_handler(CallbackQueryHandler(self.button_handler))
    
    def is_garbage_symbol(self, symbol: str) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ —Å–∏–º–≤–æ–ª —î —Å–º—ñ—Ç—Ç—è–º"""
        if symbol in self.garbage_symbols:
            return True
        
        if self.garbage_pattern.match(symbol):
            return True
        
        # –§—ñ–ª—å—Ç—Ä –¥–æ–≤–≥–∏—Ö —Ç–∞ –¥–∏–≤–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤
        if len(symbol) > 10:
            return True
        
        # –§—ñ–ª—å—Ç—Ä —Å–∏–º–≤–æ–ª—ñ–≤ –∑ —Ü–∏—Ñ—Ä–∞–º–∏ –ø–æ—Å–µ—Ä–µ–¥ –Ω–∞–∑–≤–∏
        if any(char.isdigit() for char in symbol[1:-1]):
            return True
            
        return False

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        keyboard = [
            [InlineKeyboardButton("üîç –°–∫–∞–Ω—É–≤–∞—Ç–∏ –∑–∞—Ä–∞–∑", callback_data="scan_now")],
            [InlineKeyboardButton("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", callback_data="settings")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
            [InlineKeyboardButton("üö´ –ß–æ—Ä–Ω–∏–π —Å–ø–∏—Å–æ–∫", callback_data="blacklist")],
            [InlineKeyboardButton("üêã Whale Alert", callback_data="whale_alert")],
            [InlineKeyboardButton("üìà –¢–û–ü —Å–∏–≥–Ω–∞–ª–∏", callback_data="top_signals")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "ü§ñ Advanced Pump & Dump Detect Bot\n\n"
            "–ú–æ–∂–ª–∏–≤–æ—Å—Ç—ñ:\n"
            "‚Ä¢ üöÄ –î–µ—Ç–µ–∫—Ü—ñ—è –ø–∞–º–ø—ñ–≤\n"
            "‚Ä¢ üìâ –î–µ—Ç–µ–∫—Ü—ñ—è –¥–∞–º–ø—ñ–≤\n"
            "‚Ä¢ üêã Whale transactions monitoring\n"
            "‚Ä¢ üìä RSI & MACD –∞–Ω–∞–ª—ñ–∑\n"
            "‚Ä¢ üîÑ Volume anomaly detection\n"
            "‚Ä¢ üåä Order book analysis\n"
            "‚Ä¢ ‚ö° Real-time alerts\n"
            "‚Ä¢ üåê Webhook integration",
            reply_markup=reply_markup
        )

    async def get_market_data(self, symbol: str) -> Optional[Dict]:
        try:
            logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–ª—è {symbol}")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —Å–∏–º–≤–æ–ª –Ω–µ —Å–º—ñ—Ç—Ç—è
            if self.is_garbage_symbol(symbol):
                logger.info(f"–ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Å–º—ñ—Ç—Ç—è: {symbol}")
                return None
            
            # –û—Å–Ω–æ–≤–Ω—ñ –¥–∞–Ω—ñ
            url = f"https://api.binance.com/api/v3/ticker/24hr?symbol={symbol}USDT"
            response = requests.get(url, timeout=10)
            data = response.json()
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø–æ–º–∏–ª–∫—É API
            if 'code' in data:
                logger.warning(f"API –ø–æ–º–∏–ª–∫–∞ –¥–ª—è {symbol}: {data}")
                return None
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ–≥–æ –æ–±'—î–º—É
            quote_volume = float(data['quoteVolume'])
            if quote_volume < self.pump_thresholds['min_volume']:
                logger.info(f"–ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ {symbol} —á–µ—Ä–µ–∑ –Ω–∏–∑—å–∫–∏–π –æ–±'—î–º: {quote_volume:,.0f} USDT")
                return None
            
            # –ö–ª–∞–π–Ω—Å–∏ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º—ñ–≤
            timeframes = {
                '5m': '&interval=5m&limit=100',
                '1h': '&interval=1h&limit=50',
                '15m': '&interval=15m&limit=100'
            }
            
            klines_data = {}
            for tf, params in timeframes.items():
                klines_url = f"https://api.binance.com/api/v3/klines?symbol={symbol}USDT{params}"
                klines_response = requests.get(klines_url, timeout=10)
                klines_data[tf] = klines_response.json()
            
            # Order book data
            orderbook_url = f"https://api.binance.com/api/v3/depth?symbol={symbol}USDT&limit=10"
            orderbook_response = requests.get(orderbook_url, timeout=10)
            orderbook_data = orderbook_response.json()
            
            market_data = {
                'symbol': symbol,
                'price': float(data['lastPrice']),
                'volume': float(data['volume']),
                'price_change': float(data['priceChangePercent']),
                'high': float(data['highPrice']),
                'low': float(data['lowPrice']),
                'quote_volume': quote_volume,
                'klines': klines_data,
                'orderbook': orderbook_data
            }
            
            logger.info(f"–î–∞–Ω—ñ –æ—Ç—Ä–∏–º–∞–Ω—ñ –¥–ª—è {symbol}: price={market_data['price']}, volume={market_data['quote_volume']:,.0f} USDT")
            return market_data
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–ª—è {symbol}: {e}")
            return None

    # –Ü–Ω—à—ñ –º–µ—Ç–æ–¥–∏ (calculate_rsi, calculate_ema, calculate_macd, etc.) –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è –Ω–µ–∑–º—ñ–Ω–Ω–∏–º–∏
    # ... [—Ç—É—Ç –≤—Å—ñ —Ç–µ—Ö–Ω—ñ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –∫–æ–¥—É] ...

    async def scan_top_coins(self, scan_type: str = 'both'):
        try:
            logger.info(f"–ü–æ—á–∞—Ç–æ–∫ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è —Ç–∏–ø—É: {scan_type}")
            
            response = requests.get("https://api.binance.com/api/v3/ticker/24hr", timeout=15)
            all_data = response.json()
            
            usdt_pairs = [x for x in all_data if x['symbol'].endswith('USDT')]
            
            # –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è —Ç–∞ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –ø–æ –æ–±'—î–º—É
            filtered_pairs = []
            for pair in usdt_pairs:
                symbol = pair['symbol'].replace('USDT', '')
                quote_volume = float(pair['quoteVolume'])
                
                # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Å–º—ñ—Ç—Ç—è —Ç–∞ –Ω–∏–∑—å–∫–æ–æ–±'—î–º–Ω—ñ –ø–∞—Ä–∏
                if (not self.is_garbage_symbol(symbol) and 
                    symbol not in self.coin_blacklist and
                    quote_volume >= self.pump_thresholds['min_volume']):
                    filtered_pairs.append(pair)
            
            # –°–æ—Ä—Ç—É—î–º–æ –ø–æ –æ–±'—î–º—É
            sorted_by_volume = sorted(filtered_pairs, 
                                    key=lambda x: float(x['quoteVolume']), 
                                    reverse=True)[:30]  # –¢–æ–ø 30 –ø–æ –æ–±'—î–º—É –ø—ñ—Å–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó
            
            logger.info(f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(sorted_by_volume)} –ø—ñ—Å–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó (–∑ {len(usdt_pairs)})")
            
            results = {'pump': [], 'dump': []}
            
            for coin in sorted_by_volume:
                symbol = coin['symbol'].replace('USDT', '')
                    
                logger.info(f"–ê–Ω–∞–ª—ñ–∑ –º–æ–Ω–µ—Ç–∏: {symbol}")
                market_data = await self.get_market_data(symbol)
                if not market_data:
                    continue
                
                # –¢–µ—Ö–Ω—ñ—á–Ω—ñ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏
                tech_indicators = await self.calculate_technical_indicators(
                    market_data['klines']['5m']
                )
                
                # –î–µ—Ç–µ–∫—Ü—ñ—è –ø–∞–º–ø—É
                if scan_type in ['both', 'pump']:
                    pump_result = await self.detect_pump_pattern(market_data, tech_indicators)
                    if pump_result['score'] > 0.4:
                        results['pump'].append({
                            'symbol': symbol,
                            'score': pump_result['score'],
                            'signals': pump_result['signals'],
                            'confidence': pump_result['confidence'],
                            'price': market_data['price'],
                            'volume': market_data['volume'],
                            'quote_volume': market_data['quote_volume'],
                            'price_change_24h': market_data['price_change']
                        })
                        logger.info(f"–ó–Ω–∞–π–¥–µ–Ω–æ pump —Å–∏–≥–Ω–∞–ª –¥–ª—è {symbol}: {pump_result['score']:.2%}")
                
                # –î–µ—Ç–µ–∫—Ü—ñ—è –¥–∞–º–ø—É
                if scan_type in ['both', 'dump']:
                    dump_result = await self.detect_dump_pattern(market_data, tech_indicators)
                    if dump_result['score'] > 0.4:
                        results['dump'].append({
                            'symbol': symbol,
                            'score': dump_result['score'],
                            'signals': dump_result['signals'],
                            'confidence': dump_result['confidence'],
                            'price': market_data['price'],
                            'volume': market_data['volume'],
                            'quote_volume': market_data['quote_volume'],
                            'price_change_24h': market_data['price_change']
                        })
                        logger.info(f"–ó–Ω–∞–π–¥–µ–Ω–æ dump —Å–∏–≥–Ω–∞–ª –¥–ª—è {symbol}: {dump_result['score']:.2%}")
            
            # –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
            for key in results:
                results[key].sort(key=lambda x: x['score'], reverse=True)
            
            logger.info(f"–°–∫–∞–Ω—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ. Pump: {len(results['pump'])}, Dump: {len(results['dump'])}")
            return results
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è: {e}")
            return {'pump': [], 'dump': []}

    async def whale_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É whale alert"""
        await update.message.reply_text(
            "üêã Whale Alert System\n\n"
            "–ü–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:\n"
            "‚Ä¢ –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –æ—Ä–¥–µ—Ä: $50,000\n"
            "‚Ä¢ –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥: –¢–æ–ø 20 –º–æ–Ω–µ—Ç\n"
            "‚Ä¢ –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è: Real-time\n\n"
            "–î–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /settings"
        )

    async def top_signals_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Ç–æ–ø —Å–∏–≥–Ω–∞–ª—ñ–≤"""
        if not self.last_signals:
            await update.message.reply_text("üìä –©–µ –Ω–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤. –ó–∞–ø—É—Å—Ç—ñ—Ç—å —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è /scan")
            return
        
        message = "üìà –¢–û–ü –æ—Å—Ç–∞–Ω–Ω—ñ—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤:\n\n"
        
        # –ì—Ä—É–ø—É—î–º–æ —Å–∏–≥–Ω–∞–ª–∏ –ø–æ —Ç–∏–ø—É
        pump_signals = [s for s in self.last_signals.values() if s['type'] == 'pump']
        dump_signals = [s for s in self.last_signals.values() if s['type'] == 'dump']
        
        if pump_signals:
            message += "üöÄ PUMP —Å–∏–≥–Ω–∞–ª–∏:\n"
            for i, signal in enumerate(sorted(pump_signals, key=lambda x: x['data']['score'], reverse=True)[:5], 1):
                message += f"{i}. {signal['data']['symbol']} - {signal['data']['score']:.2%} ({signal['time'][11:16]})\n"
            message += "\n"
        
        if dump_signals:
            message += "üìâ DUMP —Å–∏–≥–Ω–∞–ª–∏:\n"
            for i, signal in enumerate(sorted(dump_signals, key=lambda x: x['data']['score'], reverse=True)[:5], 1):
                message += f"{i}. {signal['data']['symbol']} - {signal['data']['score']:.2%} ({signal['time'][11:16]})\n"
        
        await update.message.reply_text(message)

    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        
        if query.data == "scan_now":
            await query.edit_message_text("üîç –°–∫–∞–Ω—É—é —Ç–æ–ø –º–æ–Ω–µ—Ç–∏...")
            results = await self.scan_top_coins('both')
            
            message = "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è:\n\n"
            
            if not results['pump'] and not results['dump']:
                message += "‚ÑπÔ∏è –°–∏–≥–Ω–∞–ª—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ\n"
                message += "–°–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /debug –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ä–æ–±–æ—Ç–∏"
            else:
                for signal_type in ['pump', 'dump']:
                    if results[signal_type]:
                        message += f"{'üöÄ' if signal_type == 'pump' else 'üìâ'} {signal_type.upper()}:\n"
                        for i, signal in enumerate(results[signal_type][:3], 1):
                            message += f"{i}. {signal['symbol']} - {signal['score']:.2%} (–æ–±'—î–º: {signal['quote_volume']:,.0f} USDT)\n"
                        message += "\n"
                
            await query.edit_message_text(message)
            
        elif query.data == "settings":
            settings_msg = self.get_settings_message()
            await query.edit_message_text(settings_msg)
            
        elif query.data == "stats":
            stats_msg = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n"
            stats_msg += f"–û—Å—Ç–∞–Ω–Ω—ñ —Å–∏–≥–Ω–∞–ª–∏: {len(self.last_signals)}\n"
            stats_msg += f"–ß–æ—Ä–Ω–∏–π —Å–ø–∏—Å–æ–∫: {len(self.coin_blacklist)} –º–æ–Ω–µ—Ç\n"
            stats_msg += f"–ü–æ–ø—É–ª—è—Ä–Ω—ñ –º–æ–Ω–µ—Ç–∏: {len(self.popular_coins)}\n"
            stats_msg += f"–ó–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ —Å–º—ñ—Ç—Ç—è: {len(self.garbage_symbols)} —Å–∏–º–≤–æ–ª—ñ–≤\n\n"
            stats_msg += "‚öôÔ∏è –ü–æ—Ç–æ—á–Ω—ñ –ø–æ—Ä–æ–≥–∏:\n"
            stats_msg += f"‚Ä¢ –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –æ–±'—î–º: {self.pump_thresholds['min_volume']:,.0f} USDT\n"
            stats_msg += f"‚Ä¢ Volume ratio: {self.pump_thresholds['volume_ratio']}x\n"
            stats_msg += f"‚Ä¢ Price change: {self.pump_thresholds['price_change_5m']}%"
            
            await query.edit_message_text(stats_msg)
            
        elif query.data == "blacklist":
            if self.coin_blacklist:
                blacklist_msg = "üö´ –ß–æ—Ä–Ω–∏–π —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç:\n"
                blacklist_msg += "\n".join(f"‚Ä¢ {coin}" for coin in sorted(self.coin_blacklist))
                blacklist_msg += "\n\n–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /blacklist [–º–æ–Ω–µ—Ç–∞] –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è/–≤–∏–¥–∞–ª–µ–Ω–Ω—è"
            else:
                blacklist_msg = "‚úÖ –ß–æ—Ä–Ω–∏–π —Å–ø–∏—Å–æ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π\n\n–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /blacklist [–º–æ–Ω–µ—Ç–∞] –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è"
            
            await query.edit_message_text(blacklist_msg)
            
        elif query.data == "whale_alert":
            whale_msg = "üêã Whale Alert System\n\n"
            whale_msg += "–§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å:\n"
            whale_msg += "‚Ä¢ –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –≤–µ–ª–∏–∫–∏—Ö –æ—Ä–¥–µ—Ä—ñ–≤ (>$50K)\n"
            whale_msg += "‚Ä¢ –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞–∫–∞–Ω—É —Ç–æ–ø-–º–æ–Ω–µ—Ç\n"
            whale_msg += "‚Ä¢ –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –∞–Ω–æ–º–∞–ª—å–Ω—É –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å\n\n"
            whale_msg += "–î–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –¥–µ—Ç–∞–ª–µ–π –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /whale"
            
            await query.edit_message_text(whale_msg)
            
        elif query.data == "top_signals":
            if not self.last_signals:
                await query.edit_message_text("üìä –©–µ –Ω–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤. –ó–∞–ø—É—Å—Ç—ñ—Ç—å —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è /scan")
                return
            
            message = "üìà –¢–û–ü –æ—Å—Ç–∞–Ω–Ω—ñ—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤:\n\n"
            
            # –ì—Ä—É–ø—É—î–º–æ —Å–∏–≥–Ω–∞–ª–∏ –ø–æ —Ç–∏–ø—É
            pump_signals = [s for s in self.last_signals.values() if s['type'] == 'pump']
            dump_signals = [s for s in self.last_signals.values() if s['type'] == 'dump']
            
            if pump_signals:
                message += "üöÄ –¢–û–ü 3 PUMP:\n"
                for i, signal in enumerate(sorted(pump_signals, key=lambda x: x['data']['score'], reverse=True)[:3], 1):
                    message += f"{i}. {signal['data']['symbol']} - {signal['data']['score']:.2%}\n"
                message += "\n"
            
            if dump_signals:
                message += "üìâ –¢–û–ü 3 DUMP:\n"
                for i, signal in enumerate(sorted(dump_signals, key=lambda x: x['data']['score'], reverse=True)[:3], 1):
                    message += f"{i}. {signal['data']['symbol']} - {signal['data']['score']:.2%}\n"
            
            await query.edit_message_text(message)

    # –†–µ—à—Ç–∞ –º–µ—Ç–æ–¥—ñ–≤ –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è –Ω–µ–∑–º—ñ–Ω–Ω–∏–º–∏
    # ... [—Ç—É—Ç –≤—Å—ñ —ñ–Ω—à—ñ —Ñ—É–Ω–∫—Ü—ñ—ó] ...

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        # –ó–∞–ø—É—Å–∫ Flask –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
        flask_thread = threading.Thread(target=self.run_flask, daemon=True)
        flask_thread.start()
        
        print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π...")
        print("üåê Flask —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–∏–π")
        print("üìä –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è —Å–º—ñ—Ç—Ç—è –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∞")
        print("üí¨ –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏: /start, /scan, /settings, /blacklist, /debug, /whale, /topsignals")
        
        # –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞
        self.app.run_polling()

# –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
if __name__ == "__main__":
    TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
    if not TOKEN:
        print("‚ùå –ü–æ–º–∏–ª–∫–∞: TELEGRAM_BOT_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è")
        print("‚ÑπÔ∏è –î–æ–¥–∞–π—Ç–µ TELEGRAM_BOT_TOKEN –¥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å Render")
        exit(1)
    
    bot = AdvancedPumpDumpBot(TOKEN)
    bot.run()