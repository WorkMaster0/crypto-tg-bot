import matplotlib
matplotlib.use('Agg')
import pandas as pd
import numpy as np
import requests
import time
from datetime import datetime, timedelta
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.ensemble import IsolationForest, RandomForestClassifier
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
import asyncio
from flask import Flask, request, jsonify
import threading
import json
from typing import Dict, List, Optional, Tuple, Any
import logging
import math
import os
import re
import heapq
from collections import deque, defaultdict
from concurrent.futures import ThreadPoolExecutor, as_completed
import talib
from scipy import stats
import ccxt
import aiohttp
import warnings
warnings.filterwarnings('ignore')

# –î–µ—Ç–∞–ª—å–Ω–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot_debug.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class UltimatePumpDumpDetector:
    def __init__(self, token: str):
        self.token = token
        self.app = Application.builder().token(token).build()
        
        # –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Binance
        logger.info("–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Binance...")
        try:
            self.exchange = ccxt.binance({
                'enableRateLimit': True,
                'timeout': 20000,
                'options': {
                    'defaultType': 'spot',
                    'adjustForTimeDifference': True,
                }
            })
            logger.info("–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Binance —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó Binance: {e}")
            self.exchange = None
        
        # –†–æ–∑—à–∏—Ä–µ–Ω–∏–π —á–æ—Ä–Ω–∏–π —Å–ø–∏—Å–æ–∫
        self.garbage_symbols = self._load_garbage_symbols()
        self.coin_blacklist = set()
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è –≤–∏—è–≤–ª–µ–Ω–Ω—è
        self.detection_params = {
            'volume_spike_threshold': 1.8,
            'price_acceleration_min': 0.003,
            'rsi_oversold': 30,
            'rsi_overbought': 70,
            'orderbook_imbalance_min': 0.15,
            'large_order_threshold': 50000,
            'min_volume_usdt': 1000000,
            'max_volume_usdt': 50000000,
            'price_change_5m_min': 1.0,
            'wick_ratio_threshold': 0.25,
            'market_cap_filter': 1000000,
            'liquidity_score_min': 0.4,
            'pump_probability_threshold': 0.6,
            'dump_probability_threshold': 0.6,
            'whale_volume_threshold': 50000,
            'volatility_spike_threshold': 2.0,
            'min_daily_change': 5.0,
            'min_price': 0.0005,
            'max_symbols_per_scan': 100
        }
        
        # –ö–µ—à —Ç–∞ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è
        self.market_data_cache = {}
        self.symbols_cache = []
        self.last_symbols_update = 0
        self.performance_history = deque(maxlen=1000)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.performance_metrics = {
            'total_scans': 0,
            'signals_triggered': 0,
            'success_rate': 0.0,
            'avg_scan_time': 0.0,
            'false_positives': 0,
            'pump_signals_detected': 0,
            'dump_signals_detected': 0,
            'profitable_signals': 0,
            'unprofitable_signals': 0,
            'avg_symbols_per_scan': 0
        }
        
        # –ü—É–ª –ø–æ—Ç–æ–∫—ñ–≤
        self.executor = ThreadPoolExecutor(max_workers=15)
        self.setup_handlers()
        
        self.last_update_time = time.time()

    def _load_garbage_symbols(self):
        """–†–æ–∑—à–∏—Ä–µ–Ω–∏–π —Å–ø–∏—Å–æ–∫ –Ω–µ–ø–æ—Ç—Ä—ñ–±–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤"""
        base = {
            'USD', 'EUR', 'GBP', 'JPY', 'CNY', 'RUB', 'TRY', 'BRL', 'KRW', 'AUD',
            'USDC', 'USDT', 'BUSD', 'DAI', 'TUSD', 'PAX', 'UST', 'HUSD', 'GUSD',
            'PAXG', 'WBTC', 'BTCB', 'ETHB', 'BNB', 'HT', 'PNT', 'LEO', 'LINK',
            'XRP', 'ADA', 'DOT', 'DOGE', 'SHIB', 'VIB', 'SOL', 'AVAX', 'FTM',
            'SXP', 'CHZ', 'OOKI', 'CREAM', 'FTT', 'BTT', 'WIN', 'TRX', 'BCH',
            'LTC', 'HARD', 'XLM', 'XMR', 'XTZ', 'WTC', 'DASH', 'ETC', 'BETA',
            'BURGER', 'FIRO', 'CVP', 'EPX', 'PROS', 'SLF', 'OAX', 'VIDT',
            'WING', 'CLV', 'FOR', 'VITE', 'TROY', 'SFP', 'ALPACA', 'DEXE',
            'FUN', 'TVK', 'BOND', 'TLM', 'REEF', 'TWT', 'LEVER', 'MULTI',
            'GFT', 'DREP', 'PERL', 'UFT', 'BTS', 'STMX', 'CKB', 'CHR',
            'COCOS', 'MBL', 'TCT', 'WRX', 'BEAM', 'VTHO', 'DOCK', 'WAN'
        }
        
        patterns = {
            'UP', 'DOWN', 'BULL', 'BEAR', 'LONG', 'SHORT', 'HALF', 'FULL',
            'HEDGE', 'DOOM', 'MOON', 'SUN', 'EARTH', 'MARS', 'PLUTO',
            '3L', '3S', '2L', '2S', '1L', '1S', '5L', '5S', '10L', '10S'
        }
        
        return base.union(patterns)

    def setup_handlers(self):
        """–û–Ω–æ–≤–ª–µ–Ω—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥"""
        handlers = [
            CommandHandler("start", self.start_command),
            CommandHandler("scan", self.deep_scan_command),
            CommandHandler("mass_scan", self.mass_scan_command),
            CommandHandler("pump_radar", self.pump_radar_command),
            CommandHandler("dump_radar", self.dump_radar_command),
            CommandHandler("liquidity_scan", self.liquidity_scan_command),
            CommandHandler("whale_watch", self.whale_watch_command),
            CommandHandler("volatility_alert", self.volatility_alert_command),
            CommandHandler("ai_risk_scan", self.ai_risk_scan_command),
            CommandHandler("settings", self.settings_command),
            CommandHandler("blacklist", self.blacklist_command),
            CommandHandler("performance", self.performance_command),
            CommandHandler("quick_scan", self.quick_scan_command),
            CommandHandler("emergency", self.emergency_scan),
            CommandHandler("debug", self.debug_command),
            CommandHandler("test", self.test_command),
            CommandHandler("test_symbol", self.test_symbol_command),
            CommandHandler("scan_stats", self.scan_stats_command),
            CallbackQueryHandler(self.advanced_button_handler)
        ]
        
        for handler in handlers:
            self.app.add_handler(handler)

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–Ω–æ–≤–ª–µ–Ω–µ –º–µ–Ω—é"""
        keyboard = [
            [InlineKeyboardButton("üö® MASS SCAN 100+", callback_data="mass_scan"),
             InlineKeyboardButton("üîç DEEP SCAN", callback_data="deep_scan")],
            [InlineKeyboardButton("üìä PUMP RADAR", callback_data="pump_radar"),
             InlineKeyboardButton("üìâ DUMP RADAR", callback_data="dump_radar")],
            [InlineKeyboardButton("üêã WHALE WATCH", callback_data="whale_watch"),
             InlineKeyboardButton("üíß LIQUIDITY SCAN", callback_data="liquidity_scan")],
            [InlineKeyboardButton("‚ö° VOLATILITY", callback_data="volatility_alerts"),
             InlineKeyboardButton("ü§ñ AI RISK SCAN", callback_data="ai_risk_scan")],
            [InlineKeyboardButton("üìà SCAN STATS", callback_data="scan_stats"),
             InlineKeyboardButton("‚öôÔ∏è SETTINGS", callback_data="settings")],
            [InlineKeyboardButton("üö´ BLACKLIST", callback_data="blacklist"),
             InlineKeyboardButton("üìä PERFORMANCE", callback_data="performance")],
            [InlineKeyboardButton("üîÑ UPDATE", callback_data="update")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "ü§ñ **ULTIMATE PUMP/DUMP DETECTOR v6.0**\n\n"
            "üéØ *–ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ —Ä–∏–Ω–∫—É –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ*\n\n"
            "‚ú® **–ú–æ–∂–ª–∏–≤–æ—Å—Ç—ñ:**\n"
            "‚Ä¢ üìä –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è 100+ —Ç–æ–∫–µ–Ω—ñ–≤ –æ–¥–Ω–æ—á–∞—Å–Ω–æ\n"
            "‚Ä¢ ‚ö° –ú–∏—Ç—Ç—î–≤–µ –≤–∏—è–≤–ª–µ–Ω–Ω—è –∞–Ω–æ–º–∞–ª—ñ–π\n"
            "‚Ä¢ üéØ –¢–æ—á–Ω—ñ —Å–∏–≥–Ω–∞–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –¥–∞–Ω–∏—Ö\n"
            "‚Ä¢ üîç –ì–ª–∏–±–∏–Ω–Ω–∏–π —Ç–µ—Ö–Ω—ñ—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑\n\n"
            "üíé _–§–æ–∫—É—Å –Ω–∞ —è–∫—ñ—Å–Ω–∏—Ö –∞–∫—Ç–∏–≤–∞—Ö –∑ –≤–∏—Å–æ–∫–æ—é –ª—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—é_",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

    async def mass_scan_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ú–∞—Å–æ–≤–µ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è 100+ —Ç–æ–∫–µ–Ω—ñ–≤"""
        try:
            if not await self.check_exchange_connection():
                await update.message.reply_text("‚ùå –ù–µ–º–∞—î –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±—ñ—Ä–∂—ñ")
                return
            
            msg = await update.message.reply_text("üî• –ó–ê–ü–£–°–ö–ê–Æ –ú–ê–°–û–í–ï –°–ö–ê–ù–£–í–ê–ù–ù–Ø 100+ –¢–û–ö–ï–ù–Ü–í...")
            
            start_time = time.time()
            symbols = await self.get_all_qualified_symbols()
            
            if not symbols:
                await msg.edit_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–∏–º–≤–æ–ª–∏ –¥–ª—è —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è")
                return
            
            symbols = symbols[:self.detection_params['max_symbols_per_scan']]
            
            results = await self.mass_analyze_symbols(symbols)
            
            scan_time = time.time() - start_time
            self.performance_metrics['total_scans'] += 1
            self.performance_metrics['avg_scan_time'] = scan_time
            self.performance_metrics['avg_symbols_per_scan'] = len(symbols)
            
            if results:
                results.sort(key=lambda x: max(x['pump_probability'], x['dump_probability']), reverse=True)
                self.performance_metrics['signals_triggered'] += len(results)
                
                response = (
                    f"üö® **–†–ï–ó–£–õ–¨–¢–ê–¢–ò –ú–ê–°–û–í–û–ì–û –°–ö–ê–ù–£–í–ê–ù–ù–Ø**\n\n"
                    f"üìä –ü—Ä–æ—Å–∫–∞–Ω–æ–≤–∞–Ω–æ: {len(symbols)} —Ç–æ–∫–µ–Ω—ñ–≤\n"
                    f"‚è±Ô∏è –ß–∞—Å: {scan_time:.1f} —Å–µ–∫—É–Ω–¥\n"
                    f"üéØ –ó–Ω–∞–π–¥–µ–Ω–æ —Å–∏–≥–Ω–∞–ª—ñ–≤: {len(results)}\n\n"
                )
                
                # –ì—Ä—É–ø—É—î–º–æ —Å–∏–≥–Ω–∞–ª–∏
                strong_signals = [r for r in results if max(r['pump_probability'], r['dump_probability']) > 0.75]
                medium_signals = [r for r in results if 0.6 <= max(r['pump_probability'], r['dump_probability']) <= 0.75]
                
                if strong_signals:
                    response += "üî• **–°–ò–õ–¨–ù–Ü –°–ò–ì–ù–ê–õ–ò:**\n\n"
                    for i, signal in enumerate(strong_signals[:5], 1):
                        response += self.format_signal_message(signal, i)
                
                if medium_signals and not strong_signals:
                    response += "‚ö†Ô∏è **–°–ï–†–ï–î–ù–Ü –°–ò–ì–ù–ê–õ–ò:**\n\n"
                    for i, signal in enumerate(medium_signals[:5], 1):
                        response += self.format_signal_message(signal, i)
                
                await msg.edit_text(response, parse_mode='Markdown')
            else:
                await msg.edit_text(
                    f"üìä –ú–∞—Å–æ–≤–µ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ\n"
                    f"‚Ä¢ –¢–æ–∫–µ–Ω—ñ–≤: {len(symbols)}\n"
                    f"‚Ä¢ –ß–∞—Å: {scan_time:.1f}—Å\n"
                    f"‚Ä¢ –°–∏–≥–Ω–∞–ª—ñ–≤: 0\n\n"
                    f"‚ÑπÔ∏è –°–∏–ª—å–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤ –Ω–µ –≤–∏—è–≤–ª–µ–Ω–æ"
                )
                
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –º–∞—Å–æ–≤–æ–≥–æ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è: {e}")
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –º–∞—Å–æ–≤–æ–≥–æ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è")

    async def mass_analyze_symbols(self, symbols: List[str]) -> List[Dict]:
        """–ú–∞—Å–æ–≤–∏–π –∞–Ω–∞–ª—ñ–∑ —Å–∏–º–≤–æ–ª—ñ–≤"""
        results = []
        
        with ThreadPoolExecutor(max_workers=min(15, len(symbols))) as executor:
            future_to_symbol = {
                executor.submit(self.analyze_symbol, symbol): symbol 
                for symbol in symbols
            }
            
            for future in as_completed(future_to_symbol):
                try:
                    result = future.result(timeout=8.0)
                    if result:
                        results.append(result)
                except Exception as e:
                    symbol = future_to_symbol[future]
                    logger.debug(f"–ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É {symbol}: {e}")
                finally:
                    time.sleep(0.03)
        
        return results

    async def get_all_qualified_symbols(self) -> List[str]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —è–∫—ñ—Å–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤"""
        current_time = time.time()
        
        if (self.symbols_cache and 
            current_time - self.last_symbols_update < 300):
            return self.symbols_cache
        
        try:
            if not self.exchange:
                return []
            
            markets = await asyncio.get_event_loop().run_in_executor(
                self.executor, self.exchange.load_markets
            )
            
            qualified_symbols = []
            
            for symbol, market in markets.items():
                if (symbol.endswith('/USDT') and 
                    market.get('active', False) and
                    market.get('quoteVolume', 0) >= self.detection_params['min_volume_usdt'] and
                    not self.is_garbage_symbol(symbol)):
                    
                    qualified_symbols.append(symbol)
            
            # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ –æ–±'—î–º–æ–º
            qualified_symbols.sort(key=lambda x: markets[x].get('quoteVolume', 0), reverse=True)
            
            self.symbols_cache = qualified_symbols
            self.last_symbols_update = current_time
            
            logger.info(f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(qualified_symbols)} —è–∫—ñ—Å–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤")
            return qualified_symbols
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–∏–º–≤–æ–ª—ñ–≤: {e}")
            return []

    def is_garbage_symbol(self, symbol: str) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–∏–º–≤–æ–ª—É –Ω–∞ —Å–º—ñ—Ç—Ç—è"""
        try:
            symbol_clean = symbol.upper().replace('/USDT', '')
            
            # –û—Å–Ω–æ–≤–Ω—ñ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∏
            major_coins = {
                'BTC', 'ETH', 'BNB', 'SOL', 'XRP', 'ADA', 'DOGE', 'MATIC', 
                'DOT', 'LTC', 'AVAX', 'LINK', 'ATOM', 'XMR', 'ETC', 'BCH',
                'FIL', 'NEAR', 'ALGO', 'VET', 'EOS', 'XTZ', 'THETA', 'AAVE',
                'MKR', 'COMP', 'SNX', 'CRV', 'SUSHI', 'UNI', 'YFI', 'FTM',
                'EGLD', 'ONE', 'ZEC', 'DASH', 'QTUM', 'ZIL', 'SC', 'ICX'
            }
            
            if symbol_clean in major_coins:
                return False
                
            if symbol_clean in self.garbage_symbols:
                return True
            
            if len(symbol_clean) > 10:
                return True
                
            if any(char.isdigit() for char in symbol_clean):
                return True
                
            suspicious_patterns = {'MOON', 'SUN', 'MARS', 'EARTH', 'PLUTO'}
            if any(pattern in symbol_clean for pattern in suspicious_patterns):
                return True
                
            return False
            
        except:
            return True

    async def analyze_symbol(self, symbol: str) -> Dict:
        """–ê–Ω–∞–ª—ñ–∑ —Å–∏–º–≤–æ–ª—É"""
        try:
            if self.is_garbage_symbol(symbol):
                return {}
            
            market_data = await self.get_market_data(symbol)
            if not market_data or market_data['volume'] < self.detection_params['min_volume_usdt']:
                return {}
            
            # –ü–∞—Ä–∞–ª–µ–ª—å–Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö
            orderbook_future = asyncio.create_task(self.get_orderbook_depth(symbol, 20))
            klines_future = asyncio.create_task(self.get_klines(symbol, '5m', 20))
            
            orderbook, klines = await asyncio.gather(orderbook_future, klines_future)
            
            if not klines or len(klines) < 15:
                return {}
            
            # –ê–Ω–∞–ª—ñ–∑
            tech_analysis = self.technical_analysis(klines)
            ob_analysis = self.orderbook_analysis(orderbook)
            volume_analysis = self.volume_analysis(klines, market_data)
            
            pump_prob = self.calculate_pump_probability(tech_analysis, ob_analysis, volume_analysis)
            dump_prob = self.calculate_dump_probability(tech_analysis, ob_analysis, volume_analysis)
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —è–∫–æ—Å—Ç—ñ —Å–∏–≥–Ω–∞–ª—É
            if max(pump_prob, dump_prob) < 0.6:
                return {}
            
            return {
                'symbol': symbol,
                'price': market_data['close'],
                'volume_usdt': market_data['volume'],
                'percentage': market_data['percentage'],
                'pump_probability': pump_prob,
                'dump_probability': dump_prob,
                'technical_indicators': tech_analysis,
                'orderbook_metrics': ob_analysis,
                'volume_metrics': volume_analysis,
                'timestamp': datetime.now().isoformat()
            }
            
        except Exception as e:
            logger.debug(f"–ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É {symbol}: {e}")
            return {}

    async def get_market_data(self, symbol: str) -> Optional[Dict]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–∏–Ω–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö"""
        try:
            current_time = time.time()
            
            if (symbol in self.market_data_cache and 
                current_time - self.market_data_cache[symbol]['timestamp'] < 30):
                return self.market_data_cache[symbol]['data']
            
            if not self.exchange:
                return None
                
            ticker = await asyncio.get_event_loop().run_in_executor(
                self.executor, lambda: self.exchange.fetch_ticker(symbol)
            )
            
            if not ticker:
                return None
                
            result = {
                'symbol': symbol,
                'open': float(ticker.get('open', 0)),
                'high': float(ticker.get('high', 0)),
                'low': float(ticker.get('low', 0)),
                'close': float(ticker.get('last', ticker.get('close', 0))),
                'volume': float(ticker.get('quoteVolume', 0)),
                'percentage': float(ticker.get('percentage', 0))
            }
            
            self.market_data_cache[symbol] = {
                'data': result,
                'timestamp': current_time
            }
            
            return result
            
        except Exception as e:
            logger.debug(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–ª—è {symbol}: {e}")
            return None

    def technical_analysis(self, klines: List) -> Dict:
        """–¢–µ—Ö–Ω—ñ—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑"""
        try:
            if len(klines) < 15:
                return {'rsi': 50, 'macd_hist': 0, 'volatility': 0, 'price_acceleration': 0, 'trend_strength': 0.5}
            
            closes = np.array([float(k[4]) for k in klines[-15:]])
            highs = np.array([float(k[2]) for k in klines[-15:]])
            lows = np.array([float(k[3]) for k in klines[-15:]])
            
            # RSI
            rsi = talib.RSI(closes, timeperiod=14)[-1] if len(closes) >= 14 else 50
            
            # MACD
            macd, macd_signal, _ = talib.MACD(closes)
            macd_hist = (macd - macd_signal)[-1] if len(macd) > 0 else 0
            
            # –í–æ–ª–∞—Ç–∏–ª—å–Ω—ñ—Å—Ç—å
            volatility = talib.ATR(highs, lows, closes, timeperiod=14)[-1] / closes[-1] * 100 if len(closes) >= 14 else 0
            
            # –ü—Ä–∏—Å–∫–æ—Ä–µ–Ω–Ω—è —Ü—ñ–Ω–∏
            if len(closes) >= 6:
                price_acceleration = np.polyfit(range(6), closes[-6:], 1)[0] / closes[-6] * 100
            else:
                price_acceleration = 0
            
            # –°–∏–ª–∞ —Ç—Ä–µ–Ω–¥—É
            trend_strength = self.calculate_trend_strength(closes)
            
            return {
                'rsi': round(rsi, 2),
                'macd_hist': round(macd_hist, 6),
                'volatility': round(volatility, 2),
                'price_acceleration': round(price_acceleration, 4),
                'trend_strength': trend_strength
            }
        except Exception as e:
            logger.debug(f"–ü–æ–º–∏–ª–∫–∞ —Ç–µ—Ö–Ω—ñ—á–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É: {e}")
            return {'rsi': 50, 'macd_hist': 0, 'volatility': 0, 'price_acceleration': 0, 'trend_strength': 0.5}

    def orderbook_analysis(self, orderbook: Dict) -> Dict:
        """–ê–Ω–∞–ª—ñ–∑ —Å—Ç–∞–∫–∞–Ω—É"""
        try:
            bids = orderbook.get('bids', [])
            asks = orderbook.get('asks', [])
            
            total_bid = sum(float(bid[1]) for bid in bids[:20])
            total_ask = sum(float(ask[1]) for ask in asks[:20])
            
            imbalance = (total_bid - total_ask) / (total_bid + total_ask) if (total_bid + total_ask) > 0 else 0
            
            large_bids = sum(1 for bid in bids if float(bid[0]) * float(bid[1]) > self.detection_params['large_order_threshold'])
            large_asks = sum(1 for ask in asks if float(ask[0]) * float(ask[1]) > self.detection_params['large_order_threshold'])
            
            return {
                'imbalance': round(imbalance, 4),
                'large_bids': large_bids,
                'large_asks': large_asks,
                'total_bid_volume': total_bid,
                'total_ask_volume': total_ask
            }
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É —Å—Ç–∞–∫–∞–Ω—É: {e}")
            return {'imbalance': 0, 'large_bids': 0, 'large_asks': 0, 'total_bid_volume': 0, 'total_ask_volume': 0}

    def volume_analysis(self, klines: List, market_data: Dict) -> Dict:
        """–ê–Ω–∞–ª—ñ–∑ –æ–±'—î–º—ñ–≤"""
        try:
            if len(klines) < 10:
                return {
                    'volume_spike_ratio': 1.0,
                    'volume_price_correlation': 0,
                    'current_volume': market_data.get('volume', 0),
                    'average_volume': market_data.get('volume', 0)
                }
            
            volumes = np.array([float(k[5]) for k in klines])
            closes = np.array([float(k[4]) for k in klines])
            
            avg_volume = np.mean(volumes[:-5]) if len(volumes) > 5 else volumes[0]
            current_volume = volumes[-1] if len(volumes) > 0 else 0
            volume_spike = current_volume / avg_volume if avg_volume > 0 else 1
            
            if len(closes) > 10:
                price_changes = np.diff(closes[-10:])
                volume_changes = np.diff(volumes[-10:])
                if len(price_changes) == len(volume_changes) and len(price_changes) > 1:
                    correlation = np.corrcoef(price_changes, volume_changes)[0, 1]
                else:
                    correlation = 0
            else:
                correlation = 0
            
            return {
                'volume_spike_ratio': round(volume_spike, 2),
                'volume_price_correlation': round(correlation, 2),
                'current_volume': current_volume,
                'average_volume': avg_volume
            }
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É –æ–±'—î–º—ñ–≤: {e}")
            return {'volume_spike_ratio': 1, 'volume_price_correlation': 0, 'current_volume': 0, 'average_volume': 0}

    def calculate_trend_strength(self, prices: np.ndarray) -> float:
        """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Å–∏–ª–∏ —Ç—Ä–µ–Ω–¥—É"""
        if len(prices) < 10:
            return 0.5
        
        try:
            x = np.arange(len(prices))
            slope, _, r_value, _, _ = stats.linregress(x, prices)
            trend_strength = abs(r_value ** 2)
            direction = 1 if slope > 0 else -1
            return round(trend_strength * direction, 3)
        except:
            return 0.5

    def calculate_pump_probability(self, tech: Dict, orderbook: Dict, volume: Dict) -> float:
        """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –π–º–æ–≤—ñ—Ä–Ω–æ—Å—Ç—ñ –ø–∞–º–ø—É"""
        try:
            weights = {
                'rsi': 0.25,
                'volume_spike': 0.30,
                'ob_imbalance': 0.20,
                'price_accel': 0.15,
                'volatility': 0.10
            }
            
            score = (
                (1.0 if tech['rsi'] < 35 else 0.7 if tech['rsi'] < 45 else 0.3) * weights['rsi'] +
                min(volume['volume_spike_ratio'] / 2.0, 1.0) * weights['volume_spike'] +
                max(min(orderbook.get('imbalance', 0) + 0.5, 1.0), 0.0) * weights['ob_imbalance'] +
                min(abs(tech['price_acceleration']) / 0.01, 1.0) * weights['price_accel'] +
                min(tech['volatility'] / 15.0, 1.0) * weights['volatility']
            )
            
            return round(score, 4)
        except:
            return 0.3

    def calculate_dump_probability(self, tech: Dict, orderbook: Dict, volume: Dict) -> float:
        """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –π–º–æ–≤—ñ—Ä–Ω–æ—Å—Ç—ñ –¥–∞–º–ø—É"""
        try:
            weights = {
                'rsi': 0.30,
                'volume_divergence': 0.25,
                'ob_imbalance': 0.20,
                'volatility': 0.15,
                'price_accel': 0.10
            }
            
            score = (
                (1.0 if tech['rsi'] > 75 else 0.7 if tech['rsi'] > 65 else 0.3) * weights['rsi'] +
                (1.0 - min(max(volume['volume_price_correlation'], -1.0), 1.0)) * weights['volume_divergence'] +
                max(min(-orderbook.get('imbalance', 0) + 0.5, 1.0), 0.0) * weights['ob_imbalance'] +
                min(tech['volatility'] / 20.0, 1.0) * weights['volatility'] +
                min(abs(tech['price_acceleration']) / 0.008, 1.0) * weights['price_accel']
            )
            
            return round(score, 4)
        except:
            return 0.3

    def format_signal_message(self, analysis: Dict, index: int) -> str:
        """–§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Å–∏–≥–Ω–∞–ª"""
        try:
            symbol = analysis['symbol'].replace('/USDT', '')
            pump_prob = analysis['pump_probability']
            dump_prob = analysis['dump_probability']
            
            if pump_prob > dump_prob:
                signal_emoji = "üî•"
                signal_type = "PUMP"
                signal_strength = self.get_strength_description(pump_prob)
            else:
                signal_emoji = "üìâ"
                signal_type = "DUMP"
                signal_strength = self.get_strength_description(dump_prob)
            
            return (
                f"{index}. {signal_emoji} **{symbol}** - {signal_type} ({signal_strength})\n"
                f"   üí∞ –¶—ñ–Ω–∞: ${analysis['price']:.6f}\n"
                f"   üìà –î–æ–±–æ–≤–∞ –∑–º—ñ–Ω–∞: {analysis['percentage']:+.2f}%\n"
                f"   üìä –û–±'—î–º: ${analysis['volume_usdt']:,.0f}\n"
                f"   üìç RSI: {analysis['technical_indicators']['rsi']:.1f}\n"
                f"   ‚ö° –í–æ–ª–∞—Ç–∏–ª—å–Ω—ñ—Å—Ç—å: {analysis['technical_indicators']['volatility']:.1f}%\n\n"
            )
        except:
            return f"{index}. –ü–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Å–∏–≥–Ω–∞–ª—É\n\n"

    def get_strength_description(self, probability: float) -> str:
        """–û–ø–∏—Å —Å–∏–ª–∏ —Å–∏–≥–Ω–∞–ª—É"""
        if probability > 0.8:
            return "–î–£–ñ–ï –°–ò–õ–¨–ù–ò–ô"
        elif probability > 0.7:
            return "–°–ò–õ–¨–ù–ò–ô"
        elif probability > 0.6:
            return "–ü–û–ú–Ü–†–ù–ò–ô"
        else:
            return "–°–õ–ê–ë–ö–ò–ô"

    async def pump_radar_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–î–µ—Ç–µ–∫—Ç–æ—Ä –ø–∞–º–ø—ñ–≤"""
        try:
            if not await self.check_exchange_connection():
                await update.message.reply_text("‚ùå –ù–µ–º–∞—î –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±—ñ—Ä–∂—ñ")
                return
            
            msg = await update.message.reply_text("üö® –ê–ö–¢–ò–í–£–Æ PUMP RADAR...")
            
            symbols = await self.get_all_qualified_symbols()
            symbols = symbols[:30]
            
            pump_candidates = []
            
            for symbol in symbols:
                analysis = await self.analyze_symbol(symbol)
                if analysis and analysis['pump_probability'] > 0.65:
                    pump_candidates.append(analysis)
                await asyncio.sleep(0.1)
            
            if pump_candidates:
                pump_candidates.sort(key=lambda x: x['pump_probability'], reverse=True)
                
                response = "üî• **PUMP –°–ò–ì–ù–ê–õ–ò:**\n\n"
                for i, candidate in enumerate(pump_candidates[:5], 1):
                    response += self.format_signal_message(candidate, i)
                
                await msg.edit_text(response, parse_mode='Markdown')
            else:
                await msg.edit_text("‚úÖ –ü–æ—Ç—É–∂–Ω–∏—Ö pump-—Å–∏–≥–Ω–∞–ª—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ pump radar: {e}")
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ pump radar")

    async def dump_radar_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–î–µ—Ç–µ–∫—Ç–æ—Ä –¥–∞–º–ø—ñ–≤"""
        try:
            if not await self.check_exchange_connection():
                await update.message.reply_text("‚ùå –ù–µ–º–∞—î –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±—ñ—Ä–∂—ñ")
                return
            
            msg = await update.message.reply_text("üìâ –ê–ö–¢–ò–í–£–Æ DUMP RADAR...")
            
            symbols = await self.get_all_qualified_symbols()
            symbols = symbols[:30]
            
            dump_candidates = []
            
            for symbol in symbols:
                analysis = await self.analyze_symbol(symbol)
                if analysis and analysis['dump_probability'] > 0.65:
                    dump_candidates.append(analysis)
                await asyncio.sleep(0.1)
            
            if dump_candidates:
                dump_candidates.sort(key=lambda x: x['dump_probability'], reverse=True)
                
                response = "üìâ **DUMP –°–ò–ì–ù–ê–õ–ò:**\n\n"
                for i, candidate in enumerate(dump_candidates[:5], 1):
                    response += self.format_signal_message(candidate, i)
                
                await msg.edit_text(response, parse_mode='Markdown')
            else:
                await msg.edit_text("‚úÖ –ü–æ—Ç—É–∂–Ω–∏—Ö dump-—Å–∏–≥–Ω–∞–ª—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ dump radar: {e}")
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ dump radar")

    async def deep_scan_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ì–ª–∏–±–∏–Ω–Ω–µ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è"""
        try:
            if not await self.check_exchange_connection():
                await update.message.reply_text("‚ùå –ù–µ–º–∞—î –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±—ñ—Ä–∂—ñ")
                return
            
            msg = await update.message.reply_text("üîç –ó–ê–ü–£–°–ö–ê–Æ –ì–õ–ò–ë–ò–ù–ù–ï –°–ö–ê–ù–£–í–ê–ù–ù–Ø...")
            
            symbols = await self.get_all_qualified_symbols()
            symbols = symbols[:50]
            
            results = await self.mass_analyze_symbols(symbols)
            
            if results:
                results.sort(key=lambda x: max(x['pump_probability'], x['dump_probability']), reverse=True)
                
                response = "üö® **–†–ï–ó–£–õ–¨–¢–ê–¢–ò –ì–õ–ò–ë–ò–ù–ù–û–ì–û –°–ö–ê–ù–£–í–ê–ù–ù–Ø:**\n\n"
                for i, res in enumerate(results[:8], 1):
                    response += self.format_signal_message(res, i)
                
                response += f"üìä –ó–Ω–∞–π–¥–µ–Ω–æ {len(results)} —Å–∏–≥–Ω–∞–ª—ñ–≤ –∑ {len(symbols)} –º–æ–Ω–µ—Ç"
                await msg.edit_text(response, parse_mode='Markdown')
            else:
                await msg.edit_text("‚ÑπÔ∏è –°–∏–ª—å–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≥–ª–∏–±–∏–Ω–Ω–æ–≥–æ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è: {e}")
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è")

    async def scan_stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è"""
        try:
            stats_text = (
                "üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ö–ê–ù–£–í–ê–ù–ù–Ø:**\n\n"
                f"‚Ä¢ –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–∫–∞–Ω—É–≤–∞–Ω—å: {self.performance_metrics['total_scans']}\n"
                f"‚Ä¢ –°–µ—Ä–µ–¥–Ω—è –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–∫–µ–Ω—ñ–≤: {self.performance_metrics['avg_symbols_per_scan']:.0f}\n"
                f"‚Ä¢ –°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è: {self.performance_metrics['avg_scan_time']:.1f}—Å\n"
                f"‚Ä¢ –ó–Ω–∞–π–¥–µ–Ω–æ —Å–∏–≥–Ω–∞–ª—ñ–≤: {self.performance_metrics['signals_triggered']}\n"
                f"‚Ä¢ Pump —Å–∏–≥–Ω–∞–ª—ñ–≤: {self.performance_metrics['pump_signals_detected']}\n"
                f"‚Ä¢ Dump —Å–∏–≥–Ω–∞–ª—ñ–≤: {self.performance_metrics['dump_signals_detected']}\n\n"
            )
            
            stats_text += f"üîß **–°–ò–°–¢–ï–ú–ê:**\n"
            stats_text += f"‚Ä¢ –°–∏–º–≤–æ–ª—ñ–≤ —É –∫–µ—à—ñ: {len(self.symbols_cache)}\n"
            stats_text += f"‚Ä¢ –î–∞–Ω–∏—Ö —É –∫–µ—à—ñ: {len(self.market_data_cache)}\n"
            
            await update.message.reply_text(stats_text, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

    async def check_exchange_connection(self) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±—ñ—Ä–∂—ñ"""
        if not self.exchange:
            return False
        
        try:
            await asyncio.get_event_loop().run_in_executor(
                self.executor, self.exchange.fetch_status
            )
            return True
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±—ñ—Ä–∂—ñ: {e}")
            return False

    async def check_network_connection(self) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–µ—Ä–µ–∂–µ–≤–æ–≥–æ –∑'—î–¥–Ω–∞–Ω–Ω—è"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get('https://api.binance.com/api/v3/ping', timeout=10) as response:
                    return response.status == 200
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –º–µ—Ä–µ–∂—ñ: {e}")
            return False

    async def get_orderbook_depth(self, symbol: str, limit: int = 20) -> Dict:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –≥–ª–∏–±–∏–Ω–∏ —Ä–∏–Ω–∫—É"""
        try:
            if not self.exchange:
                return {'bids': [], 'asks': [], 'symbol': symbol}
                
            orderbook = await asyncio.get_event_loop().run_in_executor(
                self.executor, lambda: self.exchange.fetch_order_book(symbol, limit)
            )
            return orderbook
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–∞–∫–∞–Ω—É –¥–ª—è {symbol}: {e}")
            return {'bids': [], 'asks': [], 'symbol': symbol}

    async def get_klines(self, symbol: str, timeframe: str = '5m', limit: int = 20) -> List:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä–∏—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö"""
        try:
            if not self.exchange:
                return []
                
            klines = await asyncio.get_event_loop().run_in_executor(
                self.executor, lambda: self.exchange.fetch_ohlcv(symbol, timeframe, limit)
            )
            return klines
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ klines –¥–ª—è {symbol}: {e}")
            return []

    async def whale_watch_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∫–∏—Ç—ñ–≤"""
        try:
            await update.message.reply_text("üêã –§—É–Ω–∫—Ü—ñ—è –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ...")
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ whale watch: {e}")

    async def liquidity_scan_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–∫–∞–Ω—É–≤–∞–Ω–Ω—è –ª—ñ–∫–≤—ñ–¥–Ω–æ—Å—Ç—ñ"""
        try:
            await update.message.reply_text("üíß –§—É–Ω–∫—Ü—ñ—è –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ...")
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ liquidity scan: {e}")

    async def volatility_alert_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–∏–≥–Ω–∞–ª–∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—ñ"""
        try:
            await update.message.reply_text("‚ö° –§—É–Ω–∫—Ü—ñ—è –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ...")
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ volatility alert: {e}")

    async def ai_risk_scan_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """AI –∞–Ω–∞–ª—ñ–∑ —Ä–∏–∑–∏–∫—ñ–≤"""
        try:
            await update.message.reply_text("ü§ñ –§—É–Ω–∫—Ü—ñ—è –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ...")
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ AI risk scan: {e}")

    async def quick_scan_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–®–≤–∏–¥–∫–µ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è"""
        try:
            await update.message.reply_text("‚ö° –§—É–Ω–∫—Ü—ñ—è –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ...")
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ quick scan: {e}")

    async def emergency_scan(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ï–∫—Å—Ç—Ä–µ–Ω–µ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è"""
        try:
            await update.message.reply_text("üö® –§—É–Ω–∫—Ü—ñ—è –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ...")
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ emergency scan: {e}")

    async def test_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–¢–µ—Å—Ç–æ–≤–∞ –∫–æ–º–∞–Ω–¥–∞"""
        try:
            await update.message.reply_text("üß™ –¢–µ—Å—Ç—É—é —Ä–æ–±–æ—Ç—É –±–æ—Ç–∞...")
            
            network_ok = await self.check_network_connection()
            exchange_ok = await self.check_exchange_connection()
            
            response = (
                f"üì° –ú–µ—Ä–µ–∂–∞: {'‚úÖ' if network_ok else '‚ùå'}\n"
                f"üìä –ë—ñ—Ä–∂–∞: {'‚úÖ' if exchange_ok else '‚ùå'}\n"
                f"üîß –°—Ç–∞—Ç—É—Å: üü¢ –ü–†–ê–¶–Æ–Ñ"
            )
            
            await update.message.reply_text(response)
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É: {e}")
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É")

    async def test_symbol_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å–∏–º–≤–æ–ª—É"""
        try:
            symbol = context.args[0].upper() if context.args else 'BTC/USDT'
            if not symbol.endswith('/USDT'):
                symbol += '/USDT'
            
            await update.message.reply_text(f"üîç –¢–µ—Å—Ç—É—é {symbol}...")
            
            analysis = await self.analyze_symbol(symbol)
            if analysis:
                response = (
                    f"üìä **{symbol.replace('/USDT', '')}:**\n"
                    f"üí∞ –¶—ñ–Ω–∞: ${analysis['price']:.6f}\n"
                    f"üìà –ó–º—ñ–Ω–∞: {analysis['percentage']:+.2f}%\n"
                    f"üìä –û–±'—î–º: ${analysis['volume_usdt']:,.0f}\n"
                    f"üö® Pump: {analysis['pump_probability']:.1%}\n"
                    f"üìâ Dump: {analysis['dump_probability']:.1%}"
                )
            else:
                response = "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Å–∏–º–≤–æ–ª"
            
            await update.message.reply_text(response, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É —Å–∏–º–≤–æ–ª—É: {e}")
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É —Å–∏–º–≤–æ–ª—É")

    async def settings_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"""
        try:
            settings_text = "‚öôÔ∏è **–ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø:**\n\n"
            for key, value in self.detection_params.items():
                settings_text += f"‚Ä¢ {key}: {value}\n"
            
            await update.message.reply_text(settings_text, parse_mode='Markdown')
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å: {e}")
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å")

    async def blacklist_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ß–æ—Ä–Ω–∏–π —Å–ø–∏—Å–æ–∫"""
        try:
            if context.args:
                symbol = context.args[0].upper()
                if symbol in self.coin_blacklist:
                    self.coin_blacklist.remove(symbol)
                    await update.message.reply_text(f"‚úÖ {symbol} –≤–∏–¥–∞–ª–µ–Ω–æ –∑ —á–æ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É")
                else:
                    self.coin_blacklist.add(symbol)
                    await update.message.reply_text(f"‚úÖ {symbol} –¥–æ–¥–∞–Ω–æ –¥–æ —á–æ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É")
            else:
                if self.coin_blacklist:
                    blacklist_text = "üö´ **–ß–û–†–ù–ò–ô –°–ü–ò–°–û–ö:**\n" + "\n".join(self.coin_blacklist)
                else:
                    blacklist_text = "üìù –ß–æ—Ä–Ω–∏–π —Å–ø–∏—Å–æ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π"
                await update.message.reply_text(blacklist_text, parse_mode='Markdown')
                
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —á–æ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É: {e}")
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ —á–æ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É")

    async def performance_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
        try:
            total = self.performance_metrics['total_scans']
            signals = self.performance_metrics['signals_triggered']
            success_rate = (signals / total * 100) if total > 0 else 0
            
            stats_text = (
                "üìà **–°–¢–ê–¢–ò–°–¢–ò–ö–ê:**\n\n"
                f"‚Ä¢ –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–∫–∞–Ω—É–≤–∞≈Ñ: {total}\n"
                f"‚Ä¢ –ó–Ω–∞–π–¥–µ–Ω–æ —Å–∏–≥–Ω–∞–ª—ñ–≤: {signals}\n"
                f"‚Ä¢ Pump —Å–∏–≥–Ω–∞–ª—ñ–≤: {self.performance_metrics['pump_signals_detected']}\n"
                f"‚Ä¢ Dump —Å–∏–≥–Ω–∞–ª—ñ–≤: {self.performance_metrics['dump_signals_detected']}\n"
                f"‚Ä¢ –£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å: {success_rate:.1f}%\n"
            )
            
            await update.message.reply_text(stats_text, parse_mode='Markdown')
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

    async def advanced_button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        try:
            if query.data == "mass_scan":
                await self.mass_scan_command(query, context)
            elif query.data == "deep_scan":
                await self.deep_scan_command(query, context)
            elif query.data == "pump_radar":
                await self.pump_radar_command(query, context)
            elif query.data == "dump_radar":
                await self.dump_radar_command(query, context)
            elif query.data == "whale_watch":
                await self.whale_watch_command(query, context)
            elif query.data == "liquidity_scan":
                await self.liquidity_scan_command(query, context)
            elif query.data == "volatility_alerts":
                await self.volatility_alert_command(query, context)
            elif query.data == "ai_risk_scan":
                await self.ai_risk_scan_command(query, context)
            elif query.data == "scan_stats":
                await self.scan_stats_command(query, context)
            elif query.data == "settings":
                await self.settings_command(query, context)
            elif query.data == "blacklist":
                await self.blacklist_command(query, context)
            elif query.data == "performance":
                await self.performance_command(query, context)
            elif query.data == "update":
                await query.edit_message_text("üîÑ –û–Ω–æ–≤–ª—é—é –¥–∞–Ω—ñ...")
                await asyncio.sleep(1)
                await self.start_command(query, context)
                
        except Exception as e:
            await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Ç—É")

    async def debug_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–î—ñ–∞–≥–Ω–æ—Å—Ç–∏—á–Ω–∞ –∫–æ–º–∞–Ω–¥–∞"""
    try:
        network_ok = await self.check_network_connection()
        exchange_ok = await self.check_exchange_connection()
        
        debug_info = f"""
üîß **–î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–ò:**

üì° –ú–µ—Ä–µ–∂–∞: {'‚úÖ' if network_ok else '‚ùå'}
üìä –ë—ñ—Ä–∂–∞: {'‚úÖ' if exchange_ok else '‚ùå'}
üìà –°–∏–º–≤–æ–ª—ñ–≤ —É –∫–µ—à—ñ: {len(self.symbols_cache)}
üíæ –î–∞–Ω–∏—Ö —É –∫–µ—à—ñ: {len(self.market_data_cache)}
‚ö° –í–æ—Ä–∫–µ—Ä—ñ–≤: {self.executor._max_workers}

üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê:**
‚Ä¢ –°–∫–∞–Ω—É–≤–∞–Ω—å: {self.performance_metrics['total_scans']}
‚Ä¢ –°–∏–≥–Ω–∞–ª—ñ–≤: {self.performance_metrics['signals_triggered']}
‚Ä¢ –£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å: {self.performance_metrics['success_rate']:.1f}%
"""

        await update.message.reply_text(debug_info, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")
        await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")
    
    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            logger.info("ü§ñ –ó–∞–ø—É—Å–∫–∞—é Ultimate Pump/Dump Detector v6.0...")
            
            # –ü–æ–ø–µ—Ä–µ–¥–Ω—î –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            logger.info("‚è≥ –ü–æ–ø–µ—Ä–µ–¥–Ω—î –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–∏–º–≤–æ–ª—ñ–≤...")
            await self.get_all_qualified_symbols()
            
            await self.app.initialize()
            await self.app.start()
            await self.app.updater.start_polling()
            
            logger.info("‚úÖ –ë–æ—Ç —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ! –û—á—ñ–∫—É—é –∫–æ–º–∞–Ω–¥–∏...")
            
            # –§–æ–Ω–æ–≤—ñ tasks
            asyncio.create_task(self.background_monitoring())
            
            while True:
                await asyncio.sleep(3600)
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞: {e}")
            raise

    async def background_monitoring(self):
        """–§–æ–Ω–æ–≤–∏–π –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥"""
        while True:
            try:
                await self.update_market_data_cache()
                await asyncio.sleep(300)
                
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Ñ–æ–Ω–æ–≤–æ–≥–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É: {e}")
                await asyncio.sleep(60)

    async def update_market_data_cache(self):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–µ—à—É"""
        try:
            symbols = await self.get_all_qualified_symbols()
            symbols = symbols[:50]
            
            for symbol in symbols:
                try:
                    await self.get_market_data(symbol)
                    await asyncio.sleep(0.1)
                except Exception as e:
                    continue
                    
            logger.info(f"‚úÖ –ö–µ—à –æ–Ω–æ–≤–ª–µ–Ω–æ: {len(self.market_data_cache)} –∑–∞–ø–∏—Å—ñ–≤")
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–µ—à—É: {e}")

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    try:
        BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
        
        if not BOT_TOKEN:
            logger.error("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å TELEGRAM_BOT_TOKEN —É –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è")
            return
        
        bot = UltimatePumpDumpDetector(BOT_TOKEN)
        logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...")
        bot.app.run_polling()
        
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –ó—É–ø–∏–Ω–∫–∞ –±–æ—Ç–∞...")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        raise

if __name__ == '__main__':
    # –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
    logging.getLogger('ccxt').setLevel(logging.WARNING)
    logging.getLogger('telegram').setLevel(logging.WARNING)
    logging.getLogger('urllib3').setLevel(logging.WARNING)
    
    # –ó–∞–ø—É—Å–∫
    main()