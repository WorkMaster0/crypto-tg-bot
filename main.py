import pandas as pd
import numpy as np
import ccxt
import asyncio
import time
from datetime import datetime, timedelta
import logging
from typing import Dict, List, Optional, Tuple
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
import talib
from scipy import stats, signal
import warnings
warnings.filterwarnings('ignore')

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('real_analysis_bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class RealAnalysisBot:
    def __init__(self, token: str):
        self.token = token
        self.app = Application.builder().token(token).build()
        
        # –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±—ñ—Ä–∂—ñ
        self.exchange = ccxt.binance({
            'enableRateLimit': True,
            'options': {'defaultType': 'future'}
        })
        
        # –ö–µ—à –¥–∞–Ω–∏—Ö
        self.market_data = {}
        self.last_analysis = {}
        self.analysis_timestamp = {}
        
        self.setup_handlers()
        logger.info("Real Analysis Bot —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")

    def setup_handlers(self):
        """–†–µ–∞–ª—å–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ –∞–Ω–∞–ª—ñ–∑—É"""
        handlers = [
            CommandHandler("start", self.start_command),
            CommandHandler("analyze", self.analyze_command),
            CommandHandler("scan", self.scan_market_command),
            CommandHandler("levels", self.key_levels_command),
            CommandHandler("volume", self.volume_analysis_command),
            CommandHandler("momentum", self.momentum_analysis_command),
            CommandHandler("correlation", self.correlation_analysis_command),
            CommandHandler("opportunities", self.opportunities_command),
            CallbackQueryHandler(self.handle_callback)
        ]
        
        for handler in handlers:
            self.app.add_handler(handler)

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°—Ç–∞—Ä—Ç–æ–≤–∞ –∫–æ–º–∞–Ω–¥–∞"""
        keyboard = [
            [InlineKeyboardButton("üîç –ê–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Ä–∏–Ω–æ–∫", callback_data="analyze"),
             InlineKeyboardButton("üìä –°–∫–∞–Ω—É–≤–∞—Ç–∏", callback_data="scan")],
            [InlineKeyboardButton("üéØ –ö–ª—é—á–æ–≤—ñ —Ä—ñ–≤–Ω—ñ", callback_data="levels"),
             InlineKeyboardButton("üìà –ê–Ω–∞–ª—ñ–∑ –æ–±'—î–º—ñ–≤", callback_data="volume")],
            [InlineKeyboardButton("‚ö° –ú–æ–º–µ–Ω—Ç—É–º", callback_data="momentum"),
             InlineKeyboardButton("üîó –ö–æ—Ä–µ–ª—è—Ü—ñ—ó", callback_data="correlation")],
            [InlineKeyboardButton("üí∞ –ú–æ–∂–ª–∏–≤–æ—Å—Ç—ñ", callback_data="opportunities")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üìä **–†–ï–ê–õ–¨–ù–ò–ô –ê–ù–ê–õ–Ü–¢–ò–ß–ù–ò–ô –ë–û–¢**\n\n"
            "–ê–Ω–∞–ª—ñ–∑ —Ä–∏–Ω–∫—É –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –¥–∞–Ω–∏—Ö\n\n"
            "‚ö° *–û—Å—Ç–∞–Ω–Ω—ñ–π –∞–Ω–∞–ª—ñ–∑:*\n"
            f"‚Ä¢ –ß–∞—Å: {datetime.now().strftime('%H:%M:%S')}\n"
            f"‚Ä¢ –°—Ç–∞—Ç—É—Å: üü¢ –ê–ö–¢–ò–í–ù–ò–ô\n\n"
            "üéØ *–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –∞–Ω–∞–ª—ñ–∑—É:*",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

    async def analyze_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–≤–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ —Ä–∏–Ω–∫—É"""
        try:
            msg = await update.message.reply_text("üìä –ó–∞–ø—É—Å–∫–∞—é –ø–æ–≤–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ —Ä–∏–Ω–∫—É...")
            
            # –û—Ç—Ä–∏–º—É—î–º–æ —Ä–µ–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ
            btc_data = await self.get_real_time_data('BTC/USDT')
            eth_data = await self.get_real_time_data('ETH/USDT')
            sol_data = await self.get_real_time_data('SOL/USDT')
            
            if not all([btc_data, eth_data, sol_data]):
                await msg.edit_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É")
                return
            
            # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –∫–æ–∂–µ–Ω –∞–∫—Ç–∏–≤
            btc_analysis = await self.analyze_symbol('BTC/USDT', btc_data)
            eth_analysis = await self.analyze_symbol('ETH/USDT', eth_data)
            sol_analysis = await self.analyze_symbol('SOL/USDT', sol_data)
            
            response = "üìä **–†–ï–ó–£–õ–¨–¢–ê–¢–ò –ê–ù–ê–õ–Ü–ó–£:**\n\n"
            
            for analysis in [btc_analysis, eth_analysis, sol_analysis]:
                if analysis:
                    emoji = "üü¢" if analysis['trend'] == 'bullish' else "üî¥"
                    response += f"{emoji} **{analysis['symbol']}** - ${analysis['price']:.2f}\n"
                    response += f"   üìà –¢—Ä–µ–Ω–¥: {analysis['trend']}\n"
                    response += f"   üìä RSI: {analysis['rsi']:.1f}\n"
                    response += f"   ‚ö° –ú–æ–º–µ–Ω—Ç—É–º: {analysis['momentum']:.2f}\n"
                    response += f"   üí∞ –û–±'—î–º: ${analysis['volume']:,.0f}\n\n"
            
            # –î–æ–¥–∞—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É –æ—Ü—ñ–Ω–∫—É —Ä–∏–Ω–∫—É
            market_status = await self.assess_market_status([btc_analysis, eth_analysis, sol_analysis])
            response += f"üåê **–°–¢–ê–¢–£–° –†–ò–ù–ö–£: {market_status}**\n"
            
            await msg.edit_text(response, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É: {e}")
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É —Ä–∏–Ω–∫—É")

    async def get_real_time_data(self, symbol: str) -> Optional[Dict]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö –∑ –±—ñ—Ä–∂—ñ"""
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ –¥–∞–Ω—ñ
            ohlcv = await asyncio.get_event_loop().run_in_executor(
                None, lambda: self.exchange.fetch_ohlcv(symbol, '1h', 100)
            )
            
            if not ohlcv or len(ohlcv) < 50:
                return None
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π ticker
            ticker = await asyncio.get_event_loop().run_in_executor(
                None, lambda: self.exchange.fetch_ticker(symbol)
            )
            
            return {
                'symbol': symbol,
                'ohlcv': ohlcv,
                'ticker': ticker,
                'timestamp': datetime.now()
            }
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–ª—è {symbol}: {e}")
            return None

    async def analyze_symbol(self, symbol: str, market_data: Dict) -> Optional[Dict]:
        """–†–µ–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ —Å–∏–º–≤–æ–ª—É"""
        try:
            ohlcv = market_data['ohlcv']
            ticker = market_data['ticker']
            
            closes = np.array([x[4] for x in ohlcv])
            highs = np.array([x[2] for x in ohlcv])
            lows = np.array([x[3] for x in ohlcv])
            volumes = np.array([x[5] for x in ohlcv])
            
            # –¢–µ—Ö–Ω—ñ—á–Ω—ñ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏
            rsi = talib.RSI(closes, 14)
            macd, macd_signal, _ = talib.MACD(closes)
            stoch = talib.STOCH(highs, lows, closes)
            atr = talib.ATR(highs, lows, closes, 14)
            
            # –ê–Ω–∞–ª—ñ–∑ —Ç—Ä–µ–Ω–¥—É
            ema20 = talib.EMA(closes, 20)
            ema50 = talib.EMA(closes, 50)
            
            if np.isnan(ema20[-1]) or np.isnan(ema50[-1]):
                return None
            
            # –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ç—Ä–µ–Ω–¥—É
            if ema20[-1] > ema50[-1] and closes[-1] > ema20[-1]:
                trend = 'bullish'
            elif ema20[-1] < ema50[-1] and closes[-1] < ema20[-1]:
                trend = 'bearish'
            else:
                trend = 'neutral'
            
            # –ê–Ω–∞–ª—ñ–∑ –º–æ–º–µ–Ω—Ç—É–º—É
            momentum = self.calculate_momentum_strength(closes, volumes)
            
            return {
                'symbol': symbol,
                'price': ticker['last'],
                'trend': trend,
                'rsi': rsi[-1] if not np.isnan(rsi[-1]) else 50,
                'momentum': momentum,
                'volume': np.mean(volumes[-5:]),
                'volatility': atr[-1] / closes[-1] * 100 if not np.isnan(atr[-1]) else 0,
                'timestamp': datetime.now()
            }
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É {symbol}: {e}")
            return None

    def calculate_momentum_strength(self, prices: np.ndarray, volumes: np.ndarray) -> float:
        """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Å–∏–ª–∏ –º–æ–º–µ–Ω—Ç—É–º—É"""
        if len(prices) < 20:
            return 0.0
        
        # Price momentum
        price_change = (prices[-1] - prices[-20]) / prices[-20] * 100
        
        # Volume momentum
        volume_change = (volumes[-1] - np.mean(volumes[-20:-10])) / np.mean(volumes[-20:-10]) * 100
        
        # Combined momentum score
        momentum_score = (price_change * 0.6 + volume_change * 0.4) / 10
        return max(min(momentum_score, 10.0), -10.0)

    async def assess_market_status(self, analyses: List[Dict]) -> str:
        """–û—Ü—ñ–Ω–∫–∞ –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞–Ω—É —Ä–∏–Ω–∫—É"""
        if not analyses:
            return "–ù–ï–í–Ü–î–û–ú–ò–ô"
        
        bullish_count = sum(1 for a in analyses if a and a['trend'] == 'bullish')
        bearish_count = sum(1 for a in analyses if a and a['trend'] == 'bearish')
        
        if bullish_count >= 2:
            return "–ë–ò–ß–ò–ô"
        elif bearish_count >= 2:
            return "–ú–ï–î–í–ï–ñ–ò–ô"
        else:
            return "–ù–ï–ô–¢–†–ê–õ–¨–ù–ò–ô"

    async def scan_market_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–∫–∞–Ω—É–≤–∞–Ω–Ω—è —Ä–∏–Ω–∫—É –Ω–∞ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ"""
        try:
            msg = await update.message.reply_text("üîç –°–∫–∞–Ω—É—é —Ä–∏–Ω–æ–∫ –Ω–∞ —Ç–æ—Ä–≥–æ–≤—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ...")
            
            symbols = ['BTC/USDT', 'ETH/USDT', 'BNB/USDT', 'SOL/USDT', 'XRP/USDT', 'ADA/USDT']
            opportunities = []
            
            for symbol in symbols:
                data = await self.get_real_time_data(symbol)
                if data:
                    analysis = await self.analyze_symbol(symbol, data)
                    if analysis and self.is_trading_opportunity(analysis):
                        opportunities.append(analysis)
            
            if opportunities:
                response = "üéØ **–¢–û–†–ì–û–í–Ü –ú–û–ñ–õ–ò–í–û–°–¢–Ü:**\n\n"
                
                for i, opp in enumerate(opportunities[:5], 1):
                    emoji = "üü¢" if opp['trend'] == 'bullish' else "üî¥"
                    response += f"{i}. {emoji} **{opp['symbol']}**\n"
                    response += f"   üí∞ –¶—ñ–Ω–∞: ${opp['price']:.2f}\n"
                    response += f"   üìà –¢—Ä–µ–Ω–¥: {opp['trend']}\n"
                    response += f"   üìä RSI: {opp['rsi']:.1f}\n"
                    response += f"   ‚ö° –ú–æ–º–µ–Ω—Ç—É–º: {opp['momentum']:.2f}\n\n"
                
                await msg.edit_text(response, parse_mode='Markdown')
            else:
                await msg.edit_text("üìâ –ù–∞—Ä–∞–∑—ñ —è–∫—ñ—Å–Ω–∏—Ö —Ç–æ—Ä–≥–æ–≤–∏—Ö –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è: {e}")
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è —Ä–∏–Ω–∫—É")

    def is_trading_opportunity(self, analysis: Dict) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —î –∞–Ω–∞–ª—ñ–∑ —Ç–æ—Ä–≥–æ–≤–æ—é –º–æ–∂–ª–∏–≤—ñ—Å—Ç—é"""
        if not analysis:
            return False
        
        # –ö—Ä–∏—Ç–µ—Ä—ñ—ó —è–∫—ñ—Å–Ω–æ—ó –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ
        rsi_ok = (analysis['rsi'] < 35 and analysis['trend'] == 'bullish') or \
                 (analysis['rsi'] > 65 and analysis['trend'] == 'bearish')
        
        momentum_ok = abs(analysis['momentum']) > 2.0
        volume_ok = analysis['volume'] > 1000000  # –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –æ–±'—î–º
        
        return rsi_ok and momentum_ok and volume_ok

    async def key_levels_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–ª—é—á–æ–≤—ñ —Ä—ñ–≤–Ω—ñ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏/–æ–ø–æ—Ä—É"""
        try:
            msg = await update.message.reply_text("üéØ –í–∏–∑–Ω–∞—á–∞—é –∫–ª—é—á–æ–≤—ñ —Ä—ñ–≤–Ω—ñ...")
            
            symbol = 'BTC/USDT'
            data = await self.get_real_time_data(symbol)
            
            if not data:
                await msg.edit_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ")
                return
            
            levels = self.find_key_levels(data['ohlcv'])
            
            response = f"üéØ **–ö–õ–Æ–ß–û–í–Ü –†–Ü–í–ù–Ü {symbol}:**\n\n"
            response += f"üìä –ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞: ${data['ticker']['last']:.2f}\n\n"
            
            response += "üõ°Ô∏è **–ü–Ü–î–¢–†–ò–ú–ö–ê:**\n"
            for level in levels['support'][:3]:
                response += f"‚Ä¢ ${level:.2f}\n"
            
            response += "\nüìà **–û–ü–Ü–†:**\n"
            for level in levels['resistance'][:3]:
                response += f"‚Ä¢ ${level:.2f}\n"
            
            response += f"\nüìè –í—ñ–¥—Å—Ç–∞–Ω—å –¥–æ –Ω–∞–π–±–ª–∏–∂—á–æ–≥–æ —Ä—ñ–≤–Ω—è: {levels['distance_to_nearest']:.2f}%"
            
            await msg.edit_text(response, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É —Ä—ñ–≤–Ω—ñ–≤: {e}")
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É —Ä—ñ–≤–Ω—ñ–≤")

    def find_key_levels(self, ohlcv: List) -> Dict:
        """–ó–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –∫–ª—é—á–æ–≤–∏—Ö —Ä—ñ–≤–Ω—ñ–≤ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏/–æ–ø–æ—Ä—É"""
        highs = np.array([x[2] for x in ohlcv])
        lows = np.array([x[3] for x in ohlcv])
        closes = np.array([x[4] for x in ohlcv])
        
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ª–æ–∫–∞–ª—å–Ω—ñ –µ–∫—Å—Ç—Ä–µ–º—É–º–∏
        support_levels = []
        resistance_levels = []
        
        # –ü—Ä–æ—Å—Ç–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ—à—É–∫—É —Ä—ñ–≤–Ω—ñ–≤
        for i in range(2, len(ohlcv) - 2):
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–ª—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏
            if lows[i] < lows[i-1] and lows[i] < lows[i-2] and lows[i] < lows[i+1] and lows[i] < lows[i+2]:
                support_levels.append(lows[i])
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–ª—è –æ–ø–æ—Ä—É
            if highs[i] > highs[i-1] and highs[i] > highs[i-2] and highs[i] > highs[i+1] and highs[i] > highs[i+2]:
                resistance_levels.append(highs[i])
        
        # –£–Ω—ñ–∫–∞–ª—å–Ω—ñ —Ä—ñ–≤–Ω—ñ
        support_levels = sorted(set(support_levels))
        resistance_levels = sorted(set(resistance_levels))
        
        # –í—ñ–¥—Å—Ç–∞–Ω—å –¥–æ –Ω–∞–π–±–ª–∏–∂—á–æ–≥–æ —Ä—ñ–≤–Ω—è
        current_price = closes[-1]
        nearest_level = min(
            [abs(price - current_price) for price in support_levels + resistance_levels],
            default=0
        )
        distance_pct = nearest_level / current_price * 100
        
        return {
            'support': support_levels,
            'resistance': resistance_levels,
            'distance_to_nearest': distance_pct
        }

    async def volume_analysis_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ê–Ω–∞–ª—ñ–∑ –æ–±'—î–º—ñ–≤"""
        try:
            msg = await update.message.reply_text("üìä –ê–Ω–∞–ª—ñ–∑—É—é –æ–±'—î–º–Ω—ñ –ø–∞—Ç—Ç–µ—Ä–Ω–∏...")
            
            symbol = 'BTC/USDT'
            data = await self.get_real_time_data(symbol)
            
            if not data:
                await msg.edit_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ")
                return
            
            volume_analysis = self.analyze_volume_patterns(data['ohlcv'])
            
            response = f"üìä **–ê–ù–ê–õ–Ü–ó –û–ë'–Ñ–ú–Ü–í {symbol}:**\n\n"
            response += f"üìà –ü–æ—Ç–æ—á–Ω–∏–π –æ–±'—î–º: ${volume_analysis['current_volume']:,.0f}\n"
            response += f"üìä –°–µ—Ä–µ–¥–Ω—ñ–π –æ–±'—î–º: ${volume_analysis['avg_volume']:,.0f}\n"
            response += f"‚ö° –û–±'—î–º–Ω–∏–π —Ç–∏—Å–∫: {volume_analysis['volume_pressure']:.2f}\n"
            response += f"üéØ –¢—Ä–µ–Ω–¥ –æ–±'—î–º—ñ–≤: {volume_analysis['volume_trend']}\n\n"
            
            response += "üí° **–Ü–ù–¢–ï–†–ü–†–ï–¢–ê–¶–Ü–Ø:**\n"
            if volume_analysis['volume_pressure'] > 1.5:
                response += "‚Ä¢ –°–∏–ª—å–Ω–∏–π –æ–±'—î–º–Ω–∏–π —Ç–∏—Å–∫\n‚Ä¢ –ú–æ–∂–ª–∏–≤—ñ—Å—Ç—å –ø—Ä–æ–±–æ—é\n"
            elif volume_analysis['volume_pressure'] < 0.7:
                response += "‚Ä¢ –ù–∏–∑—å–∫–∞ –æ–±'—î–º–Ω–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å\n‚Ä¢ –ö–æ–Ω—Å–æ–ª—ñ–¥–∞—Ü—ñ—è\n"
            else:
                response += "‚Ä¢ –ù–æ—Ä–º–∞–ª—å–Ω–∞ –æ–±'—î–º–Ω–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å\n"
            
            await msg.edit_text(response, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É –æ–±'—î–º—ñ–≤: {e}")
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É –æ–±'—î–º—ñ–≤")

    def analyze_volume_patterns(self, ohlcv: List) -> Dict:
        """–ê–Ω–∞–ª—ñ–∑ –æ–±'—î–º–Ω–∏—Ö –ø–∞—Ç—Ç–µ—Ä–Ω—ñ–≤"""
        volumes = np.array([x[5] for x in ohlcv])
        
        current_volume = volumes[-1]
        avg_volume = np.mean(volumes[-20:])
        volume_pressure = current_volume / avg_volume if avg_volume > 0 else 1.0
        
        # –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ç—Ä–µ–Ω–¥—É –æ–±'—î–º—ñ–≤
        if current_volume > np.mean(volumes[-5:]):
            volume_trend = "–ó–†–û–°–¢–ê–ù–ù–Ø"
        elif current_volume < np.mean(volumes[-5:]):
            volume_trend = "–°–ü–ê–î–ê–ù–ù–Ø"
        else:
            volume_trend = "–°–¢–ê–ë–Ü–õ–¨–ù–Ü–°–¢–¨"
        
        return {
            'current_volume': current_volume,
            'avg_volume': avg_volume,
            'volume_pressure': volume_pressure,
            'volume_trend': volume_trend
        }

    async def momentum_analysis_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ê–Ω–∞–ª—ñ–∑ –º–æ–º–µ–Ω—Ç—É–º—É"""
        try:
            msg = await update.message.reply_text("‚ö° –ê–Ω–∞–ª—ñ–∑—É—é –º–æ–º–µ–Ω—Ç—É–º...")
            
            symbol = 'BTC/USDT'
            data = await self.get_real_time_data(symbol)
            
            if not data:
                await msg.edit_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ")
                return
            
            momentum_analysis = self.analyze_momentum(data['ohlcv'])
            
            response = f"‚ö° **–ê–ù–ê–õ–Ü–ó –ú–û–ú–ï–ù–¢–£–ú–£ {symbol}:**\n\n"
            response += f"üìà –°–∏–ª–∞ –º–æ–º–µ–Ω—Ç—É–º—É: {momentum_analysis['momentum_strength']:.2f}\n"
            response += f"üìä –ù–∞–ø—Ä—è–º–æ–∫: {momentum_analysis['momentum_direction']}\n"
            response += f"üéØ RSI: {momentum_analysis['rsi']:.1f}\n"
            response += f"üìâ Stochastic: {momentum_analysis['stoch']:.1f}\n\n"
            
            response += "üîç **–°–ò–ì–ù–ê–õ–ò:**\n"
            if momentum_analysis['rsi'] < 30:
                response += "‚Ä¢ –ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω—ñ—Å—Ç—å (RSI < 30)\n"
            elif momentum_analysis['rsi'] > 70:
                response += "‚Ä¢ –ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω—ñ—Å—Ç—å (RSI > 70)\n"
            
            if momentum_analysis['stoch'] < 20:
                response += "‚Ä¢ –ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω—ñ—Å—Ç—å (Stoch < 20)\n"
            elif momentum_analysis['stoch'] > 80:
                response += "‚Ä¢ –ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω—ñ—Å—Ç—å (Stoch > 80)\n"
            
            await msg.edit_text(response, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É –º–æ–º–µ–Ω—Ç—É–º—É: {e}")
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É –º–æ–º–µ–Ω—Ç—É–º—É")

    def analyze_momentum(self, ohlcv: List) -> Dict:
        """–ê–Ω–∞–ª—ñ–∑ –º–æ–º–µ–Ω—Ç—É–º—É"""
        closes = np.array([x[4] for x in ohlcv])
        highs = np.array([x[2] for x in ohlcv])
        lows = np.array([x[3] for x in ohlcv])
        
        # RSI
        rsi = talib.RSI(closes, 14)
        
        # Stochastic
        stoch_k, stoch_d = talib.STOCH(highs, lows, closes)
        
        # MACD
        macd, macd_signal, _ = talib.MACD(closes)
        
        # –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –Ω–∞–ø—Ä—è–º–∫—É –º–æ–º–µ–Ω—Ç—É–º—É
        if len(macd) > 1 and macd[-1] > macd_signal[-1]:
            momentum_direction = "–ë–ò–ß–ò–ô"
        elif len(macd) > 1 and macd[-1] < macd_signal[-1]:
            momentum_direction = "–ú–ï–î–í–ï–ñ–ò–ô"
        else:
            momentum_direction = "–ù–ï–ô–¢–†–ê–õ–¨–ù–ò–ô"
        
        # –°–∏–ª–∞ –º–æ–º–µ–Ω—Ç—É–º—É
        momentum_strength = abs(macd[-1] - macd_signal[-1]) / np.std(closes) * 100 if len(macd) > 1 else 0
        
        return {
            'rsi': rsi[-1] if not np.isnan(rsi[-1]) else 50,
            'stoch': stoch_k[-1] if not np.isnan(stoch_k[-1]) else 50,
            'momentum_direction': momentum_direction,
            'momentum_strength': momentum_strength
        }

    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–Ω–∏–∫ callback"""
        query = update.callback_query
        await query.answer()
        
        try:
            if query.data == "analyze":
                await self.analyze_command(query, context)
            elif query.data == "scan":
                await self.scan_market_command(query, context)
            elif query.data == "levels":
                await self.key_levels_command(query, context)
            elif query.data == "volume":
                await self.volume_analysis_command(query, context)
            elif query.data == "momentum":
                await self.momentum_analysis_command(query, context)
            elif query.data == "correlation":
                await self.correlation_analysis_command(query, context)
            elif query.data == "opportunities":
                await self.opportunities_command(query, context)
                
        except Exception as e:
            await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Ç—É")

    async def correlation_analysis_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ê–Ω–∞–ª—ñ–∑ –∫–æ—Ä–µ–ª—è—Ü—ñ–π"""
        try:
            msg = await update.message.reply_text("üîó –ê–Ω–∞–ª—ñ–∑—É—é –∫–æ—Ä–µ–ª—è—Ü—ñ—ó...")
            
            correlations = await self.calculate_correlations()
            
            response = "üîó **–ö–û–†–ï–õ–Ø–¶–Ü–ô–ù–ò–ô –ê–ù–ê–õ–Ü–ó:**\n\n"
            
            for pair, corr in correlations.items():
                correlation_str = f"{corr:.2f}"
                if corr > 0.7:
                    emoji = "üî¥"
                elif corr < -0.7:
                    emoji = "üü¢"
                else:
                    emoji = "‚ö™"
                
                response += f"{emoji} {pair}: {correlation_str}\n"
            
            response += "\nüí° **–Ü–ù–¢–ï–†–ü–†–ï–¢–ê–¶–Ü–Ø:**\n"
            response += "‚Ä¢ > 0.7: –°–∏–ª—å–Ω–∞ –ø–æ–∑–∏—Ç–∏–≤–Ω–∞ –∫–æ—Ä–µ–ª—è—Ü—ñ—è\n"
            response += "‚Ä¢ < -0.7: –°–∏–ª—å–Ω–∞ –Ω–µ–≥–∞—Ç–∏–≤–Ω–∞ –∫–æ—Ä–µ–ª—è—Ü—ñ—è\n"
            response += "‚Ä¢ -0.3 –¥–æ 0.3: –°–ª–∞–±–∫–∞ –∫–æ—Ä–µ–ª—è—Ü—ñ—è\n"
            
            await msg.edit_text(response, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É –∫–æ—Ä–µ–ª—è—Ü—ñ–π: {e}")
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É –∫–æ—Ä–µ–ª—è—Ü—ñ–π")

    async def calculate_correlations(self) -> Dict:
        """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∫–æ—Ä–µ–ª—è—Ü—ñ–π"""
        symbols = ['BTC/USDT', 'ETH/USDT', 'BNB/USDT']
        correlations = {}
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –¥–ª—è –≤—Å—ñ—Ö —Å–∏–º–≤–æ–ª—ñ–≤
        data = {}
        for symbol in symbols:
            symbol_data = await self.get_real_time_data(symbol)
            if symbol_data:
                data[symbol] = np.array([x[4] for x in symbol_data['ohlcv']])
        
        # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –∫–æ—Ä–µ–ª—è—Ü—ñ—ó
        for i, sym1 in enumerate(symbols):
            for sym2 in symbols[i+1:]:
                if sym1 in data and sym2 in data and len(data[sym1]) == len(data[sym2]):
                    corr = np.corrcoef(data[sym1][-30:], data[sym2][-30:])[0, 1]
                    if not np.isnan(corr):
                        pair_name = f"{sym1.split('/')[0]}-{sym2.split('/')[0]}"
                        correlations[pair_name] = corr
        
        return correlations

    async def opportunities_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ—à—É–∫ –Ω–∞–π–∫—Ä–∞—â–∏—Ö –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π"""
        try:
            msg = await update.message.reply_text("üí∞ –®—É–∫–∞—é –Ω–∞–π–∫—Ä–∞—â—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ...")
            
            symbols = ['BTC/USDT', 'ETH/USDT', 'BNB/USDT', 'SOL/USDT']
            best_opportunities = []
            
            for symbol in symbols:
                data = await self.get_real_time_data(symbol)
                if data:
                    analysis = await self.analyze_symbol(symbol, data)
                    if analysis:
                        score = self.calculate_opportunity_score(analysis)
                        if score > 7.0:  # –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –ø–æ—Ä—ñ–≥
                            best_opportunities.append((analysis, score))
            
            if best_opportunities:
                best_opportunities.sort(key=lambda x: x[1], reverse=True)
                
                response = "üí∞ **–ù–ê–ô–ö–†–ê–©–Ü –ú–û–ñ–õ–ò–í–û–°–¢–Ü:**\n\n"
                
                for i, (analysis, score) in enumerate(best_opportunities[:3], 1):
                    emoji = "üü¢" if analysis['trend'] == 'bullish' else "üî¥"
                    response += f"{i}. {emoji} **{analysis['symbol']}** - –û—Ü—ñ–Ω–∫–∞: {score:.1f}/10\n"
                    response += f"   üí∞ –¶—ñ–Ω–∞: ${analysis['price']:.2f}\n"
                    response += f"   üìà –¢—Ä–µ–Ω–¥: {analysis['trend']}\n"
                    response += f"   üìä RSI: {analysis['rsi']:.1f}\n"
                    response += f"   ‚ö° –ú–æ–º–µ–Ω—Ç—É–º: {analysis['momentum']:.2f}\n\n"
                
                await msg.edit_text(response, parse_mode='Markdown')
            else:
                await msg.edit_text("üìâ –ù–∞—Ä–∞–∑—ñ –Ω–∞–π–∫—Ä–∞—â–∏—Ö –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π: {e}")
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π")

    def calculate_opportunity_score(self, analysis: Dict) -> float:
        """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –æ—Ü—ñ–Ω–∫–∏ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ"""
        if not analysis:
            return 0.0
        
        # –í–∞–≥–∏ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ñ–∞–∫—Ç–æ—Ä—ñ–≤
        weights = {
            'rsi': 0.3,
            'momentum': 0.3,
            'volume': 0.2,
            'volatility': 0.2
        }
        
        # –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è —Ñ–∞–∫—Ç–æ—Ä—ñ–≤
        rsi_score = 0
        if analysis['trend'] == 'bullish' and analysis['rsi'] < 35:
            rsi_score = (35 - analysis['rsi']) / 35 * 10
        elif analysis['trend'] == 'bearish' and analysis['rsi'] > 65:
            rsi_score = (analysis['rsi'] - 65) / 35 * 10
        
        momentum_score = min(abs(analysis['momentum']) * 2, 10)
        volume_score = min(analysis['volume'] / 5000000 * 10, 10)  # –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è –æ–±'—î–º—É
        volatility_score = min(analysis['volatility'] * 100, 10)  # –í–æ–ª–∞—Ç–∏–ª—å–Ω—ñ—Å—Ç—å —É %
        
        # –ó–∞–≥–∞–ª—å–Ω–∞ –æ—Ü—ñ–Ω–∫–∞
        total_score = (
            rsi_score * weights['rsi'] +
            momentum_score * weights['momentum'] +
            volume_score * weights['volume'] +
            volatility_score * weights['volatility']
        )
        
        return min(total_score, 10.0)

    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞—é Real Analysis Bot...")
            await self.app.initialize()
            await self.app.start()
            await self.app.updater.start_polling()
            
            logger.info("‚úÖ –ë–æ—Ç —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ!")
            
            while True:
                await asyncio.sleep(3600)
                
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É: {e}")
            raise

async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    try:
        BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
        if not BOT_TOKEN:
            logger.error("–í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å TELEGRAM_BOT_TOKEN")
            return
        
        bot = RealAnalysisBot(BOT_TOKEN)
        await bot.run()
        
    except KeyboardInterrupt:
        logger.info("–ó—É–ø–∏–Ω–∫–∞ –±–æ—Ç–∞...")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")

if __name__ == '__main__':
    import os
    asyncio.run(main())