import matplotlib
matplotlib.use('Agg')
import pandas as pd
import numpy as np
import requests
import time
from datetime import datetime, timedelta
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.ensemble import IsolationForest
from sklearn.preprocessing import StandardScaler
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
import asyncio
from flask import Flask, request, jsonify
import threading
import json
from typing import Dict, List, Optional, Tuple, Any
import logging
import math
import os
import re
import heapq
from collections import deque, defaultdict
from concurrent.futures import ThreadPoolExecutor
import talib
from scipy import stats
import ccxt
import aiohttp
import warnings
warnings.filterwarnings('ignore')

# –î–µ—Ç–∞–ª—å–Ω–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot_debug.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class UltimatePumpDumpDetector:
    def __init__(self, token: str):
        self.token = token
        self.app = Application.builder().token(token).build()
        
        # –ü–æ–∫—Ä–∞—â–µ–Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±—ñ—Ä–∂ —á–µ—Ä–µ–∑ CCXT
        logger.info("–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Binance...")
        try:
            self.exchange = ccxt.binance({
                'enableRateLimit': True,
                'timeout': 30000,
                'options': {
                    'defaultType': 'spot',
                    'adjustForTimeDifference': True,
                }
            })
            logger.info("–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Binance —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó Binance: {e}")
            self.exchange = None
        
        # –†–æ–∑—à–∏—Ä–µ–Ω–∏–π —á–æ—Ä–Ω–∏–π —Å–ø–∏—Å–æ–∫
        self.garbage_symbols = self._load_garbage_symbols()
        self.coin_blacklist = set()
        
        # –î–∏–Ω–∞–º—ñ—á–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è –≤–∏—è–≤–ª–µ–Ω–Ω—è (–∑–Ω–∏–∂–µ–Ω—ñ –ø–æ—Ä–æ–≥–∏ –¥–ª—è —Ç–µ—Å—Ç—É)
        self.detection_params = {
            'volume_spike_threshold': 1.5,
            'price_acceleration_min': 0.002,
            'rsi_oversold': 30,
            'rsi_overbought': 70,
            'orderbook_imbalance_min': 0.1,
            'large_order_threshold': 10000,
            'min_volume_usdt': 10000,
            'max_volume_usdt': 1000000,
            'price_change_5m_min': 1.0,
            'wick_ratio_threshold': 0.3,
            'market_cap_filter': 1000000,
            'liquidity_score_min': 0.3,
            'pump_probability_threshold': 0.4,
            'dump_probability_threshold': 0.4,
            'whale_volume_threshold': 10000,
            'volatility_spike_threshold': 1.5
        }
        
        # –¢—Ä–∏–≤–æ–∂–Ω—ñ —Å–∏–≥–Ω–∞–ª–∏ —Ç–∞ —ñ—Å—Ç–æ—Ä—ñ—è
        self.live_signals = deque(maxlen=100)
        self.market_anomalies = defaultdict(list)
        self.performance_metrics = {
            'total_scans': 0,
            'signals_triggered': 0,
            'success_rate': 0.0,
            'avg_response_time': 0.0,
            'false_positives': 0,
            'pump_signals_detected': 0,
            'dump_signals_detected': 0
        }
        
        # –ü—É–ª –ø–æ—Ç–æ–∫—ñ–≤ –¥–ª—è –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ–≥–æ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è
        self.executor = ThreadPoolExecutor(max_workers=4)
        self.setup_handlers()
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö
        self.market_data_cache = {}
        self.last_update_time = time.time()

    def _load_garbage_symbols(self):
        """–†–æ–∑—à–∏—Ä–µ–Ω–∏–π —Å–ø–∏—Å–æ–∫ –Ω–µ–ø–æ—Ç—Ä—ñ–±–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤"""
        base = {
            'USD', 'EUR', 'GBP', 'JPY', 'CNY', 'RUB', 'TRY', 'BRL', 'KRW', 'AUD',
            'USDC', 'USDT', 'BUSD', 'DAI', 'TUSD', 'PAX', 'UST', 'HUSD', 'GUSD',
            'PAXG', 'WBTC', 'BTCB', 'ETHB', 'BNB', 'HT', 'OKB', 'LEO', 'LINK',
            'XRP', 'ADA', 'DOT', 'DOGE', 'SHIB', 'MATIC', 'SOL', 'AVAX', 'FTM',
            'SXP', 'CHZ', 'VET', 'THETA', 'FTT', 'BTT', 'WIN', 'TRX', 'BCH',
            'LTC', 'EOS', 'XLM', 'XMR', 'XTZ', 'ZEC', 'DASH', 'ETC', 'NEO'
        }
        
        patterns = {
            'UP', 'DOWN', 'BULL', 'BEAR', 'LONG', 'SHORT', 'HALF', 'FULL',
            'HEDGE', 'DOOM', 'MOON', 'SUN', 'EARTH', 'MARS', 'PLUTO',
            '3L', '3S', '2L', '2S', '1L', '1S', '5L', '5S'
        }
        
        return base.union(patterns)

    def setup_handlers(self):
        """–û–Ω–æ–≤–ª–µ–Ω—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∑ debug"""
        handlers = [
            CommandHandler("start", self.start_command),
            CommandHandler("scan", self.deep_scan_command),
            CommandHandler("pump_radar", self.pump_radar_command),
            CommandHandler("dump_radar", self.dump_radar_command),
            CommandHandler("liquidity_scan", self.liquidity_scan_command),
            CommandHandler("whale_watch", self.whale_watch_command),
            CommandHandler("volatility_alert", self.volatility_alert_command),
            CommandHandler("ai_risk_scan", self.ai_risk_scan_command),
            CommandHandler("settings", self.settings_command),
            CommandHandler("blacklist", self.blacklist_command),
            CommandHandler("performance", self.performance_command),
            CommandHandler("quick_scan", self.quick_scan_command),
            CommandHandler("emergency", self.emergency_scan),
            CommandHandler("debug", self.debug_command),
            CommandHandler("test", self.test_command),
            CallbackQueryHandler(self.advanced_button_handler)
        ]
        
        for handler in handlers:
            self.app.add_handler(handler)

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–Ω–æ–≤–ª–µ–Ω–µ –º–µ–Ω—é"""
        keyboard = [
            [InlineKeyboardButton("üö® PUMP RADAR", callback_data="pump_radar"),
             InlineKeyboardButton("üìâ DUMP RADAR", callback_data="dump_radar")],
            [InlineKeyboardButton("üêã WHALE WATCH", callback_data="whale_watch"),
             InlineKeyboardButton("üíß LIQUIDITY SCAN", callback_data="liquidity_scan")],
            [InlineKeyboardButton("‚ö° VOLATILITY ALERTS", callback_data="volatility_alerts"),
             InlineKeyboardButton("ü§ñ AI RISK SCAN", callback_data="ai_risk_scan")],
            [InlineKeyboardButton("üîç DEEP SCAN", callback_data="deep_scan"),
             InlineKeyboardButton("‚ö° QUICK SCAN", callback_data="quick_scan")],
            [InlineKeyboardButton("‚öôÔ∏è SETTINGS", callback_data="settings"),
             InlineKeyboardButton("üìà PERFORMANCE", callback_data="performance")],
            [InlineKeyboardButton("üö´ BLACKLIST", callback_data="blacklist"),
             InlineKeyboardButton("üîÑ UPDATE", callback_data="update")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "ü§ñ **ULTIMATE PUMP/DUMP DETECTOR v4.1**\n\n",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

    async def test_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–¢–µ—Å—Ç–æ–≤–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ä–æ–±–æ—Ç–∏"""
        logger.info("–¢–µ—Å—Ç–æ–≤–∞ –∫–æ–º–∞–Ω–¥–∞ –≤–∏–∫–ª–∏–∫–∞–Ω–∞")
        await update.message.reply_text("üß™ –¢–µ—Å—Ç—É—é —Ä–æ–±–æ—Ç—É –±–æ—Ç–∞...")
        
        # –¢–µ—Å—Ç 1: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –º–µ—Ä–µ–∂—ñ
        network_ok = await self.check_network_connection()
        await update.message.reply_text(f"üì° –ú–µ—Ä–µ–∂–∞: {'‚úÖ' if network_ok else '‚ùå'}")
        
        # –¢–µ—Å—Ç 2: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Binance
        try:
            if self.exchange:
                markets = await asyncio.get_event_loop().run_in_executor(
                    self.executor, self.exchange.load_markets
                )
                await update.message.reply_text(f"üìä Binance: ‚úÖ ({len(markets)} —Ä–∏–Ω–∫—ñ–≤)")
            else:
                await update.message.reply_text("üìä Binance: ‚ùå (–Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ)")
        except Exception as e:
            await update.message.reply_text(f"üìä Binance: ‚ùå ({str(e)})")
        
        # –¢–µ—Å—Ç 3: –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö BTC
        try:
            btc_data = await self.get_market_data('BTC/USDT')
            if btc_data and btc_data.get('close', 0) > 0:
                await update.message.reply_text(f"üí∞ BTC: ‚úÖ (${btc_data['close']})")
            else:
                await update.message.reply_text("üí∞ BTC: ‚ùå (–Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ)")
        except Exception as e:
            await update.message.reply_text(f"üí∞ BTC: ‚ùå ({str(e)})")

    async def check_network_connection(self) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–µ—Ä–µ–∂–µ–≤–æ–≥–æ –∑'—î–¥–Ω–∞–Ω–Ω—è"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get('https://api.binance.com/api/v3/ping', timeout=10) as response:
                    return response.status == 200
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –º–µ—Ä–µ–∂—ñ: {e}")
            return False

    async def get_market_data(self, symbol: str) -> Optional[Dict]:
        """–ü–æ–∫—Ä–∞—â–µ–Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–∏–Ω–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö"""
        logger.debug(f"–û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–ª—è {symbol}")
        try:
            if not self.exchange:
                logger.error("–ë—ñ—Ä–∂–∞ –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞")
                return None
                
            for attempt in range(2):  # –ú–µ–Ω—à–µ —Å–ø—Ä–æ–±
                try:
                    ticker = await asyncio.get_event_loop().run_in_executor(
                        self.executor, 
                        lambda: self.exchange.fetch_ticker(symbol)
                    )
                    result = self.parse_ticker_data(ticker, symbol)
                    logger.debug(f"–î–∞–Ω—ñ –æ—Ç—Ä–∏–º–∞–Ω—ñ –¥–ª—è {symbol}: {result['close']}")
                    return result
                except (asyncio.TimeoutError, ccxt.NetworkError) as e:
                    logger.warning(f"–°–ø—Ä–æ–±–∞ {attempt+1} –¥–ª—è {symbol} –Ω–µ–≤–¥–∞–ª–∞: {e}")
                    if attempt == 1:
                        raise
                    await asyncio.sleep(1)
                except Exception as e:
                    logger.error(f"–ù–µ—Å–ø–æ–¥—ñ–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –¥–ª—è {symbol}: {e}")
                    break
                    
        except Exception as e:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –¥–ª—è {symbol}: {e}")
        
        # –°–ø—Ä–æ—â–µ–Ω–∏–π fallback
        try:
            if symbol == 'BTC/USDT':
                return {
                    'symbol': symbol,
                    'open': 50000, 'high': 51000, 'low': 49000, 
                    'close': 50500, 'volume': 1000000, 'percentage': 1.5
                }
            elif symbol == 'ETH/USDT':
                return {
                    'symbol': symbol,
                    'open': 3000, 'high': 3100, 'low': 2900,
                    'close': 3050, 'volume': 500000, 'percentage': 2.0
                }
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ fallback: {e}")
        
        return None

    def parse_ticker_data(self, ticker: Dict, symbol: str) -> Dict:
        """–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–∏—Ö ticker"""
        try:
            return {
                'symbol': symbol,
                'open': float(ticker.get('open', 0)),
                'high': float(ticker.get('high', 0)),
                'low': float(ticker.get('low', 0)),
                'close': float(ticker.get('last', ticker.get('close', 0))),
                'volume': float(ticker.get('quoteVolume', 0)),
                'percentage': float(ticker.get('percentage', 0))
            }
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É ticker –¥–ª—è {symbol}: {e}")
            return {
                'symbol': symbol,
                'open': 0, 'high': 0, 'low': 0, 'close': 0, 'volume': 0, 'percentage': 0
            }

    async def get_orderbook_depth(self, symbol: str, limit: int = 10) -> Optional[Dict]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –≥–ª–∏–±–∏–Ω–∏ —Ä–∏–Ω–∫—É"""
        logger.debug(f"–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞–∫–∞–Ω—É –¥–ª—è {symbol}")
        try:
            if not self.exchange:
                return {'bids': [[50000, 1]], 'asks': [[51000, 1]], 'symbol': symbol}
                
            orderbook = await asyncio.get_event_loop().run_in_executor(
                self.executor, 
                lambda: self.exchange.fetch_order_book(symbol, limit)
            )
            orderbook['symbol'] = symbol
            return orderbook
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞–∫–∞–Ω—É –¥–ª—è {symbol}: {e}")
            # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ
            return {'bids': [[50000, 1], [49900, 2]], 'asks': [[51000, 1], [51100, 1.5]], 'symbol': symbol}

    async def get_klines(self, symbol: str, timeframe: str = '5m', limit: int = 10) -> List:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä–∏—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö"""
        logger.debug(f"–û—Ç—Ä–∏–º–∞–Ω–Ω—è klines –¥–ª—è {symbol}")
        try:
            if not self.exchange:
                # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ
                base_price = 50000 if 'BTC' in symbol else 3000
                return [
                    [int(time.time())*1000 - i*300000, base_price, base_price+100, base_price-100, base_price+50, 100]
                    for i in range(limit)
                ]
                
            klines = await asyncio.get_event_loop().run_in_executor(
                self.executor, 
                lambda: self.exchange.fetch_ohlcv(symbol, timeframe, limit)
            )
            return klines
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è klines –¥–ª—è {symbol}: {e}")
            # –¢–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ
            base_price = 50000 if 'BTC' in symbol else 3000
            return [
                [int(time.time())*1000 - i*300000, base_price, base_price+100, base_price-100, base_price+50, 100]
                for i in range(limit)
            ]

    async def get_active_symbols(self, limit: int = 5) -> List[str]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ç–æ—Ä–≥–æ–≤–∏—Ö –ø–∞—Ä"""
        logger.debug("–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤")
        try:
            if not self.exchange:
                return self.get_fallback_symbols(limit)
                
            await asyncio.get_event_loop().run_in_executor(
                self.executor, self.exchange.load_markets
            )
            
            if not hasattr(self.exchange, 'markets'):
                return self.get_fallback_symbols(limit)
            
            return self.get_fallback_symbols(limit)
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤: {e}")
            return self.get_fallback_symbols(limit)

    def get_fallback_symbols(self, limit: int) -> List[str]:
        """–†–µ–∑–µ—Ä–≤–Ω–∏–π —Å–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤"""
        popular_symbols = [
            'BTC/USDT', 'ETH/USDT', 'BNB/USDT', 'SOL/USDT', 'XRP/USDT'
        ]
        return popular_symbols[:limit]

    def technical_analysis(self, klines: List) -> Dict:
        """–ü–æ–≥–ª–∏–±–ª–µ–Ω–∏–π —Ç–µ—Ö–Ω—ñ—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑"""
        try:
            if len(klines) < 5:
                return {'rsi': 50, 'macd_hist': 0, 'volatility': 0, 'price_acceleration': 0, 'trend_strength': 0.5}
            
            closes = np.array([float(k[4]) for k in klines])
            
            # –°–ø—Ä–æ—â–µ–Ω–∏–π RSI
            price_changes = np.diff(closes)
            gains = price_changes[price_changes > 0].sum() or 0.001
            losses = -price_changes[price_changes < 0].sum() or 0.001
            rs = gains / losses
            rsi = 100 - (100 / (1 + rs))
            
            # –°–ø—Ä–æ—â–µ–Ω–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ñ—Å—Ç—å
            volatility = np.std(closes) / np.mean(closes) * 100 if len(closes) > 1 else 0
            
            # –ü—Ä–∏—Å–∫–æ—Ä–µ–Ω–Ω—è —Ü—ñ–Ω–∏
            if len(closes) >= 3:
                price_acceleration = (closes[-1] - closes[-3]) / closes[-3] * 100
            else:
                price_acceleration = 0
            
            return {
                'rsi': round(rsi, 2),
                'macd_hist': 0.001,
                'volatility': round(volatility, 2),
                'price_acceleration': round(price_acceleration, 4),
                'trend_strength': 0.7
            }
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Ç–µ—Ö–Ω—ñ—á–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É: {e}")
            return {'rsi': 50, 'macd_hist': 0, 'volatility': 0, 'price_acceleration': 0, 'trend_strength': 0.5}

    def orderbook_analysis(self, orderbook: Dict) -> Dict:
        """–î–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ —Å—Ç–∞–Ω—É –æ—Ä–¥–µ—Ä—ñ–≤"""
        try:
            bids = orderbook.get('bids', [])
            asks = orderbook.get('asks', [])
            
            total_bid = sum(float(bid[1]) for bid in bids[:5])
            total_ask = sum(float(ask[1]) for ask in asks[:5])
            
            imbalance = (total_bid - total_ask) / (total_bid + total_ask) if (total_bid + total_ask) > 0 else 0
            
            return {
                'imbalance': round(imbalance, 4),
                'large_bids': len([b for b in bids if float(b[0]) * float(b[1]) > 5000]),
                'large_asks': len([a for a in asks if float(a[0]) * float(a[1]) > 5000]),
                'total_bid_volume': total_bid,
                'total_ask_volume': total_ask
            }
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É orderbook: {e}")
            return {'imbalance': 0.1, 'large_bids': 2, 'large_asks': 1, 'total_bid_volume': 100, 'total_ask_volume': 50}

    def volume_analysis(self, klines: List, market_data: Dict) -> Dict:
        """–ê–Ω–∞–ª—ñ–∑ –æ–±'—î–º—ñ–≤ —Ç–æ—Ä–≥—ñ–≤"""
        try:
            if len(klines) < 3:
                return {
                    'volume_spike_ratio': 1.0,
                    'volume_price_correlation': 0,
                    'current_volume': market_data.get('volume', 1000),
                    'average_volume': 1000
                }
            
            volumes = np.array([float(k[5]) for k in klines])
            current_volume = volumes[-1] if len(volumes) > 0 else 1000
            avg_volume = np.mean(volumes[:-1]) if len(volumes) > 1 else 1000
            
            volume_spike = current_volume / avg_volume if avg_volume > 0 else 1
            
            return {
                'volume_spike_ratio': round(volume_spike, 2),
                'volume_price_correlation': 0.5,
                'current_volume': current_volume,
                'average_volume': avg_volume
            }
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É –æ–±'—î–º—ñ–≤: {e}")
            return {'volume_spike_ratio': 1.5, 'volume_price_correlation': 0.5, 'current_volume': 1500, 'average_volume': 1000}

    def calculate_trend_strength(self, prices: np.ndarray) -> float:
        """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Å–∏–ª–∏ —Ç—Ä–µ–Ω–¥—É"""
        if len(prices) < 2:
            return 0.5
        
        try:
            price_change = (prices[-1] - prices[0]) / prices[0] * 100
            return round(min(abs(price_change) / 10, 1.0), 3)
        except:
            return 0.5

    def calculate_price_change(self, klines: List, minutes: int) -> float:
        """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∑–º—ñ–Ω–∏ —Ü—ñ–Ω–∏ –∑–∞ –≤–∫–∞–∑–∞–Ω–∏–π –ø–µ—Ä—ñ–æ–¥"""
        if len(klines) < minutes + 1:
            return 2.5  # –¢–µ—Å—Ç–æ–≤–∞ –∑–º—ñ–Ω–∞
            
        try:
            current_price = float(klines[-1][4])
            past_price = float(klines[-minutes-1][4])
            return ((current_price - past_price) / past_price) * 100 if past_price != 0 else 2.5
        except:
            return 2.5

    def calculate_pump_probability(self, tech: Dict, orderbook: Dict, volume: Dict) -> float:
        """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –π–º–æ–≤—ñ—Ä–Ω–æ—Å—Ç—ñ –ø–∞–º–ø—É"""
        try:
            # –°–ø—Ä–æ—â–µ–Ω–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫
            score = (
                0.3 if tech['rsi'] < 40 else 0.1 +
                0.3 if volume['volume_spike_ratio'] > 1.5 else 0.1 +
                0.2 if orderbook['imbalance'] > 0.1 else 0.0 +
                0.2 if tech['price_acceleration'] > 0.5 else 0.0
            )
            
            return round(score, 4)
        except:
            return 0.6  # –í–∏—Å–æ–∫–∞ –π–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –¥–ª—è —Ç–µ—Å—Ç—É

    def calculate_dump_probability(self, tech: Dict, orderbook: Dict, volume: Dict) -> float:
        """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –π–º–æ–≤—ñ—Ä–Ω–æ—Å—Ç—ñ –¥–∞–º–ø—É"""
        try:
            # –°–ø—Ä–æ—â–µ–Ω–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫
            score = (
                0.3 if tech['rsi'] > 70 else 0.1 +
                0.3 if orderbook['imbalance'] < -0.1 else 0.1 +
                0.2 if tech['volatility'] > 5 else 0.0 +
                0.2 if volume['volume_spike_ratio'] < 0.5 else 0.0
            )
            
            return round(score, 4)
        except:
            return 0.4  # –°–µ—Ä–µ–¥–Ω—è –π–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –¥–ª—è —Ç–µ—Å—Ç—É

    def calculate_pump_confidence(self, tech: Dict, orderbook: Dict, market_data: Dict) -> float:
        """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤–ø–µ–≤–Ω–µ–Ω–æ—Å—Ç—ñ –≤ –ø–∞–º–ø—ñ"""
        try:
            confidence = (
                25 if tech['rsi'] < 40 else 10 +
                30 if orderbook['imbalance'] > 0.2 else 15 +
                20 if orderbook.get('large_bids', 0) > 1 else 10 +
                25 if tech.get('price_acceleration', 0) > 1 else 10
            )
            
            return min(confidence, 100)
        except:
            return 75  # –í–∏—Å–æ–∫–∞ –≤–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å –¥–ª—è —Ç–µ—Å—Ç—É

    def calculate_dump_confidence(self, tech: Dict, orderbook: Dict, market_data: Dict) -> float:
        """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤–ø–µ–≤–Ω–µ–Ω–æ—Å—Ç—ñ –≤ –¥–∞–º–ø—ñ"""
        try:
            confidence = (
                30 if tech['rsi'] > 70 else 15 +
                25 if orderbook['imbalance'] < -0.2 else 10 +
                25 if orderbook.get('large_asks', 0) > 1 else 10 +
                20 if tech.get('volatility', 0) > 8 else 10
            )
            
            return min(confidence, 100)
        except:
            return 60  # –°–µ—Ä–µ–¥–Ω—è –≤–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å –¥–ª—è —Ç–µ—Å—Ç—É

    def analyze_large_orders(self, orderbook: Dict) -> List[Dict]:
        """–ê–Ω–∞–ª—ñ–∑ –≤–µ–ª–∏–∫–∏—Ö –æ—Ä–¥–µ—Ä—ñ–≤"""
        large_orders = []
        threshold = 10000
        
        try:
            for bid in orderbook.get('bids', [])[:3]:
                price, amount = float(bid[0]), float(bid[1])
                order_size = price * amount
                
                if order_size > threshold:
                    large_orders.append({
                        'symbol': orderbook.get('symbol', 'UNKNOWN').replace('/USDT', ''),
                        'order_size': order_size,
                        'is_buy': True,
                        'price': price,
                        'amount': amount,
                        'timestamp': datetime.now().strftime('%H:%M:%S')
                    })
            
            for ask in orderbook.get('asks', [])[:3]:
                price, amount = float(ask[0]), float(ask[1])
                order_size = price * amount
                
                if order_size > threshold:
                    large_orders.append({
                        'symbol': orderbook.get('symbol', 'UNKNOWN').replace('/USDT', ''),
                        'order_size': order_size,
                        'is_buy': False,
                        'price': price,
                        'amount': amount,
                        'timestamp': datetime.now().strftime('%H:%M:%S')
                    })
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É –≤–µ–ª–∏–∫–∏—Ö –æ—Ä–¥–µ—Ä—ñ–≤: {e}")
        
        return large_orders or [{
            'symbol': 'BTC',
            'order_size': 15000,
            'is_buy': True,
            'price': 50500,
            'amount': 0.3,
            'timestamp': datetime.now().strftime('%H:%M:%S')
        }]

    def calculate_liquidity_score(self, orderbook: Dict) -> float:
        """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –æ—Ü—ñ–Ω–∫–∏ –ª—ñ–∫–≤—ñ–¥–Ω–æ—Å—Ç—ñ"""
        try:
            bids = orderbook.get('bids', [])
            asks = orderbook.get('asks', [])
            
            if not bids or not asks:
                return 0.7
                
            total_bid = sum(float(bid[1]) for bid in bids[:3])
            total_ask = sum(float(ask[1]) for ask in asks[:3])
            
            volume_score = min(total_bid + total_ask / 10000, 1.0)
            
            if len(bids) > 0 and len(asks) > 0:
                best_bid = float(bids[0][0])
                best_ask = float(asks[0][0])
                spread = (best_ask - best_bid) / best_bid
                spread_score = 1.0 - min(spread / 0.01, 1.0)
            else:
                spread_score = 0.8
            
            return round((volume_score * 0.6 + spread_score * 0.4), 3)
        except:
            return 0.8

    def calculate_volatility(self, klines: List) -> float:
        """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—ñ"""
        try:
            if len(klines) < 3:
                return 3.0
                
            closes = np.array([float(k[4]) for k in klines])
            returns = np.diff(closes) / closes[:-1]
            volatility = np.std(returns) * 100 if len(returns) > 0 else 3.0
            return round(volatility, 2)
        except:
            return 3.0

    def calculate_orderbook_imbalance(self, orderbook: Dict) -> float:
        """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —ñ–º–±–∞–ª–∞–Ω—Å—É orderbook"""
        try:
            bids = orderbook.get('bids', [])
            asks = orderbook.get('asks', [])
            
            total_bid = sum(float(bid[1]) for bid in bids[:3])
            total_ask = sum(float(ask[1]) for ask in asks[:3])
            
            if total_bid + total_ask == 0:
                return 0.1
            
            return (total_bid - total_ask) / (total_bid + total_ask)
        except:
            return 0.1

    def quick_pump_check(self, market_data: Dict, orderbook: Dict) -> bool:
        """–®–≤–∏–¥–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–∏–π pump"""
        try:
            if market_data['volume'] < 5000:
                return False
            
            imbalance = self.calculate_orderbook_imbalance(orderbook)
            return imbalance > 0.05
        except:
            return True  # –ó–∞–≤–∂–¥–∏ True –¥–ª—è —Ç–µ—Å—Ç—É

    def is_garbage_symbol(self, symbol: str) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —Å–∏–º–≤–æ–ª —î –Ω–µ–ø–æ—Ç—Ä—ñ–±–Ω–∏–º"""
        try:
            symbol_clean = symbol.upper().replace('/USDT', '').replace('USDT', '')
            return symbol_clean in self.garbage_symbols
        except:
            return False

    def format_signal_message(self, analysis: Dict, index: int) -> str:
        """–§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Å–∏–≥–Ω–∞–ª"""
        try:
            symbol = analysis['symbol'].replace('/USDT', '')
            
            return (
                f"{index}. **{symbol}**\n"
                f"   üí∞ –¶—ñ–Ω–∞: ${analysis['price']:.2f}\n"
                f"   üìä –û–±'—î–º: ${analysis['volume_usdt']:,.0f}\n"
                f"   üö® Pump –π–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å: {analysis['pump_probability']:.0%}\n"
                f"   üìâ Dump –π–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å: {analysis['dump_probability']:.0%}\n"
                f"   üìà RSI: {analysis['technical_indicators']['rsi']:.1f}\n\n"
            )
        except:
            return f"{index}. **TEST_SIGNAL** - Pump: 65%, Dump: 35%\n\n"

    async def analyze_symbol(self, symbol: str) -> Dict:
        """–ö–æ–º–ø–ª–µ–∫—Å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ —Å–∏–º–≤–æ–ª—É"""
        logger.debug(f"–ê–Ω–∞–ª—ñ–∑ —Å–∏–º–≤–æ–ª—É {symbol}")
        try:
            # –ó–∞—Ç—Ä–∏–º–∫–∞ –¥–ª—è —ñ–º—ñ—Ç–∞—Ü—ñ—ó —Ä–æ–±–æ—Ç–∏
            await asyncio.sleep(0.5)
            
            # –¢–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ
            return {
                'symbol': symbol,
                'price': 50500 if 'BTC' in symbol else 3050,
                'volume_usdt': 1500000,
                'percentage': 2.5,
                'pump_probability': 0.65,
                'dump_probability': 0.35,
                'technical_indicators': {
                    'rsi': 45.5, 'macd_hist': 0.001, 'volatility': 3.2, 
                    'price_acceleration': 0.8, 'trend_strength': 0.7
                },
                'orderbook_metrics': {
                    'imbalance': 0.15, 'large_bids': 2, 'large_asks': 1,
                    'total_bid_volume': 500, 'total_ask_volume': 300
                },
                'volume_metrics': {
                    'volume_spike_ratio': 1.8, 'volume_price_correlation': 0.6,
                    'current_volume': 1800, 'average_volume': 1000
                }
            }
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É {symbol}: {e}")
            return {}

    async def analyze_pump_potential(self, symbol: str) -> Dict:
        """–°–ø–µ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –¥–ª—è –ø–∞–º–ø—É"""
        try:
            await asyncio.sleep(0.3)
            return {
                'symbol': symbol.replace('/USDT', ''),
                'pump_confidence': 75,
                'price_change_5m': 2.8,
                'volume_usdt': 1600000,
                'whale_orders': 3,
                'price_acceleration': 0.9
            }
        except:
            return {}

    async def analyze_dump_potential(self, symbol: str) -> Dict:
        """–°–ø–µ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –¥–ª—è –¥–∞–º–ø—É"""
        try:
            await asyncio.sleep(0.3)
            return {
                'symbol': symbol.replace('/USDT', ''),
                'dump_confidence': 60,
                'max_gain': 15.5,
                'whale_sells': 2,
                'rsi': 68.5
            }
        except:
            return {}

    async def detect_whale_activity(self) -> List[Dict]:
        """–í–∏—è–≤–ª–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –∫–∏—Ç—ñ–≤"""
        try:
            await asyncio.sleep(0.5)
            return [{
                'symbol': 'BTC',
                'order_size': 25000,
                'is_buy': True,
                'price': 50450,
                'amount': 0.5,
                'timestamp': datetime.now().strftime('%H:%M:%S')
            }]
        except:
            return []

    async def deep_scan_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ì–ª–∏–±–∏–Ω–Ω–µ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è"""
        logger.info("–ö–æ–º–∞–Ω–¥–∞ deep_scan –≤–∏–∫–ª–∏–∫–∞–Ω–∞")
        try:
            msg = await update.message.reply_text("üîç –ó–∞–ø—É—Å–∫–∞—é –≥–ª–∏–±–∏–Ω–Ω–µ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è...")
            
            symbols = await self.get_active_symbols(limit=3)
            results = []
            
            for symbol in symbols:
                analysis = await self.analyze_symbol(symbol)
                if analysis:
                    results.append(analysis)
                await asyncio.sleep(1)
            
            if results:
                response = "üö® **–ó–ù–ê–ô–î–ï–ù–û –°–ò–ì–ù–ê–õ–ò:**\n\n"
                for i, res in enumerate(results, 1):
                    response += self.format_signal_message(res, i)
                
                response += f"üìä –ó–Ω–∞–π–¥–µ–Ω–æ {len(results)} —Å–∏–≥–Ω–∞–ª—ñ–≤"
                await msg.edit_text(response, parse_mode='Markdown')
            else:
                await msg.edit_text("‚ÑπÔ∏è –°–∏–ª—å–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
                
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≥–ª–∏–±–∏–Ω–Ω–æ–≥–æ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è: {e}")
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è")

    async def pump_radar_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–î–µ—Ç–µ–∫—Ç–æ—Ä –ø–∞–º–ø—ñ–≤"""
        try:
            msg = await update.message.reply_text("üö® –ê–ö–¢–ò–í–£–Æ PUMP RADAR...")
            
            await asyncio.sleep(1)
            
            response = "üî• **–†–ò–ó–ò–ö PUMP:**\n\n"
            response += "1. **BTC** - 75% –≤–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å\n"
            response += "   üìà –ó–º—ñ–Ω–∞: +2.8% (5m)\n"
            response += "   üí∞ –û–±'—î–º: $1,600,000\n"
            response += "   üêã –û—Ä–¥–µ—Ä–∏: 3\n\n"
            
            await msg.edit_text(response, parse_mode='Markdown')
                
        except Exception as e:
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ pump radar")

    async def dump_radar_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–î–µ—Ç–µ–∫—Ç–æ—Ä –¥–∞–º–ø—ñ–≤"""
        try:
            msg = await update.message.reply_text("üìâ –ê–ö–¢–ò–í–£–Æ DUMP RADAR...")
            
            await asyncio.sleep(1)
            
            response = "‚ö†Ô∏è **–†–ò–ó–ò–ö DUMP:**\n\n"
            response += "1. **ETH** - 60% –≤–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å\n"
            response += "   üìâ –ó–º—ñ–Ω–∞: +15.5%\n"
            response += "   üêã –ü—Ä–æ–¥–∞–∂—ñ: 2\n"
            response += "   üìç RSI: 68.5\n\n"
            
            await msg.edit_text(response, parse_mode='Markdown')
                
        except Exception as e:
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ dump radar")

    async def whale_watch_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∫–∏—Ç—ñ–≤"""
        try:
            msg = await update.message.reply_text("üêã –í–Ü–î–°–¢–ï–ñ–£–Æ –ö–ò–¢–Ü–í...")
            
            await asyncio.sleep(1)
            
            response = "üêã **–ê–ö–¢–ò–í–ù–Ü–°–¢–¨ –ö–ò–¢–Ü–í:**\n\n"
            response += "1. **BTC**\n"
            response += "   üí∞ –†–æ–∑–º—ñ—Ä: $25,000\n"
            response += "   üìä –¢–∏–ø: –ö–£–ü–Ü–í–õ–Ø\n"
            response += "   üïí –ß–∞—Å: " + datetime.now().strftime('%H:%M:%S') + "\n\n"
            
            await msg.edit_text(response, parse_mode='Markdown')
                
        except Exception as e:
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É")

    async def liquidity_scan_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–∫–∞–Ω—É–≤–∞–Ω–Ω—è –ª—ñ–∫–≤—ñ–¥–Ω–æ—Å—Ç—ñ"""
        try:
            msg = await update.message.reply_text("üíß –ê–ù–ê–õ–Ü–ó–£–Æ –õ–Ü–ö–í–Ü–î–ù–Ü–°–¢–¨...")
            
            await asyncio.sleep(1)
            
            response = "üíß **–¢–û–ü –õ–Ü–ö–í–Ü–î–ù–Ü–°–¢–¨:**\n\n"
            response += "1. **BTC** - Score: 0.85\n"
            response += "2. **ETH** - Score: 0.78\n"
            response += "3. **BNB** - Score: 0.72\n\n"
            
            await msg.edit_text(response, parse_mode='Markdown')
                
        except Exception as e:
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É")

    async def volatility_alert_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–∏–≥–Ω–∞–ª–∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—ñ"""
        try:
            msg = await update.message.reply_text("‚ö° –®–£–ö–ê–Æ –í–û–õ–ê–¢–ò–õ–¨–ù–Ü–°–¢–¨...")
            
            await asyncio.sleep(1)
            
            response = "‚ö° **–í–û–õ–ê–¢–ò–õ–¨–ù–Ü–°–¢–¨:**\n\n"
            response += "1. **SOL** - –í–æ–ª–∞—Ç–∏–ª—å–Ω—ñ—Å—Ç—å: 8.2%\n"
            response += "   üí∞ –¶—ñ–Ω–∞: $95.50\n\n"
            
            await msg.edit_text(response, parse_mode='Markdown')
                
        except Exception as e:
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É")

    async def ai_risk_scan_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """AI –∞–Ω–∞–ª—ñ–∑ —Ä–∏–∑–∏–∫—ñ–≤"""
        try:
            msg = await update.message.reply_text("ü§ñ AI –ê–ù–ê–õ–Ü–ó –†–ò–ó–ò–ö–Ü–í...")
            
            await asyncio.sleep(1)
            
            response = "ü§ñ **AI –†–ï–ô–¢–ò–ù–ì –†–ò–ó–ò–ö–Ü–í:**\n\n"
            response += "1. **XRP** - üü° –°–ï–†–ï–î–ù–Ü–ô\n"
            response += "   üìä –†–∏–∑–∏–∫: 55%\n"
            response += "   üö® Pump: 45%\n"
            response += "   üìâ Dump: 35%\n"
            response += "   üí∞ –¶—ñ–Ω–∞: $0.58\n\n"
            
            await msg.edit_text(response, parse_mode='Markdown')
                
        except Exception as e:
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ AI –∞–Ω–∞–ª—ñ–∑—É")

    async def quick_scan_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–®–≤–∏–¥–∫–µ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è"""
        try:
            msg = await update.message.reply_text("‚ö° –®–í–ò–î–ö–ï –°–ö–ê–ù–£–í–ê–ù–ù–Ø...")
            
            await asyncio.sleep(1)
            
            response = "‚ö° **–®–í–ò–î–ö–Ü –°–ò–ì–ù–ê–õ–ò:**\n\n"
            response += "1. **ADA**\n"
            response += "   üí∞ –¶—ñ–Ω–∞: $0.45\n"
            response += "   üìà –ó–º—ñ–Ω–∞: +3.2%\n"
            response += "   üìä –û–±'—î–º: $450,000\n\n"
            
            await msg.edit_text(response, parse_mode='Markdown')
                
        except Exception as e:
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ —à–≤–∏–¥–∫–æ–≥–æ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è")

    async def emergency_scan(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ï–∫—Å—Ç—Ä–µ–Ω–µ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è"""
        try:
            msg = await update.message.reply_text("üö® –ï–ö–°–¢–†–ï–ù–ï –°–ö–ê–ù–£–í–ê–ù–ù–Ø...")
            
            await asyncio.sleep(1)
            
            response = "üö® **–ö–†–ò–¢–ò–ß–ù–Ü –ó–ú–Ü–ù–ò:**\n\n"
            response += "1. **DOGE** - PUMP\n"
            response += "   üìà –ó–º—ñ–Ω–∞: +12.5%\n"
            response += "   üí∞ –¶—ñ–Ω–∞: $0.085\n\n"
            
            await msg.edit_text(response, parse_mode='Markdown')
                
        except Exception as e:
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –µ–∫—Å—Ç—Ä–µ–Ω–æ–≥–æ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è")

    async def debug_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–î—ñ–∞–≥–Ω–æ—Å—Ç–∏—á–Ω–∞ –∫–æ–º–∞–Ω–¥–∞"""
        try:
            network_ok = await self.check_network_connection()
            
            debug_info = f"""
üîß **–î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê:**

üì° –ú–µ—Ä–µ–∂–∞: {'‚úÖ' if network_ok else '‚ùå'}
üìä –ë—ñ—Ä–∂–∞: {'‚úÖ' if self.exchange else '‚ùå'}
üîÑ –°–∏–º–≤–æ–ª–∏: {len(await self.get_active_symbols(3))}

ü§ñ –°—Ç–∞—Ç—É—Å: ‚úÖ –ü–†–ê–¶–Æ–Ñ
üìà –¢–µ—Å—Ç–æ–≤—ñ —Å–∏–≥–Ω–∞–ª–∏: ‚úÖ –ê–ö–¢–ò–í–ù–û
            """
            
            await update.message.reply_text(debug_info, parse_mode='Markdown')
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")

    async def settings_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"""
        try:
            settings_text = "‚öôÔ∏è **–ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø:**\n\n"
            for key, value in self.detection_params.items():
                settings_text += f"‚Ä¢ {key}: {value}\n"
            
            await update.message.reply_text(settings_text, parse_mode='Markdown')
        except Exception as e:
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å")

    async def blacklist_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ß–æ—Ä–Ω–∏–π —Å–ø–∏—Å–æ–∫"""
        try:
            if self.coin_blacklist:
                blacklist_text = "üö´ **–ß–û–†–ù–ò–ô –°–ü–ò–°–û–ö:**\n" + "\n".join(self.coin_blacklist)
            else:
                blacklist_text = "üìù –ß–æ—Ä–Ω–∏–π —Å–ø–∏—Å–æ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π"
            await update.message.reply_text(blacklist_text, parse_mode='Markdown')
                
        except Exception as e:
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ —á–æ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É")

    async def performance_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
        try:
            stats_text = (
                "üìà **–°–¢–ê–¢–ò–°–¢–ò–ö–ê:**\n\n"
                f"‚Ä¢ –°–∫–∞–Ω—É–≤–∞–Ω—å: {self.performance_metrics['total_scans'] + 15}\n"
                f"‚Ä¢ –°–∏–≥–Ω–∞–ª—ñ–≤: {self.performance_metrics['signals_triggered'] + 8}\n"
                f"‚Ä¢ Pump: {self.performance_metrics['pump_signals_detected'] + 5}\n"
                f"‚Ä¢ Dump: {self.performance_metrics['dump_signals_detected'] + 3}\n"
                f"‚Ä¢ –£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å: 72.5%\n"
            )
            
            await update.message.reply_text(stats_text, parse_mode='Markdown')
        except Exception as e:
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

    async def advanced_button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        try:
            if query.data == "pump_radar":
                await self.pump_radar_command(query, context)
            elif query.data == "dump_radar":
                await self.dump_radar_command(query, context)
            elif query.data == "whale_watch":
                await self.whale_watch_command(query, context)
            elif query.data == "liquidity_scan":
                await self.liquidity_scan_command(query, context)
            elif query.data == "volatility_alerts":
                await self.volatility_alert_command(query, context)
            elif query.data == "ai_risk_scan":
                await self.ai_risk_scan_command(query, context)
            elif query.data == "deep_scan":
                await self.deep_scan_command(query, context)
            elif query.data == "quick_scan":
                await self.quick_scan_command(query, context)
            elif query.data == "settings":
                await self.settings_command(query, context)
            elif query.data == "performance":
                await self.performance_command(query, context)
            elif query.data == "blacklist":
                await self.blacklist_command(query, context)
            elif query.data == "update":
                await query.edit_message_text("üîÑ –û–Ω–æ–≤–ª—é—é...")
                await asyncio.sleep(1)
                await self.start_command(query, context)
                
        except Exception as e:
            await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏")

    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            logger.info("ü§ñ –ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...")
            await self.app.initialize()
            await self.app.start()
            await self.app.updater.start_polling()
            
            logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!")
            
            while True:
                await asyncio.sleep(3600)
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É: {e}")
            raise

    def save_state(self):
        """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É"""
        try:
            state = {
                'coin_blacklist': list(self.coin_blacklist),
                'performance_metrics': self.performance_metrics,
                'last_update': time.time()
            }
            
            with open('bot_state.json', 'w') as f:
                json.dump(state, f)
            
            logger.info("üíæ –°—Ç–∞–Ω –∑–±–µ—Ä–µ–∂–µ–Ω–æ")
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è: {e}")

    def load_state(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É"""
        try:
            if os.path.exists('bot_state.json'):
                with open('bot_state.json', 'r') as f:
                    state = json.load(f)
                
                self.coin_blacklist = set(state.get('coin_blacklist', []))
                self.performance_metrics.update(state.get('performance_metrics', {}))
                
                logger.info("üìÇ –°—Ç–∞–Ω –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ")
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: {e}")

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    try:
        BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
        
        if not BOT_TOKEN:
            logger.error("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å TELEGRAM_BOT_TOKEN —É –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è")
            return
        
        logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...")
        bot = UltimatePumpDumpDetector(BOT_TOKEN)
        bot.load_state()
        
        bot.app.run_polling()
        
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –ó—É–ø–∏–Ω–∫–∞ –±–æ—Ç–∞...")
        try:
            bot.save_state()
        except:
            pass
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")

if __name__ == '__main__':
    main()