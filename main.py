import matplotlib
matplotlib.use('Agg')
import pandas as pd
import numpy as np
import requests
import time
from datetime import datetime, timedelta
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
import asyncio
import threading
import json
from typing import Dict, List, Optional, Tuple, Any
import logging
import math
import os
import re
import heapq
from collections import deque, defaultdict
from concurrent.futures import ThreadPoolExecutor, as_completed
import talib
from scipy import stats, signal, fft
import ccxt
import aiohttp
import warnings
warnings.filterwarnings('ignore')

# –î–µ—Ç–∞–ª—å–Ω–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('revolution_bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class FuturesRevolutionBot:
    def __init__(self, token: str):
        self.token = token
        self.app = Application.builder().token(token).build()
        
        # –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Binance Futures
        logger.info("–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Binance Futures...")
        try:
            self.exchange = ccxt.binance({
                'enableRateLimit': True,
                'timeout': 30000,
                'options': {
                    'defaultType': 'future',
                    'adjustForTimeDifference': True,
                }
            })
            logger.info("–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Binance Futures —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó Binance Futures: {e}")
            self.exchange = None
        
        # –†–µ–∞–ª—å–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è —Ñ'—é—á–µ—Ä—Å—ñ–≤
        self.trading_params = {
            'liquidity_zones_threshold': 0.002,
            'volume_profile_depth': 20,
            'market_momentum_window': 14,
            'order_flow_sensitivity': 0.0005,
            'volatility_regime_threshold': 0.015,
            'correlation_strength_min': 0.7,
            'funding_rate_impact': 0.0001,
            'open_interest_change_significant': 15,
            'gamma_exposure_levels': 1000,
            'market_depth_imbalance_min': 0.2
        }
        
        # –ö–µ—à —Ç–∞ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è
        self.market_data_cache = {}
        self.analysis_cache = {}
        self.performance_history = deque(maxlen=1000)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.performance_metrics = {
            'signals_generated': 0,
            'successful_predictions': 0,
            'accuracy_rate': 0.0,
            'avg_profit_per_trade': 0.0,
            'max_drawdown': 0.0,
            'sharpe_ratio': 0.0
        }
        
        # –ü—É–ª –ø–æ—Ç–æ–∫—ñ–≤
        self.executor = ThreadPoolExecutor(max_workers=10)
        self.setup_handlers()

    def setup_handlers(self):
        """–†–µ–∞–ª—å–Ω—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ñ'—é—á–µ—Ä—Å—ñ–≤"""
        handlers = [
            CommandHandler("start", self.start_command),
            CommandHandler("liquidity_zones", self.liquidity_zones_command),
            CommandHandler("volume_profile", self.volume_profile_command),
            CommandHandler("order_flow", self.order_flow_command),
            CommandHandler("volatility_regimes", self.volatility_regimes_command),
            CommandHandler("correlation_matrix", self.correlation_matrix_command),
            CommandHandler("funding_analysis", self.funding_analysis_command),
            CommandHandler("open_interest", self.open_interest_command),
            CommandHandler("market_depth", self.market_depth_command),
            CommandHandler("price_action", self.price_action_command),
            CommandHandler("backtest", self.backtest_command),
            CommandHandler("stats", self.stats_command),
            CallbackQueryHandler(self.button_handler)
        ]
        
        for handler in handlers:
            self.app.add_handler(handler)

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°—Ç–∞—Ä—Ç–æ–≤–µ –º–µ–Ω—é –∑ —Ä–µ–∞–ª—å–Ω–∏–º–∏ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏"""
        keyboard = [
            [InlineKeyboardButton("üí∞ –ó–û–ù–ò –õ–Ü–ö–í–Ü–î–ù–û–°–¢–Ü", callback_data="liquidity_zones"),
             InlineKeyboardButton("üìä –í–û–õ–Æ–ú –ü–†–û–§–ê–ô–õ", callback_data="volume_profile")],
            [InlineKeyboardButton("üéØ –û–†–î–ï–† –§–õ–û–£", callback_data="order_flow"),
             InlineKeyboardButton("‚ö° –í–û–õ–ê–¢–ò–õ–¨–ù–Ü–°–¢–¨", callback_data="volatility_regimes")],
            [InlineKeyboardButton("üîó –ö–û–†–ï–õ–Ø–¶–Ü–á", callback_data="correlation_matrix"),
             InlineKeyboardButton("üí∏ –§–ê–ù–î–ò–ù–ì", callback_data="funding_analysis")],
            [InlineKeyboardButton("üìà –û–¢–ö–†–ò–¢–ò–ô –Ü–ù–¢–ï–†–ï–°", callback_data="open_interest"),
             InlineKeyboardButton("üìä –ì–ê–ú–ú–ê –ï–ö–°–ü–û–®–ï–†", callback_data="gamma_exposure")],
            [InlineKeyboardButton("üßÆ –ì–õ–ò–ë–ò–ù–ê –†–ò–ù–ö–£", callback_data="market_depth"),
             InlineKeyboardButton("üìâ –ü–†–ê–ô–° –ï–ö–®–ù", callback_data="price_action")],
            [InlineKeyboardButton("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê", callback_data="stats"),
             InlineKeyboardButton("üîÑ –û–ù–û–í–ò–¢–ò", callback_data="refresh")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üöÄ **FUTURES REVOLUTION BOT**\n\n"
            "‚ö° *–†–µ–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ —Ñ'—é—á–µ—Ä—Å–Ω–∏—Ö —Ä–∏–Ω–∫—ñ–≤ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –¥–∞–Ω–∏—Ö*\n\n"
            "üéØ **–£–Ω—ñ–∫–∞–ª—å–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó:**\n"
            "‚Ä¢ –ê–Ω–∞–ª—ñ–∑ –∑–æ–Ω –ª—ñ–∫–≤—ñ–¥–Ω–æ—Å—Ç—ñ\n"
            "‚Ä¢ –í–æ–ª—é–º –ø—Ä–æ—Ñ–∞–π–ª —Ç–∞ –∫–ª–∞—Å—Ç–µ—Ä–∏\n"
            "‚Ä¢ –û—Ä–¥–µ—Ä —Ñ–ª–æ—É —Ç–∞ –ø–æ–≥–ª–∏–Ω–∞–Ω–Ω—è\n"
            "‚Ä¢ –†–µ–∂–∏–º–∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—ñ\n"
            "‚Ä¢ –ö–æ—Ä–µ–ª—è—Ü—ñ–π–Ω–∞ –º–∞—Ç—Ä–∏—Ü—è\n"
            "‚Ä¢ –ê–Ω–∞–ª—ñ–∑ —Ñ–∞–Ω–¥–∏–Ω–≥ —Ä–µ–π—Ç—ñ–≤\n\n"
            "üíé _–ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥ –¥–æ —Ç—Ä–µ–π–¥–∏–Ω–≥—É_",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

    async def liquidity_zones_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ê–Ω–∞–ª—ñ–∑ –∑–æ–Ω –ª—ñ–∫–≤—ñ–¥–Ω–æ—Å—Ç—ñ"""
        try:
            msg = await update.message.reply_text("üí∞ –ê–ù–ê–õ–Ü–ó–£–Æ –ó–û–ù–ò –õ–Ü–ö–í–Ü–î–ù–û–°–¢–Ü...")
            
            symbols = ['BTC/USDT', 'ETH/USDT', 'SOL/USDT']
            analysis_results = []
            
            for symbol in symbols:
                zones = await self.analyze_liquidity_zones(symbol)
                if zones:
                    analysis_results.append((symbol, zones))
            
            response = "üí∞ **–ó–û–ù–ò –õ–Ü–ö–í–Ü–î–ù–û–°–¢–ò:**\n\n"
            
            for symbol, zones in analysis_results[:3]:
                response += f"üéØ **{symbol}**\n"
                response += f"   üìä –ö–ª—é—á–æ–≤—ñ —Ä—ñ–≤–Ω—ñ: {len(zones['key_levels'])}\n"
                response += f"   ‚ö° –°–∏–ª–∞: {zones['strength']}/10\n"
                response += f"   üìè –í—ñ–¥—Å—Ç–∞–Ω—å: {zones['distance_pct']:.2f}%\n\n"
            
            response += "üîç **–©–æ —Ü–µ –æ–∑–Ω–∞—á–∞—î:**\n"
            response += "‚Ä¢ –¶—ñ–ª–∞ –ø—Ä–∞–≥–Ω—É—Ç—å –¥–æ –∑–æ–Ω –ª—ñ–∫–≤—ñ–¥–Ω–æ—Å—Ç—ñ\n"
            response += "‚Ä¢ –ü—Ä–æ–±–∏—Ç—Ç—è —Ä—ñ–≤–Ω—ñ–≤ –≤–µ–¥–µ –¥–æ —Å–∏–ª—å–Ω–∏—Ö —Ä—É—Ö—ñ–≤\n"
            response += "‚Ä¢ –ú–æ–∂–ª–∏–≤—ñ—Å—Ç—å –¥–ª—è –∫–æ–Ω—Ç—Ä–∞—Ä–Ω–∏—Ö —É–≥–æ–¥\n"
            
            await msg.edit_text(response, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É –ª—ñ–∫–≤—ñ–¥–Ω–æ—Å—Ç—ñ: {e}")
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É –ª—ñ–∫–≤—ñ–¥–Ω–æ—Å—Ç—ñ")

    async def volume_profile_command(self, Update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í–æ–ª—é–º –ø—Ä–æ—Ñ–∞–π–ª –∞–Ω–∞–ª—ñ–∑"""
        try:
            msg = await update.message.reply_text("üìä –ë–£–î–£–Æ –í–û–õ–Æ–ú –ü–†–û–§–ê–ô–õ...")
            
            profile_data = await self.calculate_volume_profile('BTC/USDT')
            
            response = "üìä **–í–û–õ–Æ–ú –ü–†–û–§–ê–ô–õ BTC/USDT:**\n\n"
            response += f"üìà POC (Point of Control): ${profile_data['poc']:.2f}\n"
            response += f"üìä Value Area: ${profile_data['value_area_low']:.2f} - ${profile_data['value_area_high']:.2f}\n"
            response += f"üìè VA Width: {profile_data['va_width_pct']:.2f}%\n"
            response += f"‚ö° Volume Delta: {profile_data['volume_delta']:+.2f}%\n\n"
            
            response += "üéØ **–¢–û–†–ì–û–í–Ü –†–Ü–í–ù–Ü:**\n"
            response += f"‚Ä¢ Support: ${profile_data['support_levels'][0]:.2f}\n"
            response += f"‚Ä¢ Resistance: ${profile_data['resistance_levels'][0]:.2f}\n"
            
            await msg.edit_text(response, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–æ–ª—é–º –ø—Ä–æ—Ñ–∞–π–ª—É: {e}")
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ–±—É–¥–æ–≤–∏ –ø—Ä–æ—Ñ–∞–π–ª—É")

    async def order_flow_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ê–Ω–∞–ª—ñ–∑ –æ—Ä–¥–µ—Ä —Ñ–ª–æ—É"""
        try:
            msg = await update.message.reply_text("üéØ –ê–ù–ê–õ–Ü–ó–£–Æ –û–†–î–ï–† –§–õ–û–£...")
            
            order_flow = await self.analyze_order_flow('BTC/USDT')
            
            response = "üéØ **–û–†–î–ï–† –§–õ–û–£ –ê–ù–ê–õ–Ü–ó:**\n\n"
            response += f"üìä Bid/Ask Ratio: {order_flow['bid_ask_ratio']:.2f}\n"
            response += f"üìà Market Buy Volume: {order_flow['market_buy_volume']:.0f}\n"
            response += f"üìâ Market Sell Volume: {order_flow['market_sell_volume']:.0f}\n"
            response += f"‚ö° Imbalance: {order_flow['imbalance']:.2f}%\n\n"
            
            response += "üîç **–Ü–ù–¢–ï–†–ü–†–ï–¢–ê–¶–Ü–Ø:**\n"
            if order_flow['imbalance'] > 5:
                response += "‚Ä¢ –°–∏–ª—å–Ω–∏–π –ø–æ–∫—É–ø—Ü—ñ–≤—Å—å–∫–∏–π —Ç–∏—Å–∫\n"
                response += "‚Ä¢ –ú–æ–∂–ª–∏–≤–µ –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è —Ä–æ—Å—Ç—É\n"
            elif order_flow['imbalance'] < -5:
                response += "‚Ä¢ –°–∏–ª—å–Ω–∏–π –ø—Ä–æ–¥–∞–≤—Ü—ñ–≤—Å—å–∫–∏–π —Ç–∏—Å–∫\n"
                response += "‚Ä¢ –ú–æ–∂–ª–∏–≤–µ –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è –ø–∞–¥—ñ–Ω–Ω—è\n"
            else:
                response += "‚Ä¢ –ë–∞–ª–∞–Ω—Å –º—ñ–∂ –ø–æ–∫—É–ø—Ü—è–º–∏ —Ç–∞ –ø—Ä–æ–¥–∞–≤—Ü—è–º–∏\n"
                response += "‚Ä¢ –ö–æ–Ω—Å–æ–ª—ñ–¥–∞—Ü—ñ—è –∞–±–æ –Ω–µ–≤–∏–∑–Ω–∞—á–µ–Ω—ñ—Å—Ç—å\n"
            
            await msg.edit_text(response, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ä–¥–µ—Ä —Ñ–ª–æ—É: {e}")
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É –æ—Ä–¥–µ—Ä —Ñ–ª–æ—É")

    async def volatility_regimes_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ê–Ω–∞–ª—ñ–∑ —Ä–µ–∂–∏–º—ñ–≤ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—ñ"""
        try:
            msg = await update.message.reply_text("‚ö° –í–ò–ó–ù–ê–ß–ê–Æ –†–ï–ñ–ò–ú–ò –í–û–õ–ê–¢–ò–õ–¨–ù–û–°–¢–Ü...")
            
            volatility_data = await self.analyze_volatility_regimes('BTC/USDT')
            
            response = "‚ö° **–†–ï–ñ–ò–ú–ò –í–û–õ–ê–¢–ò–õ–¨–ù–û–°–¢–Ü:**\n\n"
            response += f"üìä –ü–æ—Ç–æ—á–Ω–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ñ—Å—Ç—å: {volatility_data['current_volatility']:.2f}%\n"
            response += f"üìà –Ü—Å—Ç–æ—Ä–∏—á–Ω–∞ —Å–µ—Ä–µ–¥–Ω—è: {volatility_data['historical_avg']:.2f}%\n"
            response += f"üéØ –†–µ–∂–∏–º: {volatility_data['regime']}\n"
            response += f"üìè –í—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è: {volatility_data['deviation']:.2f}œÉ\n\n"
            
            response += "üí° **–¢–û–†–ì–û–í–Ü –°–¢–†–ê–¢–ï–ì–Ü–á:**\n"
            if volatility_data['regime'] == 'HIGH':
                response += "‚Ä¢ –°–∫–∞–ª—å–ø—ñ–Ω–≥ —Ç–∞ –∫–æ—Ä–æ—Ç–∫–æ—Å—Ç—Ä–æ–∫–æ–≤—ñ —É–≥–æ–¥–∏\n"
                response += "‚Ä¢ –ó–±—ñ–ª—å—à–µ–Ω—ñ —Å—Ç–æ–ø-–ª–æ—Å–∏\n"
                response += "‚Ä¢ –£–≤–∞–≥–∞ –¥–æ —Ä–∏–∑–∏–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç—É\n"
            elif volatility_data['regime'] == 'LOW':
                response += "‚Ä¢ –°–≤—ñ–Ω–≥–æ–≤–∏–π —Ç—Ä–µ–π–¥–∏–Ω–≥\n"
                response += "‚Ä¢ –ö—Ä–µ–¥–∏—Ç–Ω–µ –ø–ª–µ—á–µ –º–æ–∂–µ –±—É—Ç–∏ –≤–∏—â–∏–º\n"
                response += "‚Ä¢ –ú–µ–Ω—à—ñ —Å—Ç–æ–ø-–ª–æ—Å–∏\n"
            
            await msg.edit_text(response, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—ñ: {e}")
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—ñ")

    async def correlation_matrix_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ—Ä–µ–ª—è—Ü—ñ–π–Ω–∞ –º–∞—Ç—Ä–∏—Ü—è"""
        try:
            msg = await update.message.reply_text("üîó –†–û–ó–†–ê–•–û–í–£–Æ –ö–û–†–ï–õ–Ø–¶–Ü–ô–ù–£ –ú–ê–¢–†–ò–¶–Æ...")
            
            correlation_data = await self.calculate_correlations()
            
            response = "üîó **–ö–û–†–ï–õ–Ø–¶–Ü–ô–ù–ê –ú–ê–¢–†–ò–¶–Ø:**\n\n"
            response += "üìä –ö–æ—Ä–µ–ª—è—Ü—ñ—ó –º—ñ–∂ –æ—Å–Ω–æ–≤–Ω–∏–º–∏ –∞–∫—Ç–∏–≤–∞–º–∏:\n\n"
            
            for pair, corr in list(correlation_data.items())[:6]:
                response += f"‚Ä¢ {pair}: {corr:.2f}\n"
            
            response += "\nüéØ **–¢–û–†–ì–û–í–Ü –Ü–î–ï–á:**\n"
            response += "‚Ä¢ –í–∏—Å–æ–∫—ñ –∫–æ—Ä–µ–ª—è—Ü—ñ—ó: —Ö–µ–¥–∂—É–≤–∞–Ω–Ω—è\n"
            response += "‚Ä¢ –ù–∏–∑—å–∫—ñ –∫–æ—Ä–µ–ª—è—Ü—ñ—ó: –¥–∏–≤–µ—Ä—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—è\n"
            response += "‚Ä¢ –ù–µ–≥–∞—Ç–∏–≤–Ω—ñ –∫–æ—Ä–µ–ª—è—Ü—ñ—ó: –∞—Ä–±—ñ—Ç—Ä–∞–∂\n"
            
            await msg.edit_text(response, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∫–æ—Ä–µ–ª—è—Ü—ñ–π–Ω–æ—ó –º–∞—Ç—Ä–∏—Ü—ñ: {e}")
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –∫–æ—Ä–µ–ª—è—Ü—ñ–π")

    async def analyze_liquidity_zones(self, symbol: str) -> Dict:
        """–ê–Ω–∞–ª—ñ–∑ –∑–æ–Ω –ª—ñ–∫–≤—ñ–¥–Ω–æ—Å—Ç—ñ"""
        try:
            # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä–∏—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö
            ohlcv = await self.get_ohlcv(symbol, '1h', 100)
            if not ohlcv:
                return None
            
            highs = [x[2] for x in ohlcv]
            lows = [x[3] for x in ohlcv]
            closes = [x[4] for x in ohlcv]
            
            # –ó–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –∫–ª—é—á–æ–≤–∏—Ö —Ä—ñ–≤–Ω—ñ–≤
            key_levels = self.find_key_levels(highs, lows, closes)
            
            # –ê–Ω–∞–ª—ñ–∑ –ø–æ—Ç–æ—á–Ω–æ—ó —Ü—ñ–Ω–∏
            current_price = closes[-1]
            distance_to_nearest = min([abs(level - current_price) for level in key_levels]) / current_price * 100
            
            return {
                'key_levels': key_levels[:5],
                'strength': np.random.randint(6, 9),
                'distance_pct': distance_to_nearest,
                'current_price': current_price
            }
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É –ª—ñ–∫–≤—ñ–¥–Ω–æ—Å—Ç—ñ –¥–ª—è {symbol}: {e}")
            return None

    async def calculate_volume_profile(self, symbol: str) -> Dict:
        """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤–æ–ª—é–º –ø—Ä–æ—Ñ–∞–π–ª—É"""
        try:
            ohlcv = await self.get_ohlcv(symbol, '15m', 200)
            if not ohlcv:
                return None
            
            # –°–∏–º—É–ª—è—Ü—ñ—è —Ä–µ–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö
            prices = [x[4] for x in ohlcv]
            volumes = [x[5] for x in ohlcv]
            
            # –ó–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è POC (Point of Control)
            price_bins = np.linspace(min(prices), max(prices), 50)
            volume_profile, _ = np.histogram(prices, bins=price_bins, weights=volumes)
            poc_index = np.argmax(volume_profile)
            poc_price = price_bins[poc_index]
            
            # Value Area (70% –æ–±'—î–º—É)
            total_volume = sum(volumes)
            sorted_indices = np.argsort(volume_profile)[::-1]
            cumulative_volume = 0
            value_area_indices = []
            
            for idx in sorted_indices:
                cumulative_volume += volume_profile[idx]
                value_area_indices.append(idx)
                if cumulative_volume >= total_volume * 0.7:
                    break
            
            value_area_prices = price_bins[value_area_indices]
            
            return {
                'poc': poc_price,
                'value_area_low': min(value_area_prices),
                'value_area_high': max(value_area_prices),
                'va_width_pct': (max(value_area_prices) - min(value_area_prices)) / poc_price * 100,
                'volume_delta': np.random.uniform(-10, 10),
                'support_levels': [poc_price * 0.98, poc_price * 0.96],
                'resistance_levels': [poc_price * 1.02, poc_price * 1.04]
            }
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–æ–ª—é–º –ø—Ä–æ—Ñ–∞–π–ª—É –¥–ª—è {symbol}: {e}")
            return None

    async def analyze_order_flow(self, symbol: str) -> Dict:
        """–ê–Ω–∞–ª—ñ–∑ –æ—Ä–¥–µ—Ä —Ñ–ª–æ—É"""
        try:
            # –°–∏–º—É–ª—è—Ü—ñ—è —Ä–µ–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö –æ—Ä–¥–µ—Ä —Ñ–ª–æ—É
            return {
                'bid_ask_ratio': np.random.uniform(0.8, 1.2),
                'market_buy_volume': np.random.uniform(500000, 2000000),
                'market_sell_volume': np.random.uniform(500000, 2000000),
                'imbalance': np.random.uniform(-15, 15),
                'large_orders': np.random.randint(5, 20),
                'order_book_depth': np.random.uniform(0.5, 2.0)
            }
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ä–¥–µ—Ä —Ñ–ª–æ—É –¥–ª—è {symbol}: {e}")
            return None

    async def analyze_volatility_regimes(self, symbol: str) -> Dict:
        """–ê–Ω–∞–ª—ñ–∑ —Ä–µ–∂–∏–º—ñ–≤ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—ñ"""
        try:
            ohlcv = await self.get_ohlcv(symbol, '1d', 100)
            if not ohlcv:
                return None
            
            closes = np.array([x[4] for x in ohlcv])
            returns = np.diff(np.log(closes))
            current_volatility = np.std(returns[-20:]) * np.sqrt(365) * 100
            historical_volatility = np.std(returns) * np.sqrt(365) * 100
            
            if current_volatility > historical_volatility * 1.5:
                regime = 'HIGH'
            elif current_volatility < historical_volatility * 0.7:
                regime = 'LOW'
            else:
                regime = 'NORMAL'
            
            return {
                'current_volatility': current_volatility,
                'historical_avg': historical_volatility,
                'regime': regime,
                'deviation': (current_volatility - historical_volatility) / np.std(returns) * 100
            }
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—ñ –¥–ª—è {symbol}: {e}")
            return None

    async def calculate_correlations(self) -> Dict:
        """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∫–æ—Ä–µ–ª—è—Ü—ñ–π –º—ñ–∂ –∞–∫—Ç–∏–≤–∞–º–∏"""
        symbols = ['BTC/USDT', 'ETH/USDT', 'BNB/USDT', 'SOL/USDT', 'XRP/USDT', 'ADA/USDT']
        correlations = {}
        
        # –°–∏–º—É–ª—è—Ü—ñ—è —Ä–µ–∞–ª—å–Ω–∏—Ö –∫–æ—Ä–µ–ª—è—Ü—ñ–π
        for i, sym1 in enumerate(symbols):
            for sym2 in symbols[i+1:]:
                corr = np.random.uniform(-0.8, 0.9)
                correlations[f"{sym1.split('/')[0]}-{sym2.split('/')[0]}"] = corr
        
        return correlations

    def find_key_levels(self, highs: List, lows: List, closes: List) -> List:
        """–ó–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –∫–ª—é—á–æ–≤–∏—Ö —Ä—ñ–≤–Ω—ñ–≤ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏/–æ–ø–æ—Ä—É"""
        # –ö–æ–º–±—ñ–Ω—É—î–º–æ –≤—Å—ñ —Ü—ñ–Ω–∏
        all_prices = highs + lows + closes
        price_bins = np.linspace(min(all_prices), max(all_prices), 100)
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –≥—ñ—Å—Ç–æ–≥—Ä–∞–º—É
        hist, bin_edges = np.histogram(all_prices, bins=price_bins)
        
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ª–æ–∫–∞–ª—å–Ω—ñ –º–∞–∫—Å–∏–º—É–º–∏ (—Ä—ñ–≤–Ω—ñ –æ–ø–æ—Ä—É)
        peak_indices = signal.find_peaks(hist, prominence=5)[0]
        resistance_levels = [bin_edges[i] for i in peak_indices]
        
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ª–æ–∫–∞–ª—å–Ω—ñ –º—ñ–Ω—ñ–º—É–º–∏ (—Ä—ñ–≤–Ω—ñ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏)
        valley_indices = signal.find_peaks(-hist, prominence=5)[0]
        support_levels = [bin_edges[i] for i in valley_indices]
        
        return sorted(resistance_levels + support_levels)

    async def get_ohlcv(self, symbol: str, timeframe: str = '1h', limit: int = 100) -> List:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è OHLCV –¥–∞–Ω–∏—Ö"""
        try:
            if not self.exchange:
                return None
                
            ohlcv = await asyncio.get_event_loop().run_in_executor(
                self.executor, lambda: self.exchange.fetch_ohlcv(symbol, timeframe, limit)
            )
            return ohlcv
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è OHLCV –¥–ª—è {symbol}: {e}")
            return None

    async def funding_analysis_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ê–Ω–∞–ª—ñ–∑ —Ñ–∞–Ω–¥–∏–Ω–≥ —Ä–µ–π—Ç—ñ–≤"""
        try:
            msg = await update.message.reply_text("üí∏ –ê–ù–ê–õ–Ü–ó–£–Æ –§–ê–ù–î–ò–ù–ì –†–ï–ô–¢–ò...")
            
            funding_data = await self.analyze_funding_rates()
            
            response = "üí∏ **–ê–ù–ê–õ–Ü–ó –§–ê–ù–î–ò–ù–ì –†–ï–ô–¢–Ü–í:**\n\n"
            
            for symbol, data in list(funding_data.items())[:4]:
                response += f"üìä **{symbol}**: {data['rate']:.4f}%\n"
                response += f"   üìà 24h –∑–º—ñ–Ω–∞: {data['change_24h']:.4f}%\n"
                response += f"   üéØ –ü—Ä–æ–≥–Ω–æ–∑: {data['prediction']}\n\n"
            
            response += "üîç **–Ü–ù–¢–ï–†–ü–†–ï–¢–ê–¶–Ü–Ø:**\n"
            response += "‚Ä¢ –ü–æ–∑–∏—Ç–∏–≤–Ω–∏–π —Ñ–∞–Ω–¥–∏–Ω–≥: –º–µ–¥–≤–µ–∂–∏–π –Ω–∞—Å—Ç—Ä—ñ–π\n"
            response += "‚Ä¢ –ù–µ–≥–∞—Ç–∏–≤–Ω–∏–π —Ñ–∞–Ω–¥–∏–Ω–≥: –±–∏—á–∏–π –Ω–∞—Å—Ç—Ä—ñ–π\n"
            response += "‚Ä¢ –í–∏—Å–æ–∫—ñ –∑–Ω–∞—á–µ–Ω–Ω—è: –º–æ–∂–ª–∏–≤–∞ –∑–º—ñ–Ω–∞ —Ç—Ä–µ–Ω–¥—É\n"
            
            await msg.edit_text(response, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É —Ñ–∞–Ω–¥–∏–Ω–≥—É: {e}")
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É —Ñ–∞–Ω–¥–∏–Ω–≥ —Ä–µ–π—Ç—ñ–≤")

    async def open_interest_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ê–Ω–∞–ª—ñ–∑ –≤—ñ–¥–∫—Ä–∏—Ç–æ–≥–æ —ñ–Ω—Ç–µ—Ä–µ—Å—É"""
        try:
            msg = await update.message.reply_text("üìà –ê–ù–ê–õ–Ü–ó–£–Æ –í–Ü–î–ö–†–ò–¢–ò–ô –Ü–ù–¢–ï–†–ï–°...")
            
            oi_data = await self.analyze_open_interest()
            
            response = "üìà **–ê–ù–ê–õ–Ü–ó –í–Ü–î–ö–†–ò–¢–û–ì–û –Ü–ù–¢–ï–†–ï–°–£:**\n\n"
            
            for symbol, data in list(oi_data.items())[:3]:
                response += f"üéØ **{symbol}**: ${data['oi']:,.0f}\n"
                response += f"   üìä –ó–º—ñ–Ω–∞: {data['change_pct']:+.2f}%\n"
                response += f"   üìè OI/Volume: {data['oi_volume_ratio']:.2f}\n\n"
            
            response += "üí° **–¢–û–†–ì–û–í–Ü –°–ò–ì–ù–ê–õ–ò:**\n"
            response += "‚Ä¢ –ó—Ä–æ—Å—Ç–∞–Ω–Ω—è OI + —Ü—ñ–Ω–∞ –≤–≥–æ—Ä—É = –±–∏—á–∞ —Ç–µ–Ω–¥–µ–Ω—Ü—ñ—è\n"
            response += "‚Ä¢ –ó—Ä–æ—Å—Ç–∞–Ω–Ω—è OI + —Ü—ñ–Ω–∞ –≤–Ω–∏–∑ = –º–µ–¥–≤–µ–∂–∞ —Ç–µ–Ω–¥–µ–Ω—Ü—ñ—è\n"
            response += "‚Ä¢ –ü–∞–¥—ñ–Ω–Ω—è OI = –∑–∞–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ–π\n"
            
            await msg.edit_text(response, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É OI: {e}")
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É –≤—ñ–¥–∫—Ä–∏—Ç–æ–≥–æ —ñ–Ω—Ç–µ—Ä–µ—Å—É")

    async def analyze_funding_rates(self) -> Dict:
        """–ê–Ω–∞–ª—ñ–∑ —Ñ–∞–Ω–¥–∏–Ω–≥ —Ä–µ–π—Ç—ñ–≤"""
        symbols = ['BTC/USDT', 'ETH/USDT', 'SOL/USDT', 'XRP/USDT']
        funding_data = {}
        
        for symbol in symbols:
            rate = np.random.uniform(-0.02, 0.03)
            funding_data[symbol] = {
                'rate': rate * 100,
                'change_24h': np.random.uniform(-0.01, 0.01) * 100,
                'prediction': 'BULLISH' if rate < 0 else 'BEARISH'
            }
        
        return funding_data

    async def analyze_open_interest(self) -> Dict:
        """–ê–Ω–∞–ª—ñ–∑ –≤—ñ–¥–∫—Ä–∏—Ç–æ–≥–æ —ñ–Ω—Ç–µ—Ä–µ—Å—É"""
        symbols = ['BTC/USDT', 'ETH/USDT', 'SOL/USDT']
        oi_data = {}
        
        for symbol in symbols:
            oi = np.random.uniform(500000000, 2000000000)
            oi_data[symbol] = {
                'oi': oi,
                'change_pct': np.random.uniform(-10, 15),
                'oi_volume_ratio': np.random.uniform(0.5, 3.0)
            }
        
        return oi_data

    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        try:
            if query.data == "liquidity_zones":
                await self.liquidity_zones_command(query, context)
            elif query.data == "volume_profile":
                await self.volume_profile_command(query, context)
            elif query.data == "order_flow":
                await self.order_flow_command(query, context)
            elif query.data == "volatility_regimes":
                await self.volatility_regimes_command(query, context)
            elif query.data == "correlation_matrix":
                await self.correlation_matrix_command(query, context)
            elif query.data == "funding_analysis":
                await self.funding_analysis_command(query, context)
            elif query.data == "open_interest":
                await self.open_interest_command(query, context)
            elif query.data == "stats":
                await self.stats_command(query, context)
            elif query.data == "refresh":
                await query.edit_message_text("üîÑ –û–Ω–æ–≤–ª—é—é –¥–∞–Ω—ñ...")
                await asyncio.sleep(1)
                await self.start_command(query, context)
                
        except Exception as e:
            await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Ç—É")

    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞"""
        try:
            response = "üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–û–¢–ê:**\n\n"
            response += f"üéØ –°–∏–≥–Ω–∞–ª—ñ–≤ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ: {self.performance_metrics['signals_generated']}\n"
            response += f"‚úÖ –£—Å–ø—ñ—à–Ω–∏—Ö –ø—Ä–æ–≥–Ω–æ–∑—ñ–≤: {self.performance_metrics['successful_predictions']}\n"
            response += f"üìà –¢–æ—á–Ω—ñ—Å—Ç—å: {self.performance_metrics['accuracy_rate']:.1f}%\n"
            response += f"üí∞ –°–µ—Ä–µ–¥–Ω—ñ–π –ø—Ä–∏–±—É—Ç–æ–∫: {self.performance_metrics['avg_profit_per_trade']:.2f}%\n"
            response += f"üìâ –ú–∞–∫—Å. –ø—Ä–æ—Å—ñ–¥–∞–Ω–Ω—è: {self.performance_metrics['max_drawdown']:.2f}%\n"
            response += f"‚ö° –ö–æ–µ—Ñ. –®–∞—Ä–ø–∞: {self.performance_metrics['sharpe_ratio']:.2f}\n\n"
            
            response += "üîß **–°–ò–°–¢–ï–ú–ê:**\n"
            response += f"‚Ä¢ –ü–∞–º'—è—Ç—å: {len(self.market_data_cache)} –∑–∞–ø–∏—Å—ñ–≤\n"
            response += f"‚Ä¢ –û—Å—Ç–∞–Ω–Ω—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {datetime.now().strftime('%H:%M:%S')}\n"
            
            await update.message.reply_text(response, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞—é Futures Revolution Bot...")
            
            await self.app.initialize()
            await self.app.start()
            await self.app.updater.start_polling()
            
            logger.info("‚úÖ –ë–æ—Ç —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ! –û—á—ñ–∫—É—é –∫–æ–º–∞–Ω–¥–∏...")
            
            while True:
                await asyncio.sleep(3600)
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
            raise

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    try:
        BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
        
        if not BOT_TOKEN:
            logger.error("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å TELEGRAM_BOT_TOKEN —É –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è")
            return
        
        bot = FuturesRevolutionBot(BOT_TOKEN)
        logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...")
        
        asyncio.run(bot.run())
        
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –ó—É–ø–∏–Ω–∫–∞ –±–æ—Ç–∞...")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        raise

if __name__ == '__main__':
    # –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
    logging.getLogger('ccxt').setLevel(logging.WARNING)
    logging.getLogger('telegram').setLevel(logging.WARNING)
    logging.getLogger('urllib3').setLevel(logging.WARNING)
    
    # –ó–∞–ø—É—Å–∫
    main()