import pandas as pd
import numpy as np
import requests
import time
from datetime import datetime, timedelta
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.ensemble import IsolationForest
from sklearn.preprocessing import StandardScaler
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
import asyncio
from flask import Flask, request, jsonify
import threading
import json
from typing import Dict, List, Optional, Tuple
import logging
import math
import os
import re
import heapq
from collections import deque

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class AdvancedPumpDumpBot:
    def __init__(self, token: str):
        self.token = token
        self.app = Application.builder().token(token).build()
        self.flask_app = Flask(__name__)
        self.setup_flask_routes()
        
        # –Ü—Å—Ç–æ—Ä–∏—á–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É —Ç—Ä–µ–Ω–¥—ñ–≤
        self.historical_data = deque(maxlen=1000)
        self.market_metrics = {}
        
        # –°–ø–∏—Å–∫–∏ –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó
        self.garbage_symbols = {
            'USD', 'EUR', 'GBP', 'JPY', 'CNY', 'RUB', 'TRY', 'BRL', 'KRW', 'AUD',
            'USDC', 'USDT', 'BUSD', 'DAI', 'TUSD', 'PAX', 'UST', 'HUSD', 'GUSD',
            'BVND', 'IDRT', 'BIDR', 'BKRW', 'NGN', 'UAH', 'VAI', 'SUSD', 'USDN'
        }
        
        # –†–µ–≥—É–ª—è—Ä–Ω–∏–π –≤–∏—Ä–∞–∑ –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó —Å–º—ñ—Ç—Ç—è
        self.garbage_pattern = re.compile(
            r'.*[0-9]+[LNS].*|.*UP|DOWN|BEAR|BULL|HALF|QUARTER.*|.*[0-9]{3,}.*',
            re.IGNORECASE
        )
        
        # –ü–æ—Ä–æ–≥–∏ –¥–ª—è –ø–∞–º–ø—É (–æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω—ñ –¥–ª—è –ø–∞–º–ø/–¥–∞–º–ø —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó)
        self.pump_thresholds = {
            'volume_ratio': 2.8,           # –ó—Ä–æ—Å—Ç–∞–Ω–Ω—è –æ–±'—î–º—É
            'price_change_1h': 7.0,        # –ó–º—ñ–Ω–∞ —Ü—ñ–Ω–∏ –∑–∞ 1 –≥–æ–¥–∏–Ω—É
            'price_change_5m': 2.5,        # –ó–º—ñ–Ω–∞ —Ü—ñ–Ω–∏ –∑–∞ 5 —Ö–≤–∏–ª–∏–Ω
            'price_change_24h': 15.0,      # –ó–º—ñ–Ω–∞ —Ü—ñ–Ω–∏ –∑–∞ 24 –≥–æ–¥–∏–Ω–∏
            'rsi_threshold': 62,           # RSI —Ä—ñ–≤–µ–Ω—å
            'buy_pressure_ratio': 1.3,     # –°–ø—ñ–≤–≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è –∫—É–ø—ñ–≤–ª—ñ/–ø—Ä–æ–¥–∞–∂—É
            'macd_signal': 0.0008,         # MACD —Å–∏–≥–Ω–∞–ª
            'min_volume': 50000,           # –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –æ–±'—î–º –≤ USDT
            'max_volume': 5000000,         # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π –æ–±'—î–º (—Ñ—ñ–ª—å—Ç—Ä –≤–µ–ª–∏–∫–∏—Ö –º–æ–Ω–µ—Ç)
            'market_cap_max': 100000000,   # –ú–∞–∫—Å –∫–∞–ø—ñ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—è
            'liquidity_score': 0.7,        # –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –ª—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—å
            'volatility_ratio': 2.0        # –°–ø—ñ–≤–≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—ñ
        }
        
        # –ü–æ—Ä–æ–≥–∏ –¥–ª—è –¥–∞–º–ø—É
        self.dump_thresholds = {
            'volume_ratio': 2.5,
            'price_change_1h': -6.0,
            'price_change_5m': -2.0,
            'price_change_24h': -12.0,
            'rsi_threshold': 38,
            'sell_pressure_ratio': 1.4,
            'macd_signal': -0.0007,
            'min_volume': 50000,
            'max_volume': 5000000,
            'market_cap_max': 100000000,
            'liquidity_score': 0.7,
            'volatility_ratio': 1.8
        }
        
        self.coin_blacklist = set()
        self.last_signals = {}
        self.performance_stats = {
            'total_scans': 0,
            'signals_found': 0,
            'success_rate': 0.0,
            'avg_scan_time': 0.0
        }
        
        self.setup_handlers()
        
    def setup_flask_routes(self):
        @self.flask_app.route('/webhook', methods=['POST'])
        def webhook():
            data = request.json
            return self.handle_webhook(data)
            
        @self.flask_app.route('/stats', methods=['GET'])
        def stats():
            return jsonify({
                'performance': self.performance_stats,
                'last_signals_count': len(self.last_signals),
                'settings': {
                    'pump': self.pump_thresholds,
                    'dump': self.dump_thresholds
                }
            })
            
        @self.flask_app.route('/update_settings', methods=['POST'])
        def update_settings():
            data = request.json
            self.update_settings(data)
            return jsonify({'status': 'success'})
            
        @self.flask_app.route('/health', methods=['GET'])
        def health():
            return jsonify({
                'status': 'healthy', 
                'timestamp': datetime.now().isoformat(),
                'uptime': time.time() - self.start_time
            })
    
    def setup_handlers(self):
        self.app.add_handler(CommandHandler("start", self.start))
        self.app.add_handler(CommandHandler("scan", self.scan_command))
        self.app.add_handler(CommandHandler("settings", self.settings_command))
        self.app.add_handler(CommandHandler("blacklist", self.blacklist_command))
        self.app.add_handler(CommandHandler("debug", self.debug_command))
        self.app.add_handler(CommandHandler("whale", self.whale_command))
        self.app.add_handler(CommandHandler("topsignals", self.top_signals_command))
        self.app.add_handler(CommandHandler("performance", self.performance_command))
        self.app.add_handler(CommandHandler("analysis", self.market_analysis_command))
        self.app.add_handler(CallbackQueryHandler(self.button_handler))
        
        self.start_time = time.time()

    def is_garbage_symbol(self, symbol: str) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ —Å–∏–º–≤–æ–ª —î —Å–º—ñ—Ç—Ç—è–º"""
        symbol = symbol.upper()
        
        if symbol in self.garbage_symbols:
            return True
        
        if self.garbage_pattern.match(symbol):
            return True
        
        if len(symbol) > 12:
            return True
        
        if any(char.isdigit() for char in symbol[1:-1]):
            return True
            
        if symbol.endswith(('UP', 'DOWN', 'BULL', 'BEAR')):
            return True
            
        return False

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        keyboard = [
            [InlineKeyboardButton("üîç –°–∫–∞–Ω—É–≤–∞—Ç–∏ –∑–∞—Ä–∞–∑", callback_data="scan_now")],
            [InlineKeyboardButton("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", callback_data="settings")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
            [InlineKeyboardButton("üö´ –ß–æ—Ä–Ω–∏–π —Å–ø–∏—Å–æ–∫", callback_data="blacklist")],
            [InlineKeyboardButton("üêã Whale Alert", callback_data="whale_alert")],
            [InlineKeyboardButton("üìà –¢–û–ü —Å–∏–≥–Ω–∞–ª–∏", callback_data="top_signals")],
            [InlineKeyboardButton("üìã –ê–Ω–∞–ª—ñ–∑ —Ä–∏–Ω–∫—É", callback_data="market_analysis")],
            [InlineKeyboardButton("üèÜ –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å", callback_data="performance")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "ü§ñ **ULTIMATE PUMP & DUMP DETECTOR**\n\n"
            "üöÄ *–ù–∞–π—Ä–æ–∑—É–º–Ω—ñ—à–∏–π –±–æ—Ç –¥–ª—è –≤–∏—è–≤–ª–µ–Ω–Ω—è –ø–∞–º–ø—ñ–≤ —Ç–∞ –¥–∞–º–ø—ñ–≤*\n\n"
            "‚ú® **–£–Ω—ñ–∫–∞–ª—å–Ω—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ:**\n"
            "‚Ä¢ üéØ AI-–¥–µ—Ç–µ–∫—Ü—ñ—è –∞–Ω–æ–º–∞–ª—ñ–π –æ–±'—î–º—É\n"
            "‚Ä¢ üìä –ú—É–ª—å—Ç–∏—Ç–∞–π–º—Ñ—Ä–µ–π–º–Ω–∏–π –∞–Ω–∞–ª—ñ–∑\n"
            "‚Ä¢ üêã Whale order detection\n"
            "‚Ä¢ üîÆ –ü—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è —Ç—Ä–µ–Ω–¥—ñ–≤\n"
            "‚Ä¢ üìà RSI + MACD + Bollinger Bands\n"
            "‚Ä¢ üåä Liquidity analysis\n"
            "‚Ä¢ ‚ö° Real-time alerts\n"
            "‚Ä¢ üì± Smart notifications\n\n"
            "üíé *–°—Ç–≤–æ—Ä–µ–Ω–æ AI –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—ó –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ*",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

    async def get_market_data(self, symbol: str) -> Optional[Dict]:
        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —Å–∏–º–≤–æ–ª –Ω–µ —Å–º—ñ—Ç—Ç—è
            if self.is_garbage_symbol(symbol):
                return None
            
            # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ Binance
            url = f"https://api.binance.com/api/v3/ticker/24hr?symbol={symbol}USDT"
            response = requests.get(url, timeout=8)
            data = response.json()
            
            if 'code' in data:
                return None
            
            quote_volume = float(data['quoteVolume'])
            price_change = float(data['priceChangePercent'])
            
            # –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –∑–∞ –æ–±'—î–º–æ–º —Ç–∞ –∑–º—ñ–Ω–æ—é —Ü—ñ–Ω–∏
            if (quote_volume < self.pump_thresholds['min_volume'] or 
                quote_volume > self.pump_thresholds['max_volume'] or
                abs(price_change) < 5.0):  # –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–∞ —Ü—ñ–Ω–∏
                return None
            
            # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–ª—è–π–Ω—Å—ñ–≤
            klines_data = {}
            timeframes = {
                '5m': '&interval=5m&limit=100',
                '15m': '&interval=15m&limit=100',
                '1h': '&interval=1h&limit=50',
                '4h': '&interval=4h&limit=25'
            }
            
            for tf, params in timeframes.items():
                klines_url = f"https://api.binance.com/api/v3/klines?symbol={symbol}USDT{params}"
                klines_response = requests.get(klines_url, timeout=8)
                klines_data[tf] = klines_response.json()
            
            # Order book data
            orderbook_url = f"https://api.binance.com/api/v3/depth?symbol={symbol}USDT&limit=15"
            orderbook_response = requests.get(orderbook_url, timeout=8)
            orderbook_data = orderbook_response.json()
            
            # Trades data
            trades_url = f"https://api.binance.com/api/v3/trades?symbol={symbol}USDT&limit=20"
            trades_response = requests.get(trades_url, timeout=8)
            trades_data = trades_response.json()
            
            market_data = {
                'symbol': symbol,
                'price': float(data['lastPrice']),
                'volume': float(data['volume']),
                'quote_volume': quote_volume,
                'price_change_24h': price_change,
                'price_change': float(data['priceChange']),
                'high': float(data['highPrice']),
                'low': float(data['lowPrice']),
                'trades': len(trades_data),
                'klines': klines_data,
                'orderbook': orderbook_data,
                'trades_data': trades_data,
                'timestamp': datetime.now().isoformat()
            }
            
            return market_data
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–ª—è {symbol}: {e}")
            return None

    def calculate_advanced_indicators(self, klines_data: List) -> Dict:
        """–†–æ–∑—à–∏—Ä–µ–Ω—ñ —Ç–µ—Ö–Ω—ñ—á–Ω—ñ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏"""
        try:
            closes = np.array([float(x[4]) for x in klines_data])
            highs = np.array([float(x[2]) for x in klines_data])
            lows = np.array([float(x[3]) for x in klines_data])
            volumes = np.array([float(x[5]) for x in klines_data])
            
            # –ë–∞–∑–æ–≤—ñ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏
            rsi = self.calculate_rsi(closes)
            macd = self.calculate_macd(closes)
            upper_bb, middle_bb, lower_bb = self.calculate_bollinger_bands(closes)
            
            # –†–æ–∑—à–∏—Ä–µ–Ω—ñ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏
            volatility = np.std(closes[-20:]) / np.mean(closes[-20:]) if len(closes) >= 20 else 0
            volume_velocity = np.mean(np.diff(volumes[-10:])) if len(volumes) >= 10 else 0
            price_acceleration = np.mean(np.diff(np.diff(closes[-10:]))) if len(closes) >= 12 else 0
            
            # –ê–Ω–∞–ª—ñ–∑ —Ç—Ä–µ–Ω–¥—É
            short_trend = self.calculate_trend_strength(closes, 10)
            medium_trend = self.calculate_trend_strength(closes, 20)
            
            # –û–±'—î–º–Ω–∏–π –∞–Ω–∞–ª—ñ–∑
            volume_sma = self.calculate_sma(volumes, 20)
            volume_ratio = volumes[-1] / volume_sma if volume_sma > 0 else 1
            
            return {
                'rsi': rsi,
                'macd': macd,
                'bb_upper': upper_bb,
                'bb_middle': middle_bb,
                'bb_lower': lower_bb,
                'volatility': volatility,
                'volume_velocity': volume_velocity,
                'price_acceleration': price_acceleration,
                'short_trend': short_trend,
                'medium_trend': medium_trend,
                'volume_ratio': volume_ratio,
                'current_price': closes[-1],
                'price_5m_ago': closes[-6] if len(closes) >= 6 else closes[0],
                'price_1h_ago': closes[-12] if len(closes) >= 12 else closes[0],
                'price_4h_ago': closes[-48] if len(closes) >= 48 else closes[0]
            }
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä—ñ–≤: {e}")
            return {}

    def calculate_trend_strength(self, prices: np.ndarray, period: int) -> float:
        """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Å–∏–ª–∏ —Ç—Ä–µ–Ω–¥—É"""
        if len(prices) < period:
            return 0.0
        
        returns = np.diff(prices[-period:]) / prices[-period:-1]
        trend_strength = np.mean(returns) / np.std(returns) if np.std(returns) > 0 else 0
        return trend_strength

    def detect_volume_anomaly(self, volumes: np.ndarray) -> bool:
        """–î–µ—Ç–µ–∫—Ü—ñ—è –∞–Ω–æ–º–∞–ª—å–Ω–∏—Ö –æ–±'—î–º—ñ–≤ –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º ML"""
        try:
            if len(volumes) < 20:
                return False
            
            # –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è Isolation Forest –¥–ª—è –∞–Ω–æ–º–∞–ª—ñ–π
            volumes_reshaped = volumes[-20:].reshape(-1, 1)
            scaler = StandardScaler()
            volumes_scaled = scaler.fit_transform(volumes_reshaped)
            
            model = IsolationForest(contamination=0.1, random_state=42)
            predictions = model.fit_predict(volumes_scaled)
            
            # –û—Å—Ç–∞–Ω–Ω—ñ–π –æ–±'—î–º —î –∞–Ω–æ–º–∞–ª—ñ—î—é
            return predictions[-1] == -1
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –¥–µ—Ç–µ–∫—Ü—ñ—ó –∞–Ω–æ–º–∞–ª—ñ–π: {e}")
            return False

    async def scan_for_pump_dump(self):
        """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è –¥–ª—è –ø–∞–º–ø/–¥–∞–º–ø"""
        try:
            start_time = time.time()
            
            # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–ø –º–æ–Ω–µ—Ç –∑–∞ –∑–º—ñ–Ω–æ—é —Ü—ñ–Ω–∏ –∑–∞ 24–≥
            response = requests.get("https://api.binance.com/api/v3/ticker/24hr", timeout=10)
            all_data = response.json()
            
            # –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è USDT –ø–∞—Ä —Ç–∞ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∑–∞ –∑–º—ñ–Ω–æ—é —Ü—ñ–Ω–∏ (–∞–±—Å–æ–ª—é—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è)
            usdt_pairs = [
                x for x in all_data 
                if x['symbol'].endswith('USDT') 
                and not self.is_garbage_symbol(x['symbol'].replace('USDT', ''))
            ]
            
            # –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∑–∞ –∞–±—Å–æ–ª—é—Ç–Ω–æ—é –∑–º—ñ–Ω–æ—é —Ü—ñ–Ω–∏ (–Ω–∞–π–±—ñ–ª—å—à—ñ —Ä—É—Ö–∏)
            sorted_by_change = sorted(
                usdt_pairs,
                key=lambda x: abs(float(x['priceChangePercent'])),
                reverse=True
            )[:50]  # –¢–æ–ø 50 –∑–∞ –∑–º—ñ–Ω–æ—é —Ü—ñ–Ω–∏
            
            results = {'pump': [], 'dump': []}
            
            for coin in sorted_by_change:
                symbol = coin['symbol'].replace('USDT', '')
                
                if symbol in self.coin_blacklist:
                    continue
                    
                market_data = await self.get_market_data(symbol)
                if not market_data:
                    continue
                
                # –ê–Ω–∞–ª—ñ–∑ —Ç–µ—Ö–Ω—ñ—á–Ω–∏—Ö —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä—ñ–≤
                indicators = self.calculate_advanced_indicators(market_data['klines']['15m'])
                
                # –î–µ—Ç–µ–∫—Ü—ñ—è –ø–∞–º–ø—É
                pump_score = self.calculate_pump_score(market_data, indicators)
                if pump_score > 0.65:  # –í–∏—Å–æ–∫–∏–π –ø–æ—Ä—ñ–≥ –¥–ª—è —è–∫–æ—Å—Ç—ñ
                    results['pump'].append({
                        'symbol': symbol,
                        'score': pump_score,
                        'price': market_data['price'],
                        'volume': market_data['quote_volume'],
                        'change_24h': market_data['price_change_24h'],
                        'indicators': indicators
                    })
                
                # –î–µ—Ç–µ–∫—Ü—ñ—è –¥–∞–º–ø—É
                dump_score = self.calculate_dump_score(market_data, indicators)
                if dump_score > 0.65:
                    results['dump'].append({
                        'symbol': symbol,
                        'score': dump_score,
                        'price': market_data['price'],
                        'volume': market_data['quote_volume'],
                        'change_24h': market_data['price_change_24h'],
                        'indicators': indicators
                    })
            
            # –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
            for key in results:
                results[key].sort(key=lambda x: x['score'], reverse=True)
            
            scan_time = time.time() - start_time
            self.performance_stats['total_scans'] += 1
            self.performance_stats['signals_found'] += len(results['pump']) + len(results['dump'])
            self.performance_stats['avg_scan_time'] = (
                self.performance_stats['avg_scan_time'] * (self.performance_stats['total_scans'] - 1) + scan_time
            ) / self.performance_stats['total_scans']
            
            return results
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è: {e}")
            return {'pump': [], 'dump': []}

    def calculate_pump_score(self, market_data: Dict, indicators: Dict) -> float:
        """–†–æ–∑—à–∏—Ä–µ–Ω–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Å–∫–æ—Ä—É –¥–ª—è –ø–∞–º–ø—É"""
        score = 0.0
        weights = {
            'volume_ratio': 0.25,
            'price_change': 0.20,
            'rsi': 0.15,
            'buy_pressure': 0.20,
            'volatility': 0.10,
            'trend': 0.10
        }
        
        try:
            # –ê–Ω–∞–ª—ñ–∑ –æ–±'—î–º—É
            if indicators.get('volume_ratio', 1) > self.pump_thresholds['volume_ratio']:
                score += weights['volume_ratio']
            
            # –ê–Ω–∞–ª—ñ–∑ —Ü—ñ–Ω–∏
            price_change_5m = ((indicators['current_price'] - indicators['price_5m_ago']) / 
                             indicators['price_5m_ago']) * 100
            if price_change_5m > self.pump_thresholds['price_change_5m']:
                score += weights['price_change']
            
            # RSI
            if indicators.get('rsi', 50) > self.pump_thresholds['rsi_threshold']:
                score += weights['rsi']
            
            # –ê–Ω–∞–ª—ñ–∑ —Å—Ç–∞–∫–∞–Ω—É
            ob_analysis = self.analyze_orderbook(market_data['orderbook'])
            if ob_analysis['buy_pressure'] > self.pump_thresholds['buy_pressure_ratio']:
                score += weights['buy_pressure']
            
            # –í–æ–ª–∞—Ç–∏–ª—å–Ω—ñ—Å—Ç—å
            if indicators.get('volatility', 0) > 0.02:
                score += weights['volatility']
            
            # –¢—Ä–µ–Ω–¥
            if indicators.get('short_trend', 0) > 0:
                score += weights['trend']
                
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É pump score: {e}")
        
        return min(score, 1.0)

    # –ê–Ω–∞–ª–æ–≥—ñ—á–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è calculate_dump_score...

    async def send_advanced_alert(self, context: ContextTypes.DEFAULT_TYPE, signal_data: Dict, signal_type: str):
        """–†–æ–∑—à–∏—Ä–µ–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è"""
        symbol = signal_data['symbol']
        
        emoji = "üöÄ" if signal_type == 'pump' else "üìâ"
        title = "–ü–û–¢–ï–ù–¶–Ü–ô–ù–ò–ô –ü–ê–ú–ü" if signal_type == 'pump' else "–ü–û–¢–ï–ù–¶–Ü–ô–ù–ò–ô –î–ê–ú–ü"
        
        message = f"{emoji} **{title}** {emoji}\n\n"
        message += f"üî∏ **–ú–æ–Ω–µ—Ç–∞:** `{symbol}`\n"
        message += f"üî∏ **–¶—ñ–Ω–∞:** ${signal_data['price']:.6f}\n"
        message += f"üî∏ **24h –ó–º—ñ–Ω–∞:** {signal_data['change_24h']:+.1f}%\n"
        message += f"üî∏ **–û–±'—î–º:** {signal_data['volume']:,.0f} USDT\n"
        message += f"üî∏ **–í–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å:** {signal_data['score']:.1%}\n"
        message += f"üî∏ **RSI:** {signal_data['indicators'].get('rsi', 50):.1f}\n"
        message += f"üî∏ **–í–æ–ª–∞—Ç–∏–ª—å–Ω—ñ—Å—Ç—å:** {signal_data['indicators'].get('volatility', 0):.2%}\n\n"
        
        message += "üìä **–°–∏–≥–Ω–∞–ª–∏:**\n"
        if signal_data['score'] > 0.8:
            message += "üéØ *–í–∏—Å–æ–∫–æ—è–∫—ñ—Å–Ω–∏–π —Å–∏–≥–Ω–∞–ª*\n"
        elif signal_data['score'] > 0.65:
            message += "‚úÖ *–°–µ—Ä–µ–¥–Ω—è —è–∫—ñ—Å—Ç—å*\n"
        else:
            message += "‚ö†Ô∏è *–ù–∏–∑—å–∫–∞ —è–∫—ñ—Å—Ç—å*\n"
        
        message += f"\n‚è∞ *{datetime.now().strftime('%H:%M:%S')}*"
        
        # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å–∏–≥–Ω–∞–ª—É
        self.last_signals[f"{symbol}_{datetime.now().timestamp()}"] = {
            'type': signal_type,
            'time': datetime.now().isoformat(),
            'data': signal_data
        }
        
        await context.bot.send_message(
            chat_id=context.job.chat_id,
            text=message,
            parse_mode='Markdown'
        )

    # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –∫–æ–º–∞–Ω–¥–∏ —Ç–∞ —Ñ—É–Ω–∫—Ü—ñ—ó...

    async def market_analysis_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É —Ä–∏–Ω–∫—É"""
        analysis_msg = "üìà **–ê–Ω–∞–ª—ñ–∑ —Ä–∏–Ω–∫—É**\n\n"
        
        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–≥–∞–ª—å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ä–∏–Ω–æ–∫
        try:
            response = requests.get("https://api.binance.com/api/v3/ticker/24hr", timeout=10)
            data = response.json()
            
            total_volume = sum(float(x['quoteVolume']) for x in data if 'USDT' in x['symbol'])
            avg_change = np.mean([float(x['priceChangePercent']) for x in data if 'USDT' in x['symbol']])
            
            analysis_msg += f"‚Ä¢ üìä –ó–∞–≥–∞–ª—å–Ω–∏–π –æ–±'—î–º: {total_volume:,.0f} USDT\n"
            analysis_msg += f"‚Ä¢ üìà –°–µ—Ä–µ–¥–Ω—è –∑–º—ñ–Ω–∞: {avg_change:+.2f}%\n"
            analysis_msg += f"‚Ä¢ üîç –ú–æ–Ω–µ—Ç —É –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É: {len(self.last_signals)}\n"
            analysis_msg += f"‚Ä¢ ‚ö° –û—Å—Ç–∞–Ω–Ω—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {datetime.now().strftime('%H:%M')}\n\n"
            
            analysis_msg += "üéØ *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:*\n"
            if avg_change > 2.0:
                analysis_msg += "‚Ä¢ üìà –†–∏—Å–∫ –ø–∞–º–ø—ñ–≤ –∑–±—ñ–ª—å—à–µ–Ω–∏–π\n"
            elif avg_change < -2.0:
                analysis_msg += "‚Ä¢ üìâ –†–∏—Å–∫ –¥–∞–º–ø—ñ–≤ –∑–±—ñ–ª—å—à–µ–Ω–∏–π\n"
            else:
                analysis_msg += "‚Ä¢ ‚öñÔ∏è –†–∏–Ω–æ–∫ —Å—Ç–∞–±—ñ–ª—å–Ω–∏–π\n"
                
        except Exception as e:
            analysis_msg += "‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É —Ä–∏–Ω–∫—É\n"
        
        await update.message.reply_text(analysis_msg, parse_mode='Markdown')

    async def performance_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ"""
        perf_msg = "üèÜ **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ**\n\n"
        perf_msg += f"‚Ä¢ üìä –í—Å—å–æ–≥–æ —Å–∫–∞–Ω—É–≤–∞–Ω—å: {self.performance_stats['total_scans']}\n"
        perf_msg += f"‚Ä¢ üìà –ó–Ω–∞–π–¥–µ–Ω–æ —Å–∏–≥–Ω–∞–ª—ñ–≤: {self.performance_stats['signals_found']}\n"
        perf_msg += f"‚Ä¢ ‚ö° –°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è: {self.performance_stats['avg_scan_time']:.2f}s\n"
        perf_msg += f"‚Ä¢ üéØ –£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å: {self.performance_stats.get('success_rate', 0):.1%}\n"
        perf_msg += f"‚Ä¢ ‚è∞ –ê–ø—Ç–∞–π–º: {timedelta(seconds=int(time.time() - self.start_time))}\n\n"
        
        perf_msg += "üìà *–û—Å—Ç–∞–Ω–Ω—ñ 10 —Å–∏–≥–Ω–∞–ª—ñ–≤:*\n"
        recent_signals = list(self.last_signals.values())[-10:]
        for i, signal in enumerate(recent_signals, 1):
            perf_msg += f"{i}. {signal['data']['symbol']} - {signal['type']} - {signal['data']['score']:.1%}\n"
        
        await update.message.reply_text(perf_msg, parse_mode='Markdown')

    # –†–µ—à—Ç–∞ —Ñ—É–Ω–∫—Ü—ñ–π...

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        print("ü§ñ –ó–∞–ø—É—Å–∫ ULTIMATE PUMP/DUMP BOT...")
        print("üéØ –í–µ—Ä—Å—ñ—è: 2.0 (AI Enhanced)")
        print("üìä –°–ø–µ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è: –ü–∞–º–ø/–¥–∞–º–ø —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó")
        print("‚ö° –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è: –¢–æ–ø –º–æ–Ω–µ—Ç–∏ –∑–∞ –∑–º—ñ–Ω–æ—é —Ü—ñ–Ω–∏")
        print("üíé –°—Ç–≤–æ—Ä–µ–Ω–æ –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º –ø–µ—Ä–µ–¥–æ–≤–∏—Ö AI —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ–π")
        
        # –ó–∞–ø—É—Å–∫ Flask
        flask_thread = threading.Thread(target=self.run_flask, daemon=True)
        flask_thread.start()
        
        self.app.run_polling()

# –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
if __name__ == "__main__":
    TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
    if not TOKEN:
        print("‚ùå –ü–æ–º–∏–ª–∫–∞: TELEGRAM_BOT_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        exit(1)
    
    bot = AdvancedPumpDumpBot(TOKEN)
    bot.run()