import matplotlib
matplotlib.use('Agg')
import pandas as pd
import numpy as np
import requests
import time
from datetime import datetime, timedelta
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.ensemble import IsolationForest
from sklearn.preprocessing import StandardScaler
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
import asyncio
from flask import Flask, request, jsonify
import threading
import json
from typing import Dict, List, Optional, Tuple, Any
import logging
import math
import os
import re
import heapq
from collections import deque, defaultdict
from concurrent.futures import ThreadPoolExecutor
import talib
from scipy import stats
import ccxt
import aiohttp
import warnings
warnings.filterwarnings('ignore')

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class UltimatePumpDumpDetector:
    def __init__(self, token: str):
        self.token = token
        self.app = Application.builder().token(token).build()
        
        # –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±—ñ—Ä–∂ —á–µ—Ä–µ–∑ CCXT
        self.exchange = ccxt.binance({
            'enableRateLimit': True,
            'options': {
                'defaultType': 'spot'
            }
        })
        
        # –†–æ–∑—à–∏—Ä–µ–Ω–∏–π —á–æ—Ä–Ω–∏–π —Å–ø–∏—Å–æ–∫
        self.garbage_symbols = self._load_garbage_symbols()
        self.coin_blacklist = set()
        
        # –î–∏–Ω–∞–º—ñ—á–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è –≤–∏—è–≤–ª–µ–Ω–Ω—è
        self.detection_params = {
            'volume_spike_threshold': 4.5,
            'price_acceleration_min': 0.008,
            'rsi_oversold': 32,
            'rsi_overbought': 78,
            'orderbook_imbalance_min': 0.28,
            'large_order_threshold': 75000,
            'min_volume_usdt': 100000,
            'max_volume_usdt': 5000000,
            'price_change_5m_min': 3.5,
            'wick_ratio_threshold': 0.35,
            'market_cap_filter': 50000000,
            'liquidity_score_min': 0.6,
            'pump_probability_threshold': 0.72,
            'dump_probability_threshold': 0.68,
            'whale_volume_threshold': 100000,
            'volatility_spike_threshold': 2.5
        }
        
        # –¢—Ä–∏–≤–æ–∂–Ω—ñ —Å–∏–≥–Ω–∞–ª–∏ —Ç–∞ —ñ—Å—Ç–æ—Ä—ñ—è
        self.live_signals = deque(maxlen=100)
        self.market_anomalies = defaultdict(list)
        self.performance_metrics = {
            'total_scans': 0,
            'signals_triggered': 0,
            'success_rate': 0.0,
            'avg_response_time': 0.0,
            'false_positives': 0,
            'pump_signals_detected': 0,
            'dump_signals_detected': 0
        }
        
        # –ü—É–ª –ø–æ—Ç–æ–∫—ñ–≤ –¥–ª—è –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ–≥–æ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è
        self.executor = ThreadPoolExecutor(max_workers=16)
        self.setup_handlers()
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö
        self.market_data_cache = {}
        self.last_update_time = time.time()

    def _load_garbage_symbols(self):
        """–†–æ–∑—à–∏—Ä–µ–Ω–∏–π —Å–ø–∏—Å–æ–∫ –Ω–µ–ø–æ—Ç—Ä—ñ–±–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤"""
        base = {
            'USD', 'EUR', 'GBP', 'JPY', 'CNY', 'RUB', 'TRY', 'BRL', 'KRW', 'AUD',
            'USDC', 'USDT', 'BUSD', 'DAI', 'TUSD', 'PAX', 'UST', 'HUSD', 'GUSD',
            'PAXG', 'WBTC', 'BTCB', 'ETHB', 'BNB', 'HT', 'OKB', 'LEO', 'LINK',
            'XRP', 'ADA', 'DOT', 'DOGE', 'SHIB', 'MATIC', 'SOL', 'AVAX', 'FTM',
            'SXP', 'CHZ', 'VET', 'THETA', 'FTT', 'BTT', 'WIN', 'TRX', 'BCH',
            'LTC', 'EOS', 'XLM', 'XMR', 'XTZ', 'ZEC', 'DASH', 'ETC', 'NEO'
        }
        
        # –î–æ–¥–∞—î–º–æ —à–∞–±–ª–æ–Ω–∏ –º—É—Å–æ—Ä–Ω–∏—Ö –º–æ–Ω–µ—Ç
        patterns = {
            'UP', 'DOWN', 'BULL', 'BEAR', 'LONG', 'SHORT', 'HALF', 'FULL',
            'HEDGE', 'DOOM', 'MOON', 'SUN', 'EARTH', 'MARS', 'PLUTO',
            '3L', '3S', '2L', '2S', '1L', '1S', '5L', '5S'
        }
        
        return base.union(patterns)

    def setup_handlers(self):
        """–û–Ω–æ–≤–ª–µ–Ω—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥"""
        handlers = [
            CommandHandler("start", self.start_command),
            CommandHandler("scan", self.deep_scan_command),
            CommandHandler("pump_radar", self.pump_radar_command),
            CommandHandler("dump_radar", self.dump_radar_command),
            CommandHandler("liquidity_scan", self.liquidity_scan_command),
            CommandHandler("whale_watch", self.whale_watch_command),
            CommandHandler("volatility_alert", self.volatility_alert_command),
            CommandHandler("market_pulse", self.market_pulse_command),
            CommandHandler("settings", self.settings_command),
            CommandHandler("blacklist", self.blacklist_command),
            CommandHandler("performance", self.performance_command),
            CommandHandler("quick_scan", self.quick_scan_command),
            CommandHandler("emergency", self.emergency_scan),
            CallbackQueryHandler(self.advanced_button_handler)
        ]
        
        for handler in handlers:
            self.app.add_handler(handler)

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–Ω–æ–≤–ª–µ–Ω–µ –º–µ–Ω—é –∑ –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ pump/dump"""
        keyboard = [
            [InlineKeyboardButton("üö® PUMP RADAR", callback_data="pump_radar"),
             InlineKeyboardButton("üìâ DUMP RADAR", callback_data="dump_radar")],
            [InlineKeyboardButton("üêã WHALE WATCH", callback_data="whale_watch"),
             InlineKeyboardButton("üíß LIQUIDITY SCAN", callback_data="liquidity_scan")],
            [InlineKeyboardButton("‚ö° VOLATILITY ALERTS", callback_data="volatility_alerts"),
             InlineKeyboardButton("üìä MARKET PULSE", callback_data="market_pulse")],
            [InlineKeyboardButton("üîç DEEP SCAN", callback_data="deep_scan"),
             InlineKeyboardButton("‚ö° QUICK SCAN", callback_data="quick_scan")],
            [InlineKeyboardButton("‚öôÔ∏è SETTINGS", callback_data="settings"),
             InlineKeyboardButton("üìà PERFORMANCE", callback_data="performance")],
            [InlineKeyboardButton("üö´ BLACKLIST", callback_data="blacklist"),
             InlineKeyboardButton("üîÑ UPDATE", callback_data="update")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "ü§ñ **ULTIMATE PUMP/DUMP DETECTOR v4.0**\n\n"
            "üéØ *–°–ø–µ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è: —Ä–µ–∞–ª—å–Ω–µ –≤–∏—è–≤–ª–µ–Ω–Ω—è –º–∞–Ω—ñ–ø—É–ª—è—Ü—ñ–π —Ä–∏–Ω–∫–æ–º*\n\n"
            "‚ú® **–ï–∫—Å–∫–ª—é–∑–∏–≤–Ω—ñ —Ñ—ñ—á—ñ:**\n"
            "‚Ä¢ üö® –î–µ—Ç–µ–∫—Ç–æ—Ä –ø–∞–º–ø—ñ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ\n"
            "‚Ä¢ üìâ –í–∏—è–≤–ª–µ–Ω–Ω—è –¥–∞–º–ø—ñ–≤ –¥–æ —ó—Ö –ø–æ—á–∞—Ç–∫—É\n"
            "‚Ä¢ üêã –í—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –∫–∏—Ç—ñ–≤ —Ç–∞ –≤–µ–ª–∏–∫–∏—Ö –æ—Ä–¥–µ—Ä—ñ–≤\n"
            "‚Ä¢ üíß –ê–Ω–∞–ª—ñ–∑ –ª—ñ–∫–≤—ñ–¥–Ω–æ—Å—Ç—ñ —Ç–∞ –∫–ª–∞—Å—Ç–µ—Ä—ñ–≤\n"
            "‚Ä¢ ‚ö° –°–∏–≥–Ω–∞–ª–∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—ñ\n"
            "‚Ä¢ üìä –ì–ª–∏–±–∏–Ω–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ —Ä–∏–Ω–∫—É\n\n"
            "üíé *–û—Ç—Ä–∏–º—É–π —Å–∏–≥–Ω–∞–ª–∏ –î–û —Ä—É—Ö—É —Ä–∏–Ω–∫—É!*",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

    async def check_network_connection(self) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–µ—Ä–µ–∂–µ–≤–æ–≥–æ –∑'—î–¥–Ω–∞–Ω–Ω—è"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get('https://api.binance.com/api/v3/ping', timeout=10) as response:
                    return response.status == 200
        except:
            return False

    async def get_market_data(self, symbol: str) -> Optional[Dict]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–∏–Ω–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö –∑ –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫"""
        max_retries = 3
        for attempt in range(max_retries):
            try:
                ticker = await asyncio.get_event_loop().run_in_executor(
                    self.executor, lambda: self.exchange.fetch_ticker(symbol)
                )
                return {
                    'symbol': symbol,
                    'open': ticker.get('open', 0),
                    'high': ticker.get('high', 0),
                    'low': ticker.get('low', 0),
                    'close': ticker.get('last', 0),
                    'volume': ticker.get('quoteVolume', 0),
                    'percentage': ticker.get('percentage', 0)
                }
            except ccxt.NetworkError as e:
                logger.warning(f"–ú–µ—Ä–µ–∂–µ–≤–∞ –ø–æ–º–∏–ª–∫–∞ ({attempt+1}/{max_retries}) –¥–ª—è {symbol}: {e}")
                await asyncio.sleep(1)
            except ccxt.ExchangeError as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –±—ñ—Ä–∂—ñ –¥–ª—è {symbol}: {e}")
                return None
            except Exception as e:
                logger.error(f"–ù–µ—Å–ø–æ–¥—ñ–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –¥–ª—è {symbol}: {e}")
                return None
        
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –¥–ª—è {symbol} –ø—ñ—Å–ª—è {max_retries} —Å–ø—Ä–æ–±")
        return await self.get_market_data_fallback(symbol)

    async def get_market_data_fallback(self, symbol: str) -> Optional[Dict]:
        """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π —Å–ø–æ—Å—ñ–± –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö"""
        try:
            # –°–ø—Ä–æ—â–µ–Ω–∏–π —Å–∏–º–≤–æ–ª –¥–ª—è CoinGecko (–≤–∏–¥–∞–ª—è—î–º–æ /USDT)
            clean_symbol = symbol.replace('/USDT', '').lower()
            
            # –°–ø—Ä–æ–±–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –∑ CoinGecko
            url = f"https://api.coingecko.com/api/v3/coins/markets"
            params = {
                'vs_currency': 'usd',
                'ids': clean_symbol,
                'order': 'market_cap_desc',
                'per_page': 1,
                'page': 1,
                'sparkline': 'false'
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.get(url, params=params, timeout=10) as response:
                    if response.status == 200:
                        data = await response.json()
                        if data:
                            coin_data = data[0]
                            return {
                                'symbol': symbol,
                                'open': coin_data.get('open', 0),
                                'high': coin_data.get('high', 0),
                                'low': coin_data.get('low', 0),
                                'close': coin_data.get('current_price', 0),
                                'volume': coin_data.get('total_volume', 0),
                                'percentage': coin_data.get('price_change_percentage_24h', 0)
                            }
            
            return None
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–ª—è {symbol}: {e}")
            return None

    async def get_active_symbols(self, limit: int = 100) -> List[str]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ç–æ—Ä–≥–æ–≤–∏—Ö –ø–∞—Ä –∑ –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫"""
        try:
            # –°–ø—Ä–æ–±–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–∏–º–≤–æ–ª–∏ –∑ Binance
            markets = await asyncio.get_event_loop().run_in_executor(
                self.executor, self.exchange.load_markets
            )
            
            usdt_pairs = [
                symbol for symbol, market in markets.items()
                if symbol.endswith('/USDT') and market.get('active', False)
                and market.get('quoteVolume', 0) > self.detection_params['min_volume_usdt']
            ]
            
            usdt_pairs.sort(key=lambda x: markets[x].get('quoteVolume', 0), reverse=True)
            
            return usdt_pairs[:limit]
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤: {e}")
            
            # Fallback: –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ–ø—É–ª—è—Ä–Ω—ñ —Å–∏–º–≤–æ–ª–∏
            return [
                'BTC/USDT', 'ETH/USDT', 'BNB/USDT', 'SOL/USDT', 'XRP/USDT',
                'ADA/USDT', 'DOGE/USDT', 'DOT/USDT', 'MATIC/USDT', 'LTC/USDT'
            ]

    async def get_high_volume_symbols(self, limit: int = 50) -> List[str]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –º–æ–Ω–µ—Ç –∑ –≤–∏—Å–æ–∫–∏–º –æ–±'—î–º–æ–º"""
        try:
            symbols = await self.get_active_symbols(limit * 2)
            return symbols[:limit]
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è high volume symbols: {e}")
            return ['BTC/USDT', 'ETH/USDT', 'BNB/USDT', 'SOL/USDT', 'XRP/USDT']

    async def get_top_gainers(self, limit: int = 30) -> List[str]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–ø gainers"""
        try:
            # –°–ø—Ä–æ—â–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è - –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ–ø—É–ª—è—Ä–Ω—ñ —Å–∏–º–≤–æ–ª–∏
            return [
                'BTC/USDT', 'ETH/USDT', 'BNB/USDT', 'SOL/USDT', 'XRP/USDT',
                'ADA/USDT', 'DOGE/USDT', 'DOT/USDT', 'MATIC/USDT', 'LTC/USDT'
            ][:limit]
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è top gainers: {e}")
            return ['BTC/USDT', 'ETH/USDT', 'BNB/USDT']

    async def deep_scan_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ì–ª–∏–±–∏–Ω–Ω–µ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è –¥–ª—è –≤–∏—è–≤–ª–µ–Ω–Ω—è –∞–Ω–æ–º–∞–ª—ñ–π"""
        try:
            logger.info(f"–ó–∞–ø–∏—Ç –∫–æ–º–∞–Ω–¥–∏: {update.message.text}")
            network_available = await self.check_network_connection()
            logger.info(f"–ú–µ—Ä–µ–∂–∞ –¥–æ—Å—Ç—É–ø–Ω–∞: {network_available}")
            
            if not network_available:
                await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∏ –∑ –º–µ—Ä–µ–∂–µ–≤–∏–º –∑'—î–¥–Ω–∞–Ω–Ω—è–º. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
                return
                
            msg = await update.message.reply_text("üîç –ó–∞–ø—É—Å–∫–∞—é –≥–ª–∏–±–∏–Ω–Ω–µ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è —Ä–∏–Ω–∫—É...")
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ –º–æ–Ω–µ—Ç–∏
            active_symbols = await self.get_active_symbols(limit=20)  # –ó–º–µ–Ω—à–∏–º–æ –ª—ñ–º—ñ—Ç –¥–ª—è —Ç–µ—Å—Ç—É
            results = []
            
            for symbol in active_symbols:
                try:
                    analysis = await self.analyze_symbol(symbol)
                    if analysis and (analysis['pump_probability'] > 0.65 or analysis['dump_probability'] > 0.6):
                        results.append(analysis)
                    await asyncio.sleep(0.2)  # –ó–±—ñ–ª—å—à–∏–º–æ –∑–∞—Ç—Ä–∏–º–∫—É
                except Exception as e:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É {symbol}: {e}")
                    continue
            
            self.performance_metrics['total_scans'] += len(active_symbols)
            
            if results:
                # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ –π–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—é
                results.sort(key=lambda x: max(x['pump_probability'], x['dump_probability']), reverse=True)
                self.performance_metrics['signals_triggered'] += len(results)
                
                response = "üö® **–ó–ù–ê–ô–î–ï–ù–û –ü–û–¢–ï–ù–¶–Ü–ô–ù–Ü –°–ò–ì–ù–ê–õ–ò:**\n\n"
                for i, res in enumerate(results[:5], 1):
                    response += self.format_signal_message(res, i)
                
                response += f"\nüìä –ó–Ω–∞–π–¥–µ–Ω–æ {len(results)} —Å–∏–≥–Ω–∞–ª—ñ–≤ –∑ {len(active_symbols)} –º–æ–Ω–µ—Ç"
                await msg.edit_text(response, parse_mode='Markdown')
            else:
                await msg.edit_text("‚ÑπÔ∏è –°–∏–ª—å–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –†–∏—Å–∫ –≤—ñ–¥–Ω–æ—Å–Ω–æ —Å–ø–æ–∫—ñ–π–Ω–∏–π.")
                
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≥–ª–∏–±–∏–Ω–Ω–æ–≥–æ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è: {e}")
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è")

    async def analyze_symbol(self, symbol: str) -> Dict:
        """–ö–æ–º–ø–ª–µ–∫—Å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ —Å–∏–º–≤–æ–ª—É –∑ –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫"""
        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–µ—Ä–µ–∂—ñ
            if not await self.check_network_connection():
                logger.warning("‚ö†Ô∏è –í—Ç—Ä–∞—á–µ–Ω–æ –º–µ—Ä–µ–∂–µ–≤–µ –∑'—î–¥–Ω–∞–Ω–Ω—è")
                return {}
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑ –æ—Å–Ω–æ–≤–Ω–∏—Ö –¥–∂–µ—Ä–µ–ª
            market_data = await self.get_market_data(symbol)
            if not market_data:
                return {}
            
            # –°–ø—Ä–æ—â—É—î–º–æ –∞–Ω–∞–ª—ñ–∑ –¥–ª—è —Ç–µ—Å—Ç—É
            orderbook = {'bids': [], 'asks': [], 'imbalance': 0, 'large_bids': 0, 'large_asks': 0}
            klines = []
            
            # –ë–∞–∑–æ–≤–∏–π —Ç–µ—Ö–Ω—ñ—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑
            tech_analysis = {
                'rsi': 50,
                'macd_hist': 0,
                'volatility': 0,
                'price_acceleration': 0,
                'trend_strength': 0.5
            }
            
            # –ë–∞–∑–æ–≤–∏–π –∞–Ω–∞–ª—ñ–∑ –æ–±'—î–º—ñ–≤
            volume_analysis = {
                'volume_spike_ratio': 1.0,
                'volume_price_correlation': 0,
                'current_volume': market_data['volume'],
                'average_volume': market_data['volume']
            }
            
            # –°–ø—Ä–æ—â–µ–Ω–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –π–º–æ–≤—ñ—Ä–Ω–æ—Å—Ç–µ–π
            pump_prob = 0.3 + (market_data['percentage'] / 100)  # –ü—Ä–æ—Å—Ç–∞ —Ñ–æ—Ä–º—É–ª–∞
            dump_prob = 0.3 - (market_data['percentage'] / 100)
            
            # –û–±–º–µ–∂—É—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è
            pump_prob = max(0.1, min(0.9, pump_prob))
            dump_prob = max(0.1, min(0.9, dump_prob))
            
            return {
                'symbol': symbol,
                'price': market_data['close'],
                'volume_usdt': market_data['volume'],
                'pump_probability': pump_prob,
                'dump_probability': dump_prob,
                'technical_indicators': tech_analysis,
                'orderbook_metrics': orderbook,
                'volume_metrics': volume_analysis,
                'timestamp': datetime.now().isoformat()
            }
            
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É {symbol}: {e}")
            return {}

    def format_signal_message(self, analysis: Dict, index: int) -> str:
        """–§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Å–∏–≥–Ω–∞–ª"""
        symbol = analysis['symbol'].replace('/USDT', '')
        
        return (
            f"{index}. **{symbol}**\n"
            f"   üí∞ –¶—ñ–Ω–∞: ${analysis['price']:.6f}\n"
            f"   üìä –û–±'—î–º: ${analysis['volume_usdt']:,.0f}\n"
            f"   üö® Pump –π–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å: {analysis['pump_probability']:.2%}\n"
            f"   üìâ Dump –π–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å: {analysis['dump_probability']:.2%}\n"
            f"   üìà –ó–º—ñ–Ω–∞: {analysis.get('percentage', 0):.2f}%\n\n"
        )

    async def pump_radar_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–ø–µ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –¥–µ—Ç–µ–∫—Ç–æ—Ä –ø–∞–º–ø—ñ–≤"""
        try:
            msg = await update.message.reply_text("üö® –ê–ö–¢–ò–í–£–Æ PUMP RADAR...")
            
            symbols = await self.get_high_volume_symbols(limit=10)
            pump_candidates = []
            
            for symbol in symbols:
                try:
                    market_data = await self.get_market_data(symbol)
                    if market_data and market_data['percentage'] > 5:  # –ü—Ä–æ—Å—Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞
                        pump_candidates.append({
                            'symbol': symbol.replace('/USDT', ''),
                            'pump_confidence': min(90, market_data['percentage'] * 2),
                            'price_change_5m': market_data['percentage'],
                            'volume_usdt': market_data['volume'],
                            'whale_orders': 0,
                            'price_acceleration': 0.01
                        })
                    await asyncio.sleep(0.2)
                except Exception as e:
                    continue
            
            if pump_candidates:
                pump_candidates.sort(key=lambda x: x['pump_confidence'], reverse=True)
                self.performance_metrics['pump_signals_detected'] += len(pump_candidates)
                
                response = "üî• **–í–ò–°–û–ö–ò–ô –†–ò–ó–ò–ö PUMP:**\n\n"
                for i, candidate in enumerate(pump_candidates[:3], 1):
                    response += (
                        f"{i}. **{candidate['symbol']}** - {candidate['pump_confidence']}% –≤–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å\n"
                        f"   üìà –ó–º—ñ–Ω–∞: {candidate['price_change_5m']:.2f}%\n"
                        f"   üí∞ –û–±'—î–º: ${candidate['volume_usdt']:,.0f}\n\n"
                    )
                
                await msg.edit_text(response, parse_mode='Markdown')
            else:
                await msg.edit_text("‚úÖ –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö pump-—Å–∏–≥–Ω–∞–ª—ñ–≤. –†–∏—Å–∫ —Å—Ç–∞–±—ñ–ª—å–Ω–∏–π.")
                
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ pump radar: {e}")
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ pump radar")

    async def dump_radar_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–î–µ—Ç–µ–∫—Ç–æ—Ä –º–∞–π–±—É—Ç–Ω—ñ—Ö –¥–∞–º–ø—ñ–≤"""
        try:
            msg = await update.message.reply_text("üìâ –ê–ö–¢–ò–í–£–Æ DUMP RADAR...")
            
            symbols = await self.get_active_symbols(limit=10)
            dump_candidates = []
            
            for symbol in symbols:
                try:
                    market_data = await self.get_market_data(symbol)
                    if market_data and market_data['percentage'] < -5:  # –ü—Ä–æ—Å—Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞
                        dump_candidates.append({
                            'symbol': symbol.replace('/USDT', ''),
                            'dump_confidence': min(90, abs(market_data['percentage']) * 2),
                            'max_gain': abs(market_data['percentage']),
                            'sell_volume': market_data['volume'],
                            'whale_sells': 0,
                            'rsi': 30
                        })
                    await asyncio.sleep(0.2)
                except Exception as e:
                    continue
            
            if dump_candidates:
                dump_candidates.sort(key=lambda x: x['dump_confidence'], reverse=True)
                self.performance_metrics['dump_signals_detected'] += len(dump_candidates)
                
                response = "‚ö†Ô∏è **–ü–û–ü–ï–†–ï–î–ñ–ï–ù–ù–Ø –ü–†–û DUMP:**\n\n"
                for i, candidate in enumerate(dump_candidates[:3], 1):
                    response += (
                        f"{i}. **{candidate['symbol']}** - {candidate['dump_confidence']}% –≤–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å\n"
                        f"   üìâ –ó–º—ñ–Ω–∞: -{candidate['max_gain']:.2f}%\n"
                        f"   üìä –û–±'—î–º: ${candidate['sell_volume']:,.0f}\n\n"
                    )
                
                await msg.edit_text(response, parse_mode='Markdown')
            else:
                await msg.edit_text("‚úÖ –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö dump-—Å–∏–≥–Ω–∞–ª—ñ–≤. –†–∏—Å–∫ —Å—Ç–∞–±—ñ–ª—å–Ω–∏–π.")
                
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ dump radar: {e}")
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ dump radar")

    async def whale_watch_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∫–∏—Ç—ñ–≤ —Ç–∞ –≤–µ–ª–∏–∫–∏—Ö –æ—Ä–¥–µ—Ä—ñ–≤"""
        try:
            msg = await update.message.reply_text("üêã –í–Ü–î–°–¢–ï–ñ–£–Æ –ö–ò–¢–Ü–í...")
            
            # –°–ø—Ä–æ—â–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è –¥–ª—è —Ç–µ—Å—Ç—É
            whale_activity = [
                {
                    'symbol': 'BTC',
                    'order_size': 150000,
                    'is_buy': True,
                    'market_impact': 2.5,
                    'timestamp': datetime.now().strftime('%H:%M:%S')
                },
                {
                    'symbol': 'ETH', 
                    'order_size': 80000,
                    'is_buy': False,
                    'market_impact': 1.8,
                    'timestamp': datetime.now().strftime('%H:%M:%S')
                }
            ]
            
            if whale_activity:
                response = "üêã **–ê–ö–¢–ò–í–ù–Ü–°–¢–¨ –ö–ò–¢–Ü–í:**\n\n"
                for i, activity in enumerate(whale_activity[:5], 1):
                    response += (
                        f"{i}. **{activity['symbol']}**\n"
                        f"   üí∞ –†–æ–∑–º—ñ—Ä –æ—Ä–¥–µ—Ä–∞: ${activity['order_size']:,.0f}\n"
                        f"   üìä –¢–∏–ø: {'–ö–£–ü–Ü–í–õ–Ø' if activity['is_buy'] else '–ü–†–û–î–ê–ñ'}\n"
                        f"   ‚öñÔ∏è –í–ø–ª–∏–≤ –Ω–∞ —Ä–∏–Ω–æ–∫: {activity['market_impact']:.2f}%\n"
                        f"   üïí –ß–∞—Å: {activity['timestamp']}\n\n"
                    )
                
                await msg.edit_text(response, parse_mode='Markdown')
            else:
                await msg.edit_text("‚úÖ –ó–Ω–∞—á–Ω–æ—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –∫–∏—Ç—ñ–≤ –Ω–µ –≤–∏—è–≤–ª–µ–Ω–æ.")
                
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ whale watch: {e}")
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –∫–∏—Ç—ñ–≤")

    async def liquidity_scan_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–∫–∞–Ω—É–≤–∞–Ω–Ω—è –ª—ñ–∫–≤—ñ–¥–Ω–æ—Å—Ç—ñ"""
        try:
            msg = await update.message.reply_text("üíß –ê–ù–ê–õ–Ü–ó–£–Æ –õ–Ü–ö–í–Ü–î–ù–Ü–°–¢–¨...")
            
            symbols = await self.get_active_symbols(limit=10)
            liquidity_data = []
            
            for symbol in symbols:
                try:
                    market_data = await self.get_market_data(symbol)
                    if market_data:
                        liquidity_data.append({
                            'symbol': symbol.replace('/USDT', ''),
                            'liquidity_score': 0.7 + (market_data['volume'] / 10000000) * 0.3,
                            'bid_volume': market_data['volume'] * 0.6,
                            'ask_volume': market_data['volume'] * 0.4
                        })
                    await asyncio.sleep(0.1)
                except Exception as e:
                    continue
            
            if liquidity_data:
                liquidity_data.sort(key=lambda x: x['liquidity_score'], reverse=True)
                
                response = "üíß **–¢–û–ü –ó–ê –õ–Ü–ö–í–Ü–î–ù–Ü–°–¢–Æ:**\n\n"
                for i, data in enumerate(liquidity_data[:5], 1):
                    response += (
                        f"{i}. **{data['symbol']}** - Score: {data['liquidity_score']:.3f}\n"
                        f"   üü¢ Bids: ${data['bid_volume']:,.0f}\n"
                        f"   üî¥ Asks: ${data['ask_volume']:,.0f}\n\n"
                    )
                
                await msg.edit_text(response, parse_mode='Markdown')
            else:
                await msg.edit_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –ª—ñ–∫–≤—ñ–¥–Ω–æ—Å—Ç—ñ")
                
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ liquidity scan: {e}")
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É –ª—ñ–∫–≤—ñ–¥–Ω–æ—Å—Ç—ñ")

    async def volatility_alert_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–∏–≥–Ω–∞–ª–∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—ñ"""
        try:
            msg = await update.message.reply_text("‚ö° –®–£–ö–ê–Æ –í–û–õ–ê–¢–ò–õ–¨–ù–Ü–°–¢–¨...")
            
            symbols = await self.get_active_symbols(limit=10)
            volatile_symbols = []
            
            for symbol in symbols:
                try:
                    market_data = await self.get_market_data(symbol)
                    if market_data and abs(market_data['percentage']) > 8:
                        volatile_symbols.append({
                            'symbol': symbol.replace('/USDT', ''),
                            'volatility': abs(market_data['percentage']) * 2,
                            'price': market_data['close']
                        })
                    await asyncio.sleep(0.1)
                except Exception as e:
                    continue
            
            if volatile_symbols:
                volatile_symbols.sort(key=lambda x: x['volatility'], reverse=True)
                
                response = "‚ö° **–í–ò–°–û–ö–ê –í–û–õ–ê–¢–ò–õ–¨–ù–Ü–°–¢–¨:**\n\n"
                for i, data in enumerate(volatile_symbols[:5], 1):
                    response += (
                        f"{i}. **{data['symbol']}** - –í–æ–ª–∞—Ç–∏–ª—å–Ω—ñ—Å—Ç—å: {data['volatility']:.2f}%\n"
                        f"   üí∞ –¶—ñ–Ω–∞: ${data['price']:.6f}\n\n"
                    )
                
                await msg.edit_text(response, parse_mode='Markdown')
            else:
                await msg.edit_text("‚úÖ –í–æ–ª–∞—Ç–∏–ª—å–Ω—ñ—Å—Ç—å –≤ –º–µ–∂–∞—Ö –Ω–æ—Ä–º–∏")
                
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ volatility alert: {e}")
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—ñ")

    async def market_pulse_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–≥–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω —Ä–∏–Ω–∫—É"""
        try:
            msg = await update.message.reply_text("üìä –ê–ù–ê–õ–Ü–ó–£–Æ –°–¢–ê–ù –†–ò–ù–ö–£...")
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –ø–æ –æ—Å–Ω–æ–≤–Ω–∏–º –º–æ–Ω–µ—Ç–∞–º
            major_symbols = ['BTC/USDT', 'ETH/USDT', 'BNB/USDT', 'SOL/USDT', 'XRP/USDT']
            market_status = []
            
            for symbol in major_symbols:
                try:
                    market_data = await self.get_market_data(symbol)
                    if market_data:
                        market_status.append({
                            'symbol': symbol.replace('/USDT', ''),
                            'price': market_data['close'],
                            'change': market_data['percentage'],
                            'volume': market_data['volume']
                        })
                    await asyncio.sleep(0.1)
                except Exception as e:
                    continue
            
            if market_status:
                response = "üìä **–°–¢–ê–ù –†–ò–ù–ö–£:**\n\n"
                for data in market_status:
                    change_emoji = "üü¢" if data['change'] > 0 else "üî¥"
                    response += (
                        f"{change_emoji} **{data['symbol']}**: ${data['price']:,.2f} "
                        f"({data['change']:+.2f}%)\n"
                    )
                
                # –î–æ–¥–∞—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É –æ—Ü—ñ–Ω–∫—É
                avg_change = sum(d['change'] for d in market_status) / len(market_status)
                market_sentiment = "–ë–Ü–®–ò–ô" if avg_change > 2 else "–ü–û–ó–ò–¢–ò–í–ù–ò–ô" if avg_change > 0 else "–ù–ï–ì–ê–¢–ò–í–ù–ò–ô" if avg_change < 0 else "–ù–ï–ô–¢–†–ê–õ–¨–ù–ò–ô"
                
                response += f"\nüìà **–ó–∞–≥–∞–ª—å–Ω–∏–π –Ω–∞—Å—Ç—Ä—ñ–π**: {market_sentiment}\n"
                response += f"üìä **–°–µ—Ä–µ–¥–Ω—è –∑–º—ñ–Ω–∞**: {avg_change:+.2f}%"
                
                await msg.edit_text(response, parse_mode='Markdown')
            else:
                await msg.edit_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ —Ä–∏–Ω–∫—É")
                
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ market pulse: {e}")
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É —Ä–∏–Ω–∫—É")

    async def quick_scan_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–®–≤–∏–¥–∫–µ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è –¥–ª—è –º–∏—Ç—Ç—î–≤–∏—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤"""
        try:
            msg = await update.message.reply_text("‚ö° –®–í–ò–î–ö–ï –°–ö–ê–ù–£–í–ê–ù–ù–Ø...")
            
            # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ —Ç–æ–ø –º–æ–Ω–µ—Ç–∏
            symbols = await self.get_active_symbols(limit=10)
            quick_signals = []
            
            for symbol in symbols:
                try:
                    # –®–≤–∏–¥–∫–∏–π –∞–Ω–∞–ª—ñ–∑
                    market_data = await self.get_market_data(symbol)
                    if market_data and abs(market_data['percentage']) > 3:
                        quick_signals.append({
                            'symbol': symbol.replace('/USDT', ''),
                            'price': market_data['close'],
                            'volume': market_data['volume'],
                            'change': market_data['percentage'],
                            'imbalance': 0.2 if market_data['percentage'] > 0 else -0.2
                        })
                    
                    await asyncio.sleep(0.1)
                except Exception as e:
                    continue
            
            if quick_signals:
                response = "‚ö° **–®–í–ò–î–ö–Ü –°–ò–ì–ù–ê–õ–ò:**\n\n"
                for i, signal in enumerate(quick_signals[:5], 1):
                    response += (
                        f"{i}. **{signal['symbol']}**\n"
                        f"   üí∞ –¶—ñ–Ω–∞: ${signal['price']:.6f}\n"
                        f"   üìà –ó–º—ñ–Ω–∞: {signal['change']:.2f}%\n"
                        f"   üìä –û–±'—î–º: ${signal['volume']:,.0f}\n"
                        f"   ‚öñÔ∏è Imbalance: {signal['imbalance']:.3f}\n\n"
                    )
                
                await msg.edit_text(response, parse_mode='Markdown')
            else:
                await msg.edit_text("‚úÖ –®–≤–∏–¥–∫–∏—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ quick scan: {e}")
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ —à–≤–∏–¥–∫–æ–≥–æ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è")

    async def settings_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"""
        try:
            settings_text = "‚öôÔ∏è **–ü–û–¢–û–ß–ù–Ü –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø:**\n\n"
            for key, value in self.detection_params.items():
                settings_text += f"‚Ä¢ {key}: {value}\n"
            
            await update.message.reply_text(settings_text, parse_mode='Markdown')
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ settings command: {e}")

    async def blacklist_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–µ—Ä—É–≤–∞–Ω–Ω—è —á–æ—Ä–Ω–∏–º —Å–ø–∏—Å–∫–æ–º"""
        try:
            if context.args:
                # –î–æ–¥–∞–≤–∞–Ω–Ω—è/–≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑ —á–æ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É
                symbol = context.args[0].upper()
                if symbol in self.coin_blacklist:
                    self.coin_blacklist.remove(symbol)
                    await update.message.reply_text(f"‚úÖ {symbol} –≤–∏–¥–∞–ª–µ–Ω–æ –∑ —á–æ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É")
                else:
                    self.coin_blacklist.add(symbol)
                    await update.message.reply_text(f"‚úÖ {symbol} –¥–æ–¥–∞–Ω–æ –¥–æ —á–æ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É")
            else:
                # –ü–æ–∫–∞–∑–∞—Ç–∏ —á–æ—Ä–Ω–∏–π —Å–ø–∏—Å–æ–∫
                if self.coin_blacklist:
                    blacklist_text = "üö´ **–ß–û–†–ù–ò–ô –°–ü–ò–°–û–ö:**\n" + "\n".join(self.coin_blacklist)
                else:
                    blacklist_text = "üìù –ß–æ—Ä–Ω–∏–π —Å–ø–∏—Å–æ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π"
                
                await update.message.reply_text(blacklist_text, parse_mode='Markdown')
                
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ blacklist command: {e}")

    async def performance_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ"""
        try:
            total = self.performance_metrics['total_scans']
            signals = self.performance_metrics['signals_triggered']
            success_rate = (signals / total * 100) if total > 0 else 0
            
            stats_text = (
                "üìà **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–†–û–î–£–ö–¢–ò–í–ù–û–°–¢–Ü:**\n\n"
                f"‚Ä¢ –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–∫–∞–Ω—É–≤–∞–Ω—å: {total}\n"
                f"‚Ä¢ –ó–Ω–∞–π–¥–µ–Ω–æ —Å–∏–≥–Ω–∞–ª—ñ–≤: {signals}\n"
                f"‚Ä¢ Pump —Å–∏–≥–Ω–∞–ª—ñ–≤: {self.performance_metrics['pump_signals_detected']}\n"
                f"‚Ä¢ Dump —Å–∏–≥–Ω–∞–ª—ñ–≤: {self.performance_metrics['dump_signals_detected']}\n"
                f"‚Ä¢ –£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å: {success_rate:.2f}%\n"
                f"‚Ä¢ –ü–æ–º–∏–ª–∫–∏: {self.performance_metrics['false_positives']}\n"
            )
            
            await update.message.reply_text(stats_text, parse_mode='Markdown')
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ performance command: {e}")

    async def advanced_button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–Ω–∏–∫ —Ä–æ–∑—à–∏—Ä–µ–Ω–∏—Ö –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        try:
            if query.data == "pump_radar":
                await self.pump_radar_command(query, context)
            elif query.data == "dump_radar":
                await self.dump_radar_command(query, context)
            elif query.data == "whale_watch":
                await self.whale_watch_command(query, context)
            elif query.data == "liquidity_scan":
                await self.liquidity_scan_command(query, context)
            elif query.data == "volatility_alerts":
                await self.volatility_alert_command(query, context)
            elif query.data == "market_pulse":
                await self.market_pulse_command(query, context)
            elif query.data == "deep_scan":
                await self.deep_scan_command(query, context)
            elif query.data == "quick_scan":
                await self.quick_scan_command(query, context)
            elif query.data == "settings":
                await self.settings_command(query, context)
            elif query.data == "performance":
                await self.performance_command(query, context)
            elif query.data == "blacklist":
                await self.blacklist_command(query, context)
            elif query.data == "update":
                await query.edit_message_text("üîÑ –û–Ω–æ–≤–ª—é—é –¥–∞–Ω—ñ...")
                await asyncio.sleep(1)
                await self.start_command(query, context)
                
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∫–Ω–æ–ø–∫–∏ {query.data}: {e}")
            await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Ç—É")

    async def emergency_scan(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ï–∫—Å—Ç—Ä–µ–Ω–µ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è –¥–ª—è –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö —Å–∏—Ç—É–∞—Ü—ñ–π"""
        try:
            msg = await update.message.reply_text("üö® –ï–ö–°–¢–†–ï–ù–ï –°–ö–ê–ù–£–í–ê–ù–ù–Ø!...")
            
            # –®–≤–∏–¥–∫–∏–π –∞–Ω–∞–ª—ñ–∑ —Ç–æ–ø –º–æ–Ω–µ—Ç
            symbols = await self.get_active_symbols(limit=8)
            critical_signals = []
            
            for symbol in symbols:
                try:
                    market_data = await self.get_market_data(symbol)
                    if market_data and abs(market_data['percentage']) > 10:
                        critical_signals.append({
                            'symbol': symbol.replace('/USDT', ''),
                            'price': market_data['close'],
                            'change': market_data['percentage'],
                            'volume': market_data['volume'],
                            'imbalance': 0.3 if market_data['percentage'] > 0 else -0.3,
                            'is_pump': market_data['percentage'] > 0
                        })
                    
                    await asyncio.sleep(0.1)
                except Exception as e:
                    continue
            
            if critical_signals:
                response = "üö® **–ö–†–ò–¢–ò–ß–ù–Ü –°–ò–ì–ù–ê–õ–ò:**\n\n"
                for i, signal in enumerate(critical_signals, 1):
                    signal_type = "PUMP" if signal['is_pump'] else "DUMP"
                    response += (
                        f"{i}. **{signal['symbol']}** - {signal_type}\n"
                        f"   üìà –ó–º—ñ–Ω–∞: {signal['change']:+.2f}%\n"
                        f"   üí∞ –¶—ñ–Ω–∞: ${signal['price']:.6f}\n"
                        f"   ‚öñÔ∏è Imbalance: {signal['imbalance']:.3f}\n\n"
                    )
                
                await msg.edit_text(response, parse_mode='Markdown')
            else:
                await msg.edit_text("‚úÖ –ö—Ä–∏—Ç–∏—á–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤ –Ω–µ –≤–∏—è–≤–ª–µ–Ω–æ")
                
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ emergency scan: {e}")
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –µ–∫—Å—Ç—Ä–µ–Ω–æ–≥–æ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è")

    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            logger.info("ü§ñ –ó–∞–ø—É—Å–∫–∞—é Ultimate Pump/Dump Detector...")
            await self.app.initialize()
            await self.app.start()
            await self.app.updater.start_polling()
            
            logger.info("‚úÖ –ë–æ—Ç —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ!")
            
            # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ñ–æ–Ω–æ–≤—ñ tasks
            asyncio.create_task(self.background_monitoring())
            
            # –ü—Ä–æ—Å—Ç–æ —á–µ–∫–∞—î–º–æ –±–µ–∑–∫—ñ–Ω–µ—á–Ω–æ
            while True:
                await asyncio.sleep(3600)
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞: {e}")
            raise

    async def background_monitoring(self):
        """–§–æ–Ω–æ–≤–∏–π –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —Ä–∏–Ω–∫—É"""
        while True:
            try:
                # –û–Ω–æ–≤–ª—é—î–º–æ –∫–µ—à –¥–∞–Ω–∏—Ö –∫–æ–∂–Ω—ñ 5 —Ö–≤–∏–ª–∏–Ω
                await self.update_market_data_cache()
                await asyncio.sleep(300)
                
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Ñ–æ–Ω–æ–≤–æ–≥–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É: {e}")
                await asyncio.sleep(60)

    async def update_market_data_cache(self):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–µ—à—É —Ä–∏–Ω–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö"""
        try:
            symbols = await self.get_active_symbols(limit=10)
            for symbol in symbols:
                try:
                    market_data = await self.get_market_data(symbol)
                    if market_data:
                        self.market_data_cache[symbol] = {
                            'data': market_data,
                            'timestamp': time.time()
                        }
                    await asyncio.sleep(0.1)
                except Exception as e:
                    continue
                    
            logger.info("‚úÖ –ö–µ—à —Ä–∏–Ω–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö –æ–Ω–æ–≤–ª–µ–Ω–æ")
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–µ—à—É: {e}")

    def save_state(self):
        """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –±–æ—Ç–∞"""
        try:
            state = {
                'coin_blacklist': list(self.coin_blacklist),
                'performance_metrics': self.performance_metrics,
                'detection_params': self.detection_params,
                'last_update': time.time()
            }
            
            with open('bot_state.json', 'w') as f:
                json.dump(state, f, indent=2)
            
            logger.info("üíæ –°—Ç–∞–Ω –±–æ—Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–æ")
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É: {e}")

    def load_state(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –±–æ—Ç–∞"""
        try:
            if os.path.exists('bot_state.json'):
                with open('bot_state.json', 'r') as f:
                    state = json.load(f)
                
                self.coin_blacklist = set(state.get('coin_blacklist', []))
                self.performance_metrics.update(state.get('performance_metrics', {}))
                self.detection_params.update(state.get('detection_params', {}))
                
                logger.info("üìÇ –°—Ç–∞–Ω –±–æ—Ç–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ")
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É: {e}")

# –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É
def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞"""
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–∫–µ–Ω –∑ –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è
        BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
        
        if not BOT_TOKEN:
            logger.error("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å TELEGRAM_BOT_TOKEN —É –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è")
            return
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞ –∑–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
        bot = UltimatePumpDumpDetector(BOT_TOKEN)
        
        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π —Å—Ç–∞–Ω
        bot.load_state()
        
        logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...")
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
        bot.app.run_polling()
        
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –ó—É–ø–∏–Ω–∫–∞ –±–æ—Ç–∞...")
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞–Ω –ø–µ—Ä–µ–¥ –≤–∏—Ö–æ–¥–æ–º
        bot.save_state()
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        try:
            bot.save_state()
        except:
            pass
        raise

if __name__ == '__main__':
    # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è —Å—Ç–∞–±—ñ–ª—å–Ω–æ—Å—Ç—ñ
    logging.getLogger('ccxt').setLevel(logging.WARNING)
    logging.getLogger('telegram').setLevel(logging.WARNING)
    logging.getLogger('asyncio').setLevel(logging.WARNING)
    
    # –ó–∞–ø—É—Å–∫ –≥–æ–ª–æ–≤–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó
    main()