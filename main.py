import requests
import asyncio
import aiohttp
import time
import hmac
import hashlib
import base64
from datetime import datetime
import logging
import threading
import os
from typing import Dict, List, Optional

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
class Config:
    # Telegram
    TELEGRAM_TOKEN = "8489382938:AAHeFFZPODspuEFcSQyjw8lWzYpRRSv9n3g"
    TELEGRAM_CHAT_ID = "6053907025"
    
    # LBank API
    LBANK_API_KEY = "c21d76ba-3252-4372-b7dd-30ac80428363"
    LBANK_SECRET_KEY = "4EC9D3BB56CBD4C42B9E83F0C7B7C1A9"
    LBANK_BASE_URL = "https://api.lbank.info"
    
    # API Keys –¥–ª—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏—Ö –¥–∂–µ—Ä–µ–ª
    BIRDEYE_API_KEY = "your_birdeye_api_key_here"  # –û—Ç—Ä–∏–º–∞—Ç–∏ –Ω–∞ https://birdeye.so/
    DEXVIEW_API_KEY = "your_dexview_api_key_here"  # –û—Ç—Ä–∏–º–∞—Ç–∏ –Ω–∞ https://dexview.com/
    
    # API URLs
    BIRDEYE_API_URL = "https://public-api.birdeye.so"
    DEXVIEW_API_URL = "https://api.dexview.com"
    
    # –¢–æ—Ä–≥–æ–≤—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
    ORDER_VOLUME = 50  # –û–±—Å—è–≥ –≤ USDT
    PRICE_PREMIUM = 0.0001  # 0.01% –≤–∏—â–µ —Ä–∏–Ω–∫–æ–≤–æ—ó —Ü—ñ–Ω–∏
    MIN_TRADE_AMOUNT = 3000  # –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Å—É–º–∞ —É–≥–æ–¥–∏ –¥–ª—è —Ä–µ–∞–∫—Ü—ñ—ó
    
    # –§—ñ–ª—å—Ç—Ä–∏ —Ç–æ–∫–µ–Ω—ñ–≤
    MIN_MARKET_CAP = 3000000  # 3M$ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –∫–∞–ø—ñ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—è
    MAX_MARKET_CAP = 100000000  # 100M$ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫–∞–ø—ñ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—è
    MIN_VOLUME = 500000  # 500K$ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –æ–±—Å—è–≥
    ALLOWED_CHAINS = ["solana", "bsc"]  # –¢—ñ–ª—å–∫–∏ Solana —Ç–∞ BSC
    BLACKLIST_TOKENS = ["shitcoin", "scam", "test", "meme", "fake", "pump", "dump"]

class TelegramClient:
    """–ü—Ä–æ—Å—Ç–∏–π –∫–ª—ñ—î–Ω—Ç –¥–ª—è Telegram –±–µ–∑ polling"""
    
    def __init__(self, token: str, chat_id: str):
        self.token = token
        self.chat_id = chat_id
        self.base_url = f"https://api.telegram.org/bot{token}"
    
    def send_message(self, text: str, parse_mode: str = None) -> bool:
        """–ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ Telegram API"""
        try:
            url = f"{self.base_url}/sendMessage"
            payload = {
                'chat_id': self.chat_id,
                'text': text
            }
            if parse_mode:
                payload['parse_mode'] = parse_mode
            
            response = requests.post(url, json=payload, timeout=10)
            return response.status_code == 200
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
            return False

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç—ñ–≤
telegram_client = TelegramClient(Config.TELEGRAM_TOKEN, Config.TELEGRAM_CHAT_ID)

class TokenFilter:
    """–ö–ª–∞—Å –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó —Ç–æ–∫–µ–Ω—ñ–≤"""
    
    @staticmethod
    def is_token_allowed(token_data: Dict) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —Ç–æ–∫–µ–Ω –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –ø—ñ–¥ –∫—Ä–∏—Ç–µ—Ä—ñ—ó"""
        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–∞–ø—ñ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—ó
            market_cap = token_data.get('market_cap', 0)
            if not (Config.MIN_MARKET_CAP <= market_cap <= Config.MAX_MARKET_CAP):
                logging.debug(f"–¢–æ–∫–µ–Ω {token_data.get('symbol')} –Ω–µ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –ø–æ –∫–∞–ø—ñ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—ó: {market_cap}")
                return False
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–±—Å—è–≥—É —Ç–æ—Ä–≥—ñ–≤
            volume = token_data.get('volume_24h', 0)
            if volume < Config.MIN_VOLUME:
                logging.debug(f"–¢–æ–∫–µ–Ω {token_data.get('symbol')} –Ω–µ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –ø–æ –æ–±—Å—è–≥—É: {volume}")
                return False
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–ª–æ–∫—á–µ–π–Ω—É
            chain = token_data.get('chain', '').lower()
            if chain not in Config.ALLOWED_CHAINS:
                logging.debug(f"–¢–æ–∫–µ–Ω {token_data.get('symbol')} –Ω–µ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –ø–æ –±–ª–æ–∫—á–µ–π–Ω—É: {chain}")
                return False
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–æ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É
            symbol = token_data.get('symbol', '').lower()
            name = token_data.get('name', '').lower()
            
            for blacklisted in Config.BLACKLIST_TOKENS:
                if blacklisted in symbol or blacklisted in name:
                    logging.debug(f"–¢–æ–∫–µ–Ω {symbol} –≤ —á–æ—Ä–Ω–æ–º—É —Å–ø–∏—Å–∫—É: {blacklisted}")
                    return False
            
            # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —è–∫–æ—Å—Ç—ñ
            price_change = abs(token_data.get('price_change_24h', 0))
            if price_change > 50:
                logging.debug(f"–¢–æ–∫–µ–Ω {symbol} –º–∞—î –∑–∞–≤–µ–ª–∏–∫—É –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ñ—Å—Ç—å: {price_change}%")
                return False
                
            liquidity = token_data.get('liquidity', 0)
            if liquidity < 100000:
                logging.debug(f"–¢–æ–∫–µ–Ω {symbol} –º–∞—î –∑–∞–º–∞–ª—É –ª—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—å: {liquidity}")
                return False
                
            logging.info(f"‚úÖ –¢–æ–∫–µ–Ω {symbol} –ø—Ä–æ–π—à–æ–≤ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—é")
            return True
            
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó —Ç–æ–∫–µ–Ω–∞: {e}")
            return False

class DexDataClient:
    """–ö–ª—ñ—î–Ω—Ç –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–º–∏ –¥–∂–µ—Ä–µ–ª–∞–º–∏ –¥–∞–Ω–∏—Ö"""
    
    @staticmethod
    async def get_recent_trades(chain: str, limit: int = 20) -> List[Dict]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—ñ—Ö —É–≥–æ–¥ –∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏—Ö –¥–∂–µ—Ä–µ–ª"""
        try:
            if chain == "solana":
                return await DexDataClient._get_solana_trades(limit)
            elif chain == "bsc":
                return await DexDataClient._get_bsc_trades(limit)
            else:
                return []
                
        except Exception as e:
            logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —É–≥–æ–¥ –∑ {chain}: {e}")
            return []
    
    @staticmethod
    async def _get_solana_trades(limit: int) -> List[Dict]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —É–≥–æ–¥ –∑ Solana —á–µ—Ä–µ–∑ Birdeye API"""
        try:
            url = f"{Config.BIRDEYE_API_URL}/public/trades?sort_by=time&order=desc&limit=100"
            headers = {"X-API-KEY": Config.BIRDEYE_API_KEY}
            
            logging.info("üîó –ó–∞–ø–∏—Ç –¥–æ Birdeye API –¥–ª—è Solana")
            
            async with aiohttp.ClientSession() as session:
                async with session.get(url, headers=headers, timeout=15) as response:
                    if response.status != 200:
                        logging.warning(f"‚ùå Birdeye API —Å—Ç–∞—Ç—É—Å: {response.status}")
                        return []
                    
                    data = await response.json()
                    trades = []
                    
                    for item in data.get('data', {}).get('items', [])[:limit]:
                        try:
                            amount_usd = float(item.get('volume', 0))
                            if amount_usd >= Config.MIN_TRADE_AMOUNT:
                                trades.append({
                                    'chain': 'solana',
                                    'token_address': item.get('token_address', ''),
                                    'token_symbol': item.get('symbol', '').upper(),
                                    'amount_usd': amount_usd,
                                    'price': float(item.get('price', 0)),
                                    'timestamp': item.get('unix_time', 0),
                                    'dex_url': f"https://birdeye.so/token/{item.get('token_address', '')}"
                                })
                        except (ValueError, TypeError) as e:
                            continue
                    
                    logging.info(f"‚úÖ Solana: –∑–Ω–∞–π–¥–µ–Ω–æ {len(trades)} –≤–µ–ª–∏–∫–∏—Ö —É–≥–æ–¥")
                    return trades
                    
        except Exception as e:
            logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ Birdeye API: {e}")
            return []
    
    @staticmethod
    async def _get_bsc_trades(limit: int) -> List[Dict]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —É–≥–æ–¥ –∑ BSC —á–µ—Ä–µ–∑ DexView API"""
        try:
            url = f"{Config.DEXVIEW_API_URL}/v1/trades/recent?chain=bsc&limit=100"
            headers = {"Authorization": f"Bearer {Config.DEXVIEW_API_KEY}"}
            
            logging.info("üîó –ó–∞–ø–∏—Ç –¥–æ DexView API –¥–ª—è BSC")
            
            async with aiohttp.ClientSession() as session:
                async with session.get(url, headers=headers, timeout=15) as response:
                    if response.status != 200:
                        logging.warning(f"‚ùå DexView API —Å—Ç–∞—Ç—É—Å: {response.status}")
                        return []
                    
                    data = await response.json()
                    trades = []
                    
                    for item in data.get('trades', [])[:limit]:
                        try:
                            amount_usd = float(item.get('valueUSD', 0))
                            if amount_usd >= Config.MIN_TRADE_AMOUNT:
                                trades.append({
                                    'chain': 'bsc',
                                    'token_address': item.get('tokenAddress', ''),
                                    'token_symbol': item.get('tokenSymbol', '').upper(),
                                    'amount_usd': amount_usd,
                                    'price': float(item.get('priceUSD', 0)),
                                    'timestamp': item.get('timestamp', 0),
                                    'dex_url': item.get('txUrl', '')
                                })
                        except (ValueError, TypeError) as e:
                            continue
                    
                    logging.info(f"‚úÖ BSC: –∑–Ω–∞–π–¥–µ–Ω–æ {len(trades)} –≤–µ–ª–∏–∫–∏—Ö —É–≥–æ–¥")
                    return trades
                    
        except Exception as e:
            logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ DexView API: {e}")
            return []
    
    @staticmethod
    async def get_token_info(chain: str, token_address: str) -> Optional[Dict]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª—å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ç–æ–∫–µ–Ω"""
        try:
            if chain == "solana":
                return await DexDataClient._get_solana_token_info(token_address)
            elif chain == "bsc":
                return await DexDataClient._get_bsc_token_info(token_address)
            else:
                return None
                
        except Exception as e:
            logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ —Ç–æ–∫–µ–Ω–∞: {e}")
            return None
    
    @staticmethod
    async def _get_solana_token_info(token_address: str) -> Optional[Dict]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ç–æ–∫–µ–Ω Solana"""
        try:
            url = f"{Config.BIRDEYE_API_URL}/public/token?address={token_address}"
            headers = {"X-API-KEY": Config.BIRDEYE_API_KEY}
            
            async with aiohttp.ClientSession() as session:
                async with session.get(url, headers=headers, timeout=10) as response:
                    if response.status != 200:
                        return None
                    
                    data = await response.json()
                    token_data = data.get('data', {})
                    
                    return {
                        'symbol': token_data.get('symbol', '').upper(),
                        'name': token_data.get('name', ''),
                        'price': float(token_data.get('price', 0)),
                        'volume_24h': float(token_data.get('volume24h', 0)),
                        'market_cap': float(token_data.get('marketCap', 0)),
                        'liquidity': float(token_data.get('liquidity', 0)),
                        'price_change_24h': float(token_data.get('priceChange24h', 0)),
                        'chain': 'solana'
                    }
                        
        except Exception as e:
            logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ —Ç–æ–∫–µ–Ω–∞ Solana: {e}")
            return None
    
    @staticmethod
    async def _get_bsc_token_info(token_address: str) -> Optional[Dict]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ç–æ–∫–µ–Ω BSC"""
        try:
            url = f"{Config.DEXVIEW_API_URL}/v1/token/info?chain=bsc&address={token_address}"
            headers = {"Authorization": f"Bearer {Config.DEXVIEW_API_KEY}"}
            
            async with aiohttp.ClientSession() as session:
                async with session.get(url, headers=headers, timeout=10) as response:
                    if response.status != 200:
                        return None
                    
                    data = await response.json()
                    token_data = data.get('token', {})
                    
                    return {
                        'symbol': token_data.get('symbol', '').upper(),
                        'name': token_data.get('name', ''),
                        'price': float(token_data.get('priceUSD', 0)),
                        'volume_24h': float(token_data.get('volume24hUSD', 0)),
                        'market_cap': float(token_data.get('marketCapUSD', 0)),
                        'liquidity': float(token_data.get('liquidityUSD', 0)),
                        'price_change_24h': float(token_data.get('priceChange24h', 0)),
                        'chain': 'bsc'
                    }
                        
        except Exception as e:
            logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ —Ç–æ–∫–µ–Ω–∞ BSC: {e}")
            return None

class LBankClient:
    def __init__(self):
        self.api_key = Config.LBANK_API_KEY
        self.secret_key = Config.LBANK_SECRET_KEY
        self.base_url = Config.LBANK_BASE_URL
        
    def _generate_signature(self, params: Dict) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø—ñ–¥–ø–∏—Å—É –¥–ª—è LBank API"""
        query_string = '&'.join([f"{k}={v}" for k, v in sorted(params.items())])
        signature = hmac.new(
            self.secret_key.encode('utf-8'),
            query_string.encode('utf-8'),
            hashlib.sha256
        ).digest()
        return base64.b64encode(signature).decode('utf-8')
    
    async def get_ticker_price(self, symbol: str) -> Optional[float]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó —Ü—ñ–Ω–∏ –∑ LBank"""
        try:
            lbank_symbol = f"{symbol}_usdt"
            url = f"{self.base_url}/v2/ticker.do?symbol={lbank_symbol}"
            logging.info(f"üîó –ü–µ—Ä–µ–≤—ñ—Ä—è—é —Ü—ñ–Ω—É –Ω–∞ LBank: {lbank_symbol}")
            
            async with aiohttp.ClientSession() as session:
                async with session.get(url, timeout=10) as response:
                    if response.status != 200:
                        logging.warning(f"‚ùå LBank –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î: —Å—Ç–∞—Ç—É—Å {response.status}")
                        return None
                    
                    data = await response.json()
                    if data.get('result') and 'ticker' in data:
                        price = float(data['ticker'][0])
                        logging.info(f"üí∞ LBank —Ü—ñ–Ω–∞ {symbol}: ${price:.6f}")
                        return price
                    else:
                        logging.warning(f"‚ùå –¢–æ–∫–µ–Ω {symbol} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –Ω–∞ LBank")
                        return None
                        
        except Exception as e:
            logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ü—ñ–Ω–∏ {symbol}: {e}")
            return None
    
    async def place_limit_order(self, symbol: str, price: float, amount: float) -> Dict:
        """–†–æ–∑–º—ñ—â–µ–Ω–Ω—è –ª—ñ–º—ñ—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞"""
        try:
            lbank_symbol = f"{symbol}_usdt"
            params = {
                'api_key': self.api_key,
                'symbol': lbank_symbol,
                'type': 'buy',
                'price': str(price),
                'amount': str(amount),
                'timestamp': str(int(time.time() * 1000))
            }
            
            params['sign'] = self._generate_signature(params)
            
            logging.info(f"üõí –†–æ–∑–º—ñ—â—É—é –æ—Ä–¥–µ—Ä –Ω–∞ LBank: {symbol} {amount} –ø–æ ${price:.6f}")
            
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    f"{self.base_url}/v2/create_order.do",
                    data=params,
                    timeout=10
                ) as response:
                    result = await response.json()
                    if result.get('result'):
                        logging.info(f"‚úÖ –û—Ä–¥–µ—Ä —É—Å–ø—ñ—à–Ω–æ —Ä–æ–∑–º—ñ—â–µ–Ω–æ: {result.get('order_id')}")
                    else:
                        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è –æ—Ä–¥–µ—Ä–∞: {result}")
                    return result
                    
        except Exception as e:
            logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è –æ—Ä–¥–µ—Ä–∞: {e}")
            return {'error': str(e)}

class ArbitrageBot:
    def __init__(self):
        self.lbank_client = LBankClient()
        self.dex_client = DexDataClient()  # –ó–º—ñ–Ω–µ–Ω–æ –Ω–∞ –Ω–æ–≤–∏–π –∫–ª—ñ—î–Ω—Ç
        self.token_filter = TokenFilter()
        self.last_processed = {}
        self.is_scanning = False
        
    async def check_apis_connection(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ API"""
        try:
            logging.info("üîó –ü–µ—Ä–µ–≤—ñ—Ä—è—é –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ API...")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏—Ö API
            test_trades = await self.dex_client.get_recent_trades("solana", 2)
            logging.info(f"‚úÖ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ñ API –¥–æ—Å—Ç—É–ø–Ω—ñ. –ó–Ω–∞–π–¥–µ–Ω–æ —É–≥–æ–¥: {len(test_trades)}")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ LBank
            test_price = await self.lbank_client.get_ticker_price("BTC")
            if test_price:
                logging.info(f"‚úÖ LBank –¥–æ—Å—Ç—É–ø–Ω–∏–π. –¶—ñ–Ω–∞ BTC: ${test_price:.2f}")
            else:
                logging.warning("‚ö†Ô∏è LBank –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î")
                
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Telegram
            if telegram_client.send_message("‚úÖ –ë–æ—Ç —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä—è—î –∑–≤'—è–∑–æ–∫"):
                logging.info("‚úÖ Telegram –¥–æ—Å—Ç—É–ø–Ω–∏–π")
            else:
                logging.warning("‚ö†Ô∏è Telegram –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π")
                
        except Exception as e:
            logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑'—î–¥–Ω–∞–Ω–Ω—è: {e}")
    
    # –†–µ—à—Ç–∞ –∫–æ–¥—É –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –Ω–µ–∑–º—ñ–Ω–Ω–æ—é...
    # [–Ü–Ω—à—ñ –º–µ—Ç–æ–¥–∏ –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω]

# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
arbitrage_bot = ArbitrageBot()

# –†–µ—à—Ç–∞ –∫–æ–¥—É –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –Ω–µ–∑–º—ñ–Ω–Ω–æ—é...
# [–§—É–Ω–∫—Ü—ñ—ó send_telegram_command, run_scanner, Flask —Å–µ—Ä–≤–µ—Ä –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω]

if __name__ == "__main__":
    logging.info("üöÄ Arbitrage Bot –∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–º–∏ API –∑–∞–ø—É—â–µ–Ω–æ!")
    logging.info(f"üì° –ú–µ—Ä–µ–∂—ñ: {Config.ALLOWED_CHAINS}")
    logging.info(f"üí∞ –ú—ñ–Ω. —É–≥–æ–¥–∞: ${Config.MIN_TRADE_AMOUNT}")
    logging.info(f"üíµ –û–±—Å—è–≥ –æ—Ä–¥–µ—Ä–∞: ${Config.ORDER_VOLUME}")
    logging.info(f"üìä –ú—ñ–Ω. –∫–∞–ø—ñ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—è: ${Config.MIN_MARKET_CAP:,}")
    
    # –û—á–∏—â–∞—î–º–æ –≤—Å—ñ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ webhook
    try:
        logging.info("üßπ –û—á–∏—â–∞—é —Å—Ç–∞—Ä—ñ webhook...")
        requests.get(f"https://api.telegram.org/bot{Config.TELEGRAM_TOKEN}/deleteWebhook", timeout=5)
        time.sleep(2)
    except Exception as e:
        logging.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—á–∏—Å—Ç–∏—Ç–∏ webhook: {e}")
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Å–∫–∞–Ω–µ—Ä
    logging.info("üì° –ó–∞–ø—É—Å–∫–∞—é —Å–∫–∞–Ω–µ—Ä —É–≥–æ–¥...")
    scanner_thread = threading.Thread(target=run_scanner, daemon=True)
    scanner_thread.start()
    
    # –ü—Ä–æ—Å—Ç–∏–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥
    from flask import Flask, request
    app = Flask(__name__)
    
    @app.route('/')
    def home():
        return "ü§ñ Arbitrage Bot is Running! Use /command endpoint to send commands.", 200
    
    @app.route('/command', methods=['POST'])
    def command_handler():
        try:
            data = request.get_json()
            command = data.get('command', '')
            chat_id = data.get('chat_id', Config.TELEGRAM_CHAT_ID)
            
            if command:
                send_telegram_command(command, chat_id)
                return {'status': 'success', 'message': 'Command processed'}
            else:
                return {'status': 'error', 'message': 'No command provided'}, 400
                
        except Exception as e:
            return {'status': 'error', 'message': str(e)}, 500
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ Flask
    port = int(os.environ.get('PORT', 10000))
    logging.info(f"üåê –ó–∞–ø—É—Å–∫–∞—é –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—ñ {port}")
    app.run(host='0.0.0.0', port=port, debug=False)