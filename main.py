import requests
import telebot
import asyncio
import aiohttp
import json
import time
import hmac
import hashlib
import base64
from datetime import datetime
import logging
from typing import Dict, List, Optional

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
class Config:
    # Telegram
    TELEGRAM_TOKEN = "8307873209:AAGtH1H4scuomk4VCAJeMSSk0dVtRi15xoU"
    TELEGRAM_CHAT_ID = "6053907025"
    
    # LBank API
    LBANK_API_KEY = "–≤–∞—à_lbank_api_key"
    LBANK_SECRET_KEY = "–≤–∞—à_lbank_secret_key"
    LBANK_BASE_URL = "https://api.lbank.info"
    
    # GMGN –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥
    GMGN_WEBHOOK_URL = "–≤–∞—à_gmgn_webhook_url"
    
    # –¢–æ—Ä–≥–æ–≤—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
    TRADE_SYMBOL = "labubu_usdt"  # –°–∏–º–≤–æ–ª –¥–ª—è —Ç–æ—Ä–≥—ñ–≤–ª—ñ
    ORDER_VOLUME = 5000  # –û–±—Å—è–≥ –≤ USDT
    PRICE_PREMIUM = 0.0001  # 0.01% –≤–∏—â–µ —Ä–∏–Ω–∫–æ–≤–æ—ó —Ü—ñ–Ω–∏
    ORDER_TYPE = "limit"  # –¢–∏–ø –æ—Ä–¥–µ—Ä–∞

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
bot = telebot.TeleBot(Config.TELEGRAM_TOKEN)

class LBankClient:
    def __init__(self, api_key: str, secret_key: str):
        self.api_key = api_key
        self.secret_key = secret_key
        self.base_url = Config.LBANK_BASE_URL
        
    def _generate_signature(self, params: Dict) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø—ñ–¥–ø–∏—Å—É –¥–ª—è LBank API"""
        query_string = '&'.join([f"{k}={v}" for k, v in sorted(params.items())])
        signature = hmac.new(
            self.secret_key.encode('utf-8'),
            query_string.encode('utf-8'),
            hashlib.sha256
        ).digest()
        return base64.b64encode(signature).decode('utf-8')
    
    async def get_ticker_price(self, symbol: str) -> Optional[float]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó —Ü—ñ–Ω–∏ –∑ LBank"""
        try:
            url = f"{self.base_url}/v2/ticker.do?symbol={symbol}"
            async with aiohttp.ClientSession() as session:
                async with session.get(url, timeout=1) as response:
                    data = await response.json()
                    if data.get('result') and 'ticker' in data:
                        return float(data['ticker'][0])  # –ü–µ—Ä—à–∏–π –µ–ª–µ–º–µ–Ω—Ç - –ø–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ü—ñ–Ω–∏: {e}")
        return None
    
    async def place_limit_order(self, symbol: str, price: float, amount: float) -> Dict:
        """–†–æ–∑–º—ñ—â–µ–Ω–Ω—è –ª—ñ–º—ñ—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞"""
        try:
            params = {
                'api_key': self.api_key,
                'symbol': symbol,
                'type': 'buy',
                'price': str(price),
                'amount': str(amount),
                'timestamp': str(int(time.time() * 1000))
            }
            
            params['sign'] = self._generate_signature(params)
            
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    f"{self.base_url}/v2/create_order.do",
                    data=params,
                    timeout=2
                ) as response:
                    result = await response.json()
                    return result
                    
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è –æ—Ä–¥–µ—Ä–∞: {e}")
            return {'error': str(e)}

class ArbitrageBot:
    def __init__(self):
        self.lbank_client = LBankClient(Config.LBANK_API_KEY, Config.LBANK_SECRET_KEY)
        self.last_processed_time = 0
        self.min_processing_interval = 0.1  # 100ms –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª
        
    async def process_gmgn_signal(self, signal_data: Dict):
        """–û–±—Ä–æ–±–∫–∞ —Å–∏–≥–Ω–∞–ª—É –≤—ñ–¥ GMGN"""
        current_time = time.time()
        
        # –ó–∞–ø–æ–±—ñ–≥–∞—î–º–æ –¥—É–±–ª—é–≤–∞–Ω–Ω—é –æ–±—Ä–æ–±–∫–∏
        if current_time - self.last_processed_time < self.min_processing_interval:
            logging.warning("–°–∫–∏–ø–∞—î–º–æ —Å–∏–≥–Ω–∞–ª - –∑–∞–Ω–∞–¥—Ç–æ —à–≤–∏–¥–∫–æ")
            return
        
        self.last_processed_time = current_time
        
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É —Ü—ñ–Ω—É –∑ LBank
            current_price = await self.lbank_client.get_ticker_price(Config.TRADE_SYMBOL)
            if not current_price:
                logging.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ü—ñ–Ω—É –∑ LBank")
                return
            
            # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —Ü—ñ–Ω—É –æ—Ä–¥–µ—Ä–∞ (0.01% –≤–∏—â–µ)
            order_price = round(current_price * (1 + Config.PRICE_PREMIUM), 6)
            
            # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –æ–±—Å—è–≥
            order_amount = round(Config.ORDER_VOLUME / order_price, 8)
            
            # –†–æ–∑–º—ñ—â—É—î–º–æ –æ—Ä–¥–µ—Ä
            order_result = await self.lbank_client.place_limit_order(
                Config.TRADE_SYMBOL,
                order_price,
                order_amount
            )
            
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Telegram
            await self.send_telegram_notification(signal_data, current_price, order_price, order_result)
            
            logging.info(f"–û—Ä–¥–µ—Ä —Ä–æ–∑–º—ñ—â–µ–Ω–æ: {order_price} USDT, {order_amount} {Config.TRADE_SYMBOL}")
            
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Å–∏–≥–Ω–∞–ª—É: {e}")
    
    async def send_telegram_notification(self, signal_data: Dict, market_price: float, 
                                       order_price: float, order_result: Dict):
        """–í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤ Telegram"""
        try:
            message = (
                f"üöÄ *–ù–æ–≤–∞ —É–≥–æ–¥–∞ GMGN/LBank*\n\n"
                f"üìä *–î–µ—Ç–∞–ª—ñ —Å–∏–≥–Ω–∞–ª—É:*\n"
                f"‚Ä¢ –¢–æ–∫–µ–Ω: `{signal_data.get('token', 'N/A')}`\n"
                f"‚Ä¢ –û–±—Å—è–≥: `${signal_data.get('amount', 0):.2f}`\n"
                f"‚Ä¢ –¶—ñ–Ω–∞ –ø–æ–∫—É–ø–∫–∏: `${signal_data.get('price', 0):.6f}`\n\n"
                f"üìà *–†–∏–Ω–∫–æ–≤—ñ –¥–∞–Ω—ñ:*\n"
                f"‚Ä¢ LBank —Ü–µ–Ω–∞: `${market_price:.6f}`\n"
                f"‚Ä¢ –¶—ñ–Ω–∞ –æ—Ä–¥–µ—Ä–∞: `${order_price:.6f}`\n"
                f"‚Ä¢ Premium: `{Config.PRICE_PREMIUM*100:.2f}%`\n\n"
                f"üõí *–û—Ä–¥–µ—Ä:*\n"
                f"‚Ä¢ –°—Ç–∞—Ç—É—Å: `{'–£—Å–ø—ñ—à–Ω–æ' if order_result.get('result') else '–ü–æ–º–∏–ª–∫–∞'}`\n"
                f"‚Ä¢ ID –æ—Ä–¥–µ—Ä–∞: `{order_result.get('order_id', 'N/A')}`\n"
                f"‚Ä¢ –ß–∞—Å: `{datetime.now().strftime('%H:%M:%S.%f')[:-3]}`\n\n"
                f"‚ö° *–û–±—Ä–æ–±–ª–µ–Ω–æ –∑–∞:* `{(time.time() - self.last_processed_time)*1000:.2f}ms`"
            )
            
            await bot.send_message(Config.TELEGRAM_CHAT_ID, message, parse_mode="Markdown")
            
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
arbitrage_bot = ArbitrageBot()

# Webhook endpoint –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–∏–≥–Ω–∞–ª—ñ–≤ –≤—ñ–¥ GMGN
from flask import Flask, request, jsonify
app = Flask(__name__)

@app.route('/gmgn-webhook', methods=['POST'])
async def gmgn_webhook():
    """–ï–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è webhook –≤—ñ–¥ GMGN"""
    try:
        data = request.get_json()
        
        # –®–≤–∏–¥–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–∞–Ω–∏—Ö
        if not data or 'token' not in data:
            return jsonify({'status': 'error', 'message': 'Invalid data'}), 400
        
        logging.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª –≤—ñ–¥ GMGN: {data['token']}")
        
        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ –æ–±—Ä–æ–±–∫–∞ —Å–∏–≥–Ω–∞–ª—É
        asyncio.create_task(arbitrage_bot.process_gmgn_signal(data))
        
        return jsonify({'status': 'success', 'message': 'Signal processing started'}), 200
        
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ webhook: {e}")
        return jsonify({'status': 'error', 'message': str(e)}), 500

# –ö–æ–º–∞–Ω–¥–∏ –¥–ª—è Telegram –±–æ—Ç–∞
@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    help_text = (
        "ü§ñ *GMGN/LBank Arbitrage Bot*\n\n"
        "–¶–µ–π –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–∫–æ–Ω—É—î –∞—Ä–±—ñ—Ç—Ä–∞–∂ –º—ñ–∂ GMGN —Ç–∞ LBank:\n"
        "‚Ä¢ –û—Ç—Ä–∏–º—É—î —Å–∏–≥–Ω–∞–ª–∏ –∫—É–ø—ñ–≤–ª—ñ –∑ GMGN\n"
        "‚Ä¢ –ú–∏—Ç—Ç—î–≤–æ —Ä–æ–∑–º—ñ—â—É—î –æ—Ä–¥–µ—Ä–∏ –Ω–∞ LBank\n"
        "‚Ä¢ –¶—ñ–Ω–∞: +0.01% –¥–æ —Ä–∏–Ω–∫–æ–≤–æ—ó\n"
        "‚Ä¢ –û–±—Ä–æ–±–∫–∞: <100ms\n\n"
        "‚öôÔ∏è *–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:*\n"
        f"‚Ä¢ –¢–æ–∫–µ–Ω: `{Config.TRADE_SYMBOL}`\n"
        f"‚Ä¢ –û–±—Å—è–≥: `${Config.ORDER_VOLUME}`\n"
        f"‚Ä¢ Premium: `{Config.PRICE_PREMIUM*100:.2f}%`\n\n"
        "üìä –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–Ω–∏–π ‚úÖ"
    )
    bot.send_message(message.chat.id, help_text, parse_mode="Markdown")

@bot.message_handler(commands=['status'])
def check_status(message):
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É –±–æ—Ç–∞ —Ç–∞ –∑'—î–¥–Ω–∞–Ω—å"""
    status_text = (
        "üìä *–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏:*\n\n"
        "‚Ä¢ –ë–æ—Ç: –ê–∫—Ç–∏–≤–Ω–∏–π ‚úÖ\n"
        "‚Ä¢ LBank API: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞...\n"
        "‚Ä¢ GMGN Webhook: –ê–∫—Ç–∏–≤–Ω–∏–π ‚úÖ\n"
        f"‚Ä¢ –û—Å—Ç–∞–Ω–Ω—è –æ–±—Ä–æ–±–∫–∞: {datetime.now().strftime('%H:%M:%S')}\n"
        f"‚Ä¢ –û–±—Å—è–≥ –æ—Ä–¥–µ—Ä–∞: ${Config.ORDER_VOLUME}\n"
        f"‚Ä¢ Premium: {Config.PRICE_PREMIUM*100:.2f}%"
    )
    bot.send_message(message.chat.id, status_text, parse_mode="Markdown")

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
async def test_execution_speed():
    """–¢–µ—Å—Ç —à–≤–∏–¥–∫–æ—Å—Ç—ñ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è"""
    test_data = {
        'token': 'TEST_GMGN',
        'amount': 5000,
        'price': 1.0000
    }
    
    start_time = time.time()
    await arbitrage_bot.process_gmgn_signal(test_data)
    execution_time = (time.time() - start_time) * 1000
    
    logging.info(f"–¢–µ—Å—Ç–æ–≤–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—å: {execution_time:.2f}ms")

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ç–µ—Å—Ç —à–≤–∏–¥–∫–æ—Å—Ç—ñ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ
    asyncio.run(test_execution_speed())
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ Flask –¥–ª—è webhook
    from threading import Thread
    flask_thread = Thread(target=lambda: app.run(host='0.0.0.0', port=5000, debug=False))
    flask_thread.daemon = True
    flask_thread.start()
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ Telegram –±–æ—Ç–∞
    logging.info("üöÄ Arbitrage Bot –∑–∞–ø—É—â–µ–Ω–æ!")
    bot.infinity_polling()