import matplotlib
matplotlib.use('Agg')
import pandas as pd
import numpy as np
import requests
import time
from datetime import datetime, timedelta
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.ensemble import IsolationForest, RandomForestClassifier
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
import asyncio
from flask import Flask, request, jsonify
import threading
import json
from typing import Dict, List, Optional, Tuple, Any
import logging
import math
import os
import re
import heapq
from collections import deque, defaultdict
from concurrent.futures import ThreadPoolExecutor, as_completed
import talib
from scipy import stats
import ccxt
import aiohttp
import warnings
warnings.filterwarnings('ignore')

# –î–µ—Ç–∞–ª—å–Ω–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot_debug.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class UltimatePumpDumpDetector:
    def __init__(self, token: str):
        self.token = token
        self.app = Application.builder().token(token).build()
        
        # –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Binance –∑ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—î—é
        logger.info("–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Binance...")
        try:
            self.exchange = ccxt.binance({
                'enableRateLimit': True,
                'timeout': 15000,
                'options': {
                    'defaultType': 'spot',
                    'adjustForTimeDifference': True,
                },
                'rateLimit': 100,
            })
            logger.info("–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Binance —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó Binance: {e}")
            self.exchange = None
        
        # –†–æ–∑—à–∏—Ä–µ–Ω–∏–π —á–æ—Ä–Ω–∏–π —Å–ø–∏—Å–æ–∫
        self.garbage_symbols = self._load_garbage_symbols()
        self.coin_blacklist = set()
        
        # –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è –º–∞—Å—à—Ç–∞–±–æ–≤–∞–Ω–æ–≥–æ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è
        self.detection_params = {
            'volume_spike_threshold': 1.8,
            'price_acceleration_min': 0.003,
            'rsi_oversold': 28,
            'rsi_overbought': 72,
            'orderbook_imbalance_min': 0.15,
            'large_order_threshold': 75000,
            'min_volume_usdt': 2000000,  # 2M USDT –º—ñ–Ω—ñ–º—É–º –¥–ª—è —è–∫–æ—Å—Ç—ñ
            'max_volume_usdt': 100000000,
            'price_change_5m_min': 1.2,
            'wick_ratio_threshold': 0.25,
            'market_cap_filter': 5000000,
            'liquidity_score_min': 0.5,
            'pump_probability_threshold': 0.65,
            'dump_probability_threshold': 0.65,
            'whale_volume_threshold': 75000,
            'volatility_spike_threshold': 2.2,
            'min_daily_change': 7.0,
            'min_price': 0.0005,
            'max_symbols_per_scan': 150  # –ú–∞–∫—Å–∏–º—É–º —Ç–æ–∫–µ–Ω—ñ–≤ –∑–∞ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è
        }
        
        # –ö–µ—à —Ç–∞ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
        self.market_data_cache = {}
        self.symbols_cache = []
        self.last_symbols_update = 0
        self.performance_history = deque(maxlen=1000)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
        self.performance_metrics = {
            'total_scans': 0,
            'signals_triggered': 0,
            'success_rate': 0.0,
            'avg_scan_time': 0.0,
            'false_positives': 0,
            'pump_signals_detected': 0,
            'dump_signals_detected': 0,
            'profitable_signals': 0,
            'unprofitable_signals': 0,
            'avg_symbols_per_scan': 0
        }
        
        # –ü—É–ª –ø–æ—Ç–æ–∫—ñ–≤ –¥–ª—è –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ–≥–æ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è
        self.executor = ThreadPoolExecutor(max_workers=20)
        self.setup_handlers()
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç–∞ –∫–µ—à—É–≤–∞–Ω–Ω—è
        self.last_update_time = time.time()

    def _load_garbage_symbols(self):
        """–†–æ–∑—à–∏—Ä–µ–Ω–∏–π —Å–ø–∏—Å–æ–∫ –Ω–µ–ø–æ—Ç—Ä—ñ–±–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤"""
        base = {
            'USD', 'EUR', 'GBP', 'JPY', 'CNY', 'RUB', 'TRY', 'BRL', 'KRW', 'AUD',
            'USDC', 'USDT', 'BUSD', 'DAI', 'TUSD', 'PAX', 'UST', 'HUSD', 'GUSD',
            'PAXG', 'WBTC', 'BTCB', 'ETHB', 'BNB', 'HT', 'PNT', 'LEO', 'LINK',
            'XRP', 'ADA', 'DOT', 'DOGE', 'SHIB', 'VIB', 'SOL', 'AVAX', 'FTM',
            'SXP', 'CHZ', 'OOKI', 'CREAM', 'FTT', 'BTT', 'WIN', 'TRX', 'BCH',
            'LTC', 'HARD', 'XLM', 'XMR', 'XTZ', 'WTC', 'DASH', 'ETC', 'BETA',
            'BURGER', 'FIRO', 'CVP', 'EPX', 'PROS', 'SLF', 'OAX', 'VIDT',
            'WING', 'CLV', 'FOR', 'VITE', 'TROY', 'SFP', 'ALPACA', 'DEXE',
            'FUN', 'TVK', 'BOND', 'TLM', 'REEF', 'TWT', 'LEVER', 'MULTI',
            'GFT', 'DREP', 'PERL', 'UFT', 'BTS', 'STMX', 'CKB', 'CHR',
            'COCOS', 'MBL', 'TCT', 'WRX', 'BEAM', 'VTHO', 'DOCK', 'WAN'
        }
        
        patterns = {
            'UP', 'DOWN', 'BULL', 'BEAR', 'LONG', 'SHORT', 'HALF', 'FULL',
            'HEDGE', 'DOOM', 'MOON', 'SUN', 'EARTH', 'MARS', 'PLUTO',
            '3L', '3S', '2L', '2S', '1L', '1S', '5L', '5S', '10L', '10S'
        }
        
        return base.union(patterns)

    def setup_handlers(self):
        """–û–Ω–æ–≤–ª–µ–Ω—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥"""
        handlers = [
            CommandHandler("start", self.start_command),
            CommandHandler("scan", self.deep_scan_command),
            CommandHandler("mass_scan", self.mass_scan_command),
            CommandHandler("pump_radar", self.pump_radar_command),
            CommandHandler("dump_radar", self.dump_radar_command),
            CommandHandler("liquidity_scan", self.liquidity_scan_command),
            CommandHandler("whale_watch", self.whale_watch_command),
            CommandHandler("volatility_alert", self.volatility_alert_command),
            CommandHandler("ai_risk_scan", self.ai_risk_scan_command),
            CommandHandler("settings", self.settings_command),
            CommandHandler("blacklist", self.blacklist_command),
            CommandHandler("performance", self.performance_command),
            CommandHandler("quick_scan", self.quick_scan_command),
            CommandHandler("emergency", self.emergency_scan),
            CommandHandler("debug", self.debug_command),
            CommandHandler("test", self.test_command),
            CommandHandler("test_symbol", self.test_symbol_command),
            CommandHandler("scan_stats", self.scan_stats_command),
            CallbackQueryHandler(self.advanced_button_handler)
        ]
        
        for handler in handlers:
            self.app.add_handler(handler)

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–Ω–æ–≤–ª–µ–Ω–µ –º–µ–Ω—é"""
        keyboard = [
            [InlineKeyboardButton("üö® MASS SCAN 150+", callback_data="mass_scan"),
             InlineKeyboardButton("üîç DEEP SCAN", callback_data="deep_scan")],
            [InlineKeyboardButton("üìä PUMP RADAR", callback_data="pump_radar"),
             InlineKeyboardButton("üìâ DUMP RADAR", callback_data="dump_radar")],
            [InlineKeyboardButton("üêã WHALE WATCH", callback_data="whale_watch"),
             InlineKeyboardButton("üíß LIQUIDITY SCAN", callback_data="liquidity_scan")],
            [InlineKeyboardButton("‚ö° VOLATILITY ALERTS", callback_data="volatility_alerts"),
             InlineKeyboardButton("ü§ñ AI RISK SCAN", callback_data="ai_risk_scan")],
            [InlineKeyboardButton("üìà SCAN STATS", callback_data="scan_stats"),
             InlineKeyboardButton("‚öôÔ∏è SETTINGS", callback_data="settings")],
            [InlineKeyboardButton("üö´ BLACKLIST", callback_data="blacklist"),
             InlineKeyboardButton("üìä PERFORMANCE", callback_data="performance")],
            [InlineKeyboardButton("üîÑ UPDATE", callback_data="update")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "ü§ñ **ULTIMATE PUMP/DUMP DETECTOR v6.0**\n\n"
            "üéØ *–ú–∞—Å—à—Ç–∞–±–Ω–µ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è 150+ —Ç–æ–∫–µ–Ω—ñ–≤ –æ–¥–Ω–æ—á–∞—Å–Ω–æ*\n\n"
            "‚ú® **–ü–æ–∫—Ä–∞—â–µ–Ω—ñ —Ñ—ñ—á—ñ:**\n"
            "‚Ä¢ üî• –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è 150+ —Ç–æ–∫–µ–Ω—ñ–≤ –∑–∞ —Ä–∞–∑\n"
            "‚Ä¢ ‚ö° –ü–∞—Ä–∞–ª–µ–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –¥–∞–Ω–∏—Ö\n"
            "‚Ä¢ üöÄ –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å\n"
            "‚Ä¢ üìä –ì–ª–∏–±–æ–∫–∏–π –∞–Ω–∞–ª—ñ–∑ —è–∫–æ—Å—Ç—ñ\n\n"
            "üíé *–§–æ–∫—É—Å –Ω–∞ –≤–∏—Å–æ–∫–æ–ª—ñ–∫–≤—ñ–¥–Ω–∏—Ö –∞–∫—Ç–∏–≤–∞—Ö 2M+ USDT!*",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

    async def mass_scan_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ú–∞—Å–æ–≤–µ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è 150+ —Ç–æ–∫–µ–Ω—ñ–≤"""
        try:
            if not await self.check_exchange_connection():
                await update.message.reply_text("‚ùå –ù–µ–º–∞—î –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±—ñ—Ä–∂—ñ")
                return
            
            msg = await update.message.reply_text("üî• –ó–ê–ü–£–°–ö–ê–Æ –ú–ê–°–û–í–ï –°–ö–ê–ù–£–í–ê–ù–ù–Ø 150+ –¢–û–ö–ï–ù–Ü–í...")
            
            start_time = time.time()
            symbols = await self.get_all_qualified_symbols()
            
            if not symbols:
                await msg.edit_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–∏–º–≤–æ–ª–∏ –¥–ª—è —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è")
                return
            
            # –û–±–º–µ–∂—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–∏–º–≤–æ–ª—ñ–≤
            symbols = symbols[:self.detection_params['max_symbols_per_scan']]
            
            results = await self.mass_analyze_symbols(symbols)
            
            scan_time = time.time() - start_time
            self.performance_metrics['total_scans'] += 1
            self.performance_metrics['avg_scan_time'] = (
                self.performance_metrics['avg_scan_time'] * (self.performance_metrics['total_scans'] - 1) + scan_time
            ) / self.performance_metrics['total_scans']
            self.performance_metrics['avg_symbols_per_scan'] = len(symbols)
            
            if results:
                results.sort(key=lambda x: max(x['pump_probability'], x['dump_probability']), reverse=True)
                self.performance_metrics['signals_triggered'] += len(results)
                
                response = (
                    f"üö® **–ú–ê–°–û–í–ï –°–ö–ê–ù–£–í–ê–ù–ù–Ø –ó–ê–í–ï–†–®–ï–ù–û**\n\n"
                    f"üìä –ü—Ä–æ—Å–∫–∞–Ω–æ–≤–∞–Ω–æ: {len(symbols)} —Ç–æ–∫–µ–Ω—ñ–≤\n"
                    f"‚è±Ô∏è –ß–∞—Å —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è: {scan_time:.1f}—Å\n"
                    f"üéØ –ó–Ω–∞–π–¥–µ–Ω–æ —Å–∏–≥–Ω–∞–ª—ñ–≤: {len(results)}\n\n"
                )
                
                # –ì—Ä—É–ø—É—î–º–æ —Å–∏–≥–Ω–∞–ª–∏ –∑–∞ —Ç–∏–ø–æ–º
                pump_signals = [r for r in results if r['pump_probability'] > 0.7]
                dump_signals = [r for r in results if r['dump_probability'] > 0.7]
                
                if pump_signals:
                    response += "üî• **–¢–û–ü PUMP –°–ò–ì–ù–ê–õ–ò:**\n\n"
                    for i, signal in enumerate(pump_signals[:5], 1):
                        response += self.format_signal_message(signal, i)
                    self.performance_metrics['pump_signals_detected'] += len(pump_signals)
                
                if dump_signals:
                    response += "üìâ **–¢–û–ü DUMP –°–ò–ì–ù–ê–õ–ò:**\n\n"
                    for i, signal in enumerate(dump_signals[:5], 1):
                        response += self.format_signal_message(signal, i)
                    self.performance_metrics['dump_signals_detected'] += len(dump_signals)
                
                await msg.edit_text(response, parse_mode='Markdown')
            else:
                await msg.edit_text(
                    f"‚ÑπÔ∏è –ú–∞—Å–æ–≤–µ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ\n"
                    f"üìä –ü—Ä–æ—Å–∫–∞–Ω–æ–≤–∞–Ω–æ: {len(symbols)} —Ç–æ–∫–µ–Ω—ñ–≤\n"
                    f"‚è±Ô∏è –ß–∞—Å: {scan_time:.1f}—Å\n"
                    f"üéØ –°–∏–≥–Ω–∞–ª—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
                )
                
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –º–∞—Å–æ–≤–æ–≥–æ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è: {e}")
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –º–∞—Å–æ–≤–æ–≥–æ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è")

    async def mass_analyze_symbols(self, symbols: List[str]) -> List[Dict]:
        """–ú–∞—Å–æ–≤–∏–π –∞–Ω–∞–ª—ñ–∑ —Å–∏–º–≤–æ–ª—ñ–≤ –∑ –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ—é –æ–±—Ä–æ–±–∫–æ—é"""
        results = []
        
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ ThreadPoolExecutor –¥–ª—è –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏
        with ThreadPoolExecutor(max_workers=min(20, len(symbols))) as executor:
            # –°—Ç–≤–æ—Ä—é—î–º–æ —Ñ—É—Ç—É—Ä–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª—É
            future_to_symbol = {
                executor.submit(self.analyze_symbol, symbol): symbol 
                for symbol in symbols
            }
            
            # –û–±—Ä–æ–±–ª—è—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ –º—ñ—Ä—ñ —ó—Ö –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ
            for future in as_completed(future_to_symbol):
                symbol = future_to_symbol[future]
                try:
                    result = future.result(timeout=10.0)
                    if result:
                        results.append(result)
                except Exception as e:
                    logger.debug(f"–ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É {symbol}: {e}")
                finally:
                    # –ù–µ–≤–µ–ª–∏–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –¥–ª—è rate limiting
                    time.sleep(0.05)
        
        return results

    async def get_all_qualified_symbols(self) -> List[str]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö —è–∫—ñ—Å–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤ –∑ –∫–µ—à—É–≤–∞–Ω–Ω—è–º"""
        current_time = time.time()
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–µ—à (–æ–Ω–æ–≤–ª—é—î–º–æ –∫–æ–∂–Ω—ñ 5 —Ö–≤–∏–ª–∏–Ω)
        if (self.symbols_cache and 
            current_time - self.last_symbols_update < 300):
            return self.symbols_cache
        
        try:
            if not self.exchange:
                return []
            
            # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –≤—Å—ñ —Ä–∏–Ω–∫–∏
            markets = await asyncio.get_event_loop().run_in_executor(
                self.executor, self.exchange.load_markets
            )
            
            qualified_symbols = []
            
            for symbol, market in markets.items():
                if (symbol.endswith('/USDT') and 
                    market.get('active', False) and
                    market.get('quoteVolume', 0) >= self.detection_params['min_volume_usdt'] and
                    market.get('quoteVolume', 0) <= self.detection_params['max_volume_usdt'] and
                    not self.is_garbage_symbol(symbol)):
                    
                    # –î–æ–¥–∞—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ü—ñ–Ω–∏
                    ticker = await asyncio.get_event_loop().run_in_executor(
                        self.executor, lambda: self.exchange.fetch_ticker(symbol)
                    )
                    
                    if (ticker and ticker.get('last', 0) >= self.detection_params['min_price'] and
                        not self.is_low_quality_symbol(symbol, {'close': ticker.get('last', 0)})):
                        
                        qualified_symbols.append(symbol)
            
            # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ –æ–±'—î–º–æ–º (–Ω–∞–π–±—ñ–ª—å—à –ª—ñ–∫–≤—ñ–¥–Ω—ñ —Å–ø–æ—á–∞—Ç–∫—É)
            qualified_symbols.sort(key=lambda x: markets[x].get('quoteVolume', 0), reverse=True)
            
            # –û–Ω–æ–≤–ª—é—î–º–æ –∫–µ—à
            self.symbols_cache = qualified_symbols
            self.last_symbols_update = current_time
            
            logger.info(f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(qualified_symbols)} —è–∫—ñ—Å–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤")
            return qualified_symbols
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–∏–º–≤–æ–ª—ñ–≤: {e}")
            return []

    def is_low_quality_symbol(self, symbol: str, market_data: Dict) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —è–∫–æ—Å—Ç—ñ —Å–∏–º–≤–æ–ª—É"""
        try:
            symbol_clean = symbol.upper().replace('/USDT', '')
            
            # –ì–æ–ª–æ–≤–Ω—ñ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∏ - –∑–∞–≤–∂–¥–∏ —è–∫—ñ—Å–Ω—ñ
            major_coins = {
                'BTC', 'ETH', 'BNB', 'SOL', 'XRP', 'ADA', 'DOGE', 'MATIC', 
                'DOT', 'LTC', 'AVAX', 'LINK', 'ATOM', 'XMR', 'ETC', 'BCH',
                'FIL', 'NEAR', 'ALGO', 'VET', 'EOS', 'XTZ', 'THETA', 'AAVE',
                'MKR', 'COMP', 'SNX', 'CRV', 'SUSHI', 'UNI', 'YFI'
            }
            
            if symbol_clean in major_coins:
                return False
                
            if symbol_clean in self.garbage_symbols:
                return True
            
            # –§—ñ–ª—å—Ç—Ä –¥–æ–≤–∂–∏–Ω–∏ –Ω–∞–∑–≤–∏
            if len(symbol_clean) > 10:
                return True
                
            # –§—ñ–ª—å—Ç—Ä —Ü–∏—Ñ—Ä —É –Ω–∞–∑–≤—ñ
            if any(char.isdigit() for char in symbol_clean):
                return True
                
            # –§—ñ–ª—å—Ç—Ä –ø—ñ–¥–æ–∑—Ä—ñ–ª–∏—Ö –ø–∞—Ç–µ—Ä–Ω—ñ–≤
            suspicious_patterns = {'MOON', 'SUN', 'MARS', 'EARTH', 'PLUTO'}
            if any(pattern in symbol_clean for pattern in suspicious_patterns):
                return True
                
            return False
            
        except:
            return True

    async def analyze_symbol(self, symbol: str) -> Dict:
        """–û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ —Å–∏–º–≤–æ–ª—É"""
        try:
            # –®–≤–∏–¥–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —è–∫–æ—Å—Ç—ñ —Å–∏–º–≤–æ–ª—É
            if self.is_garbage_symbol(symbol):
                return {}
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑ –∫–µ—à—É –∞–±–æ API
            market_data = await self.get_market_data(symbol)
            if not market_data:
                return {}
            
            # –®–≤–∏–¥–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–±'—î–º—É
            if market_data['volume'] < self.detection_params['min_volume_usdt']:
                return {}
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ
            orderbook_future = asyncio.create_task(self.get_orderbook_depth(symbol, 20))
            klines_future = asyncio.create_task(self.get_klines(symbol, '5m', 25))
            
            orderbook, klines = await asyncio.gather(orderbook_future, klines_future)
            
            if not klines or len(klines) < 15:
                return {}
            
            # –ü–∞—Ä–∞–ª–µ–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑
            tech_analysis = self.technical_analysis(klines)
            ob_analysis = self.orderbook_analysis(orderbook)
            volume_analysis = self.volume_analysis(klines, market_data)
            
            # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –π–º–æ–≤—ñ—Ä–Ω–æ—Å—Ç–µ–π
            pump_prob = self.calculate_pump_probability(tech_analysis, ob_analysis, volume_analysis)
            dump_prob = self.calculate_dump_probability(tech_analysis, ob_analysis, volume_analysis)
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —è–∫–æ—Å—Ç—ñ —Å–∏–≥–Ω–∞–ª—É
            if (pump_prob < self.detection_params['pump_probability_threshold'] and 
                dump_prob < self.detection_params['dump_probability_threshold']):
                return {}
            
            return {
                'symbol': symbol,
                'price': market_data['close'],
                'volume_usdt': market_data['volume'],
                'percentage': market_data['percentage'],
                'pump_probability': pump_prob,
                'dump_probability': dump_prob,
                'technical_indicators': tech_analysis,
                'orderbook_metrics': ob_analysis,
                'volume_metrics': volume_analysis,
                'timestamp': datetime.now().isoformat()
            }
            
        except Exception as e:
            logger.debug(f"–ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É {symbol}: {e}")
            return {}

    async def get_market_data(self, symbol: str) -> Optional[Dict]:
        """–û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–∏–Ω–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö –∑ –∫–µ—à—É–≤–∞–Ω–Ω—è–º"""
        try:
            current_time = time.time()
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–µ—à—É
            if (symbol in self.market_data_cache and 
                current_time - self.market_data_cache[symbol]['timestamp'] < 30):
                return self.market_data_cache[symbol]['data']
            
            if not self.exchange:
                return None
                
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ thread pool –¥–ª—è –±–ª–æ–∫—É–≤–∞–ª—å–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π
            ticker = await asyncio.get_event_loop().run_in_executor(
                self.executor, lambda: self.exchange.fetch_ticker(symbol)
            )
            
            if not ticker:
                return None
                
            result = {
                'symbol': symbol,
                'open': float(ticker.get('open', 0)),
                'high': float(ticker.get('high', 0)),
                'low': float(ticker.get('low', 0)),
                'close': float(ticker.get('last', ticker.get('close', 0))),
                'volume': float(ticker.get('quoteVolume', 0)),
                'percentage': float(ticker.get('percentage', 0))
            }
            
            # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–µ—à—É
            self.market_data_cache[symbol] = {
                'data': result,
                'timestamp': current_time
            }
            
            return result
            
        except Exception as e:
            logger.debug(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–ª—è {symbol}: {e}")
            return None

    async def scan_stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è"""
        try:
            stats_text = (
                "üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ö–ê–ù–£–í–ê–ù–ù–Ø:**\n\n"
                f"‚Ä¢ –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–∫–∞–Ω—É–≤–∞–Ω—å: {self.performance_metrics['total_scans']}\n"
                f"‚Ä¢ –°–µ—Ä–µ–¥–Ω—è –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–∫–µ–Ω—ñ–≤: {self.performance_metrics['avg_symbols_per_scan']:.0f}\n"
                f"‚Ä¢ –°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è: {self.performance_metrics['avg_scan_time']:.1f}—Å\n"
                f"‚Ä¢ –ó–Ω–∞–π–¥–µ–Ω–æ —Å–∏–≥–Ω–∞–ª—ñ–≤: {self.performance_metrics['signals_triggered']}\n"
                f"‚Ä¢ Pump —Å–∏–≥–Ω–∞–ª—ñ–≤: {self.performance_metrics['pump_signals_detected']}\n"
                f"‚Ä¢ Dump —Å–∏–≥–Ω–∞–ª—ñ–≤: {self.performance_metrics['dump_signals_detected']}\n"
                f"‚Ä¢ –£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å: {self.performance_metrics['success_rate']:.1f}%\n\n"
            )
            
            # –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–µ—à
            stats_text += f"üîß **–°–ò–°–¢–ï–ú–ê:**\n"
            stats_text += f"‚Ä¢ –°–∏–º–≤–æ–ª—ñ–≤ —É –∫–µ—à—ñ: {len(self.symbols_cache)}\n"
            stats_text += f"‚Ä¢ –î–∞–Ω–∏—Ö —É –∫–µ—à—ñ: {len(self.market_data_cache)}\n"
            stats_text += f"‚Ä¢ –í–æ—Ä–∫–µ—Ä—ñ–≤: {self.executor._max_workers}\n"
            
            await update.message.reply_text(stats_text, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

    # –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω—ñ –≤–µ—Ä—Å—ñ—ó —ñ–Ω—à–∏—Ö –º–µ—Ç–æ–¥—ñ–≤
    async def deep_scan_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ì–ª–∏–±–∏–Ω–Ω–µ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è –∑ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—î—é"""
        try:
            if not await self.check_exchange_connection():
                await update.message.reply_text("‚ùå –ù–µ–º–∞—î –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±—ñ—Ä–∂—ñ")
                return
            
            msg = await update.message.reply_text("üîç –ó–ê–ü–£–°–ö–ê–Æ –ì–õ–ò–ë–ò–ù–ù–ï –°–ö–ê–ù–£–í–ê–ù–ù–Ø...")
            
            symbols = await self.get_all_qualified_symbols()
            symbols = symbols[:50]  # –û–±–º–µ–∂—É—î–º–æ –¥–ª—è –≥–ª–∏–±–∏–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É
            
            results = await self.mass_analyze_symbols(symbols)
            
            if results:
                results.sort(key=lambda x: max(x['pump_probability'], x['dump_probability']), reverse=True)
                
                response = "üö® **–†–ï–ó–£–õ–¨–¢–ê–¢–ò –ì–õ–ò–ë–ò–ù–ù–û–ì–û –°–ö–ê–ù–£–í–ê–ù–ù–Ø:**\n\n"
                for i, res in enumerate(results[:8], 1):
                    response += self.format_signal_message(res, i)
                
                response += f"üìä –ó–Ω–∞–π–¥–µ–Ω–æ {len(results)} —Å–∏–≥–Ω–∞–ª—ñ–≤ –∑ {len(symbols)} –º–æ–Ω–µ—Ç"
                await msg.edit_text(response, parse_mode='Markdown')
            else:
                await msg.edit_text("‚ÑπÔ∏è –°–∏–ª—å–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≥–ª–∏–±–∏–Ω–Ω–æ–≥–æ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è: {e}")
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è")

    def format_signal_message(self, analysis: Dict, index: int) -> str:
        """–ü–æ–∫—Ä–∞—â–µ–Ω–µ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
        try:
            symbol = analysis['symbol'].replace('/USDT', '')
            pump_prob = analysis['pump_probability']
            dump_prob = analysis['dump_probability']
            
            signal_emoji = "üî•" if pump_prob > dump_prob else "üìâ"
            signal_type = "PUMP" if pump_prob > dump_prob else "DUMP"
            signal_prob = max(pump_prob, dump_prob)
            
            return (
                f"{index}. {signal_emoji} **{symbol}** - {signal_type} {signal_prob:.1%}\n"
                f"   üí∞ –¶—ñ–Ω–∞: ${analysis['price']:.6f}\n"
                f"   üìä –û–±'—î–º: ${analysis['volume_usdt']:,.0f}\n"
                f"   üìà –ó–º—ñ–Ω–∞: {analysis['percentage']:+.2f}%\n"
                f"   üìç RSI: {analysis['technical_indicators']['rsi']:.1f}\n"
                f"   ‚ö° –í–æ–ª–∞—Ç–∏–ª—å–Ω—ñ—Å—Ç—å: {analysis['technical_indicators']['volatility']:.2f}%\n\n"
            )
        except:
            return f"{index}. –ü–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Å–∏–≥–Ω–∞–ª—É\n\n"

    # –¢–µ—Ö–Ω—ñ—á–Ω—ñ –º–µ—Ç–æ–¥–∏ –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è –ø–æ–¥—ñ–±–Ω–∏–º–∏, –∞–ª–µ –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–º–∏
    def technical_analysis(self, klines: List) -> Dict:
        """–û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–π —Ç–µ—Ö–Ω—ñ—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑"""
        try:
            if len(klines) < 15:
                return {'rsi': 50, 'macd_hist': 0, 'volatility': 0, 'price_acceleration': 0, 'trend_strength': 0.5}
            
            closes = np.array([float(k[4]) for k in klines[-15:]])  # –¢—ñ–ª—å–∫–∏ –æ—Å—Ç–∞–Ω–Ω—ñ 15 —Å–≤–µ—á–æ–∫
            highs = np.array([float(k[2]) for k in klines[-15:]])
            lows = np.array([float(k[3]) for k in klines[-15:]])
            
            # –®–≤–∏–¥–∫–∏–π RSI
            rsi = talib.RSI(closes, timeperiod=14)[-1] if len(closes) >= 14 else 50
            
            # –°–ø—Ä–æ—â–µ–Ω–∏–π MACD
            macd, macd_signal, _ = talib.MACD(closes)
            macd_hist = (macd - macd_signal)[-1] if len(macd) > 0 else 0
            
            # –í–æ–ª–∞—Ç–∏–ª—å–Ω—ñ—Å—Ç—å
            volatility = talib.ATR(highs, lows, closes, timeperiod=14)[-1] / closes[-1] * 100 if len(closes) >= 14 else 0
            
            # –ü—Ä–∏—Å–∫–æ—Ä–µ–Ω–Ω—è —Ü—ñ–Ω–∏
            if len(closes) >= 6:
                price_acceleration = np.polyfit(range(6), closes[-6:], 1)[0] / closes[-6] * 100
            else:
                price_acceleration = 0
            
            # –°–∏–ª–∞ —Ç—Ä–µ–Ω–¥—É
            trend_strength = self.calculate_trend_strength(closes)
            
            return {
                'rsi': round(rsi, 2),
                'macd_hist': round(macd_hist, 6),
                'volatility': round(volatility, 2),
                'price_acceleration': round(price_acceleration, 4),
                'trend_strength': trend_strength
            }
        except Exception as e:
            logger.debug(f"–ü–æ–º–∏–ª–∫–∞ —Ç–µ—Ö–Ω—ñ—á–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É: {e}")
            return {'rsi': 50, 'macd_hist': 0, 'volatility': 0, 'price_acceleration': 0, 'trend_strength': 0.5}

    # –Ü–Ω—à—ñ –º–µ—Ç–æ–¥–∏ –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è –∞–Ω–∞–ª–æ–≥—ñ—á–Ω–∏–º–∏, –∞–ª–µ –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–º–∏
    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∑ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—î—é"""
        try:
            logger.info("ü§ñ –ó–∞–ø—É—Å–∫–∞—é Ultimate Pump/Dump Detector v6.0...")
            
            # –ü–æ–ø–µ—Ä–µ–¥–Ω—î –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–∏–º–≤–æ–ª—ñ–≤
            logger.info("‚è≥ –ü–æ–ø–µ—Ä–µ–¥–Ω—î –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–∏–º–≤–æ–ª—ñ–≤...")
            await self.get_all_qualified_symbols()
            
            await self.app.initialize()
            await self.app.start()
            await self.app.updater.start_polling()
            
            logger.info("‚úÖ –ë–æ—Ç —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ! –û—á—ñ–∫—É—é –∫–æ–º–∞–Ω–¥–∏...")
            
            # –§–æ–Ω–æ–≤—ñ tasks
            asyncio.create_task(self.background_monitoring())
            
            while True:
                await asyncio.sleep(3600)
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞: {e}")
            raise

    async def background_monitoring(self):
        """–§–æ–Ω–æ–≤–∏–π –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è"""
        while True:
            try:
                # –û–Ω–æ–≤–ª—é—î–º–æ –∫–µ—à –¥–∞–Ω–∏—Ö
                await self.update_market_data_cache()
                await asyncio.sleep(300)
                
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Ñ–æ–Ω–æ–≤–æ–≥–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É: {e}")
                await asyncio.sleep(60)

    async def update_market_data_cache(self):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–µ—à—É —Ä–∏–Ω–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö"""
        try:
            symbols = await self.get_all_qualified_symbols()
            symbols = symbols[:100]  # –û–Ω–æ–≤–ª—é—î–º–æ —Ç–æ–ø 100
            
            for symbol in symbols:
                try:
                    await self.get_market_data(symbol)
                    await asyncio.sleep(0.1)
                except Exception as e:
                    continue
                    
            logger.info(f"‚úÖ –ö–µ—à –æ–Ω–æ–≤–ª–µ–Ω–æ: {len(self.market_data_cache)} –∑–∞–ø–∏—Å—ñ–≤")
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–µ—à—É: {e}")

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞"""
    try:
        BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
        
        if not BOT_TOKEN:
            logger.error("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å TELEGRAM_BOT_TOKEN —É –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è")
            return
        
        bot = UltimatePumpDumpDetector(BOT_TOKEN)
        logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...")
        bot.app.run_polling()
        
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –ó—É–ø–∏–Ω–∫–∞ –±–æ—Ç–∞...")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        raise

if __name__ == '__main__':
    # –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
    logging.getLogger('ccxt').setLevel(logging.WARNING)
    logging.getLogger('telegram').setLevel(logging.WARNING)
    logging.getLogger('urllib3').setLevel(logging.WARNING)
    
    # –ó–∞–ø—É—Å–∫
    main()