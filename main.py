import os
import requests
import logging
from flask import Flask, request, jsonify
from binance.client import Client

# ---------------------------------
# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
# ---------------------------------
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")
BINANCE_API_KEY = os.getenv("BINANCE_API_KEY")
BINANCE_API_SECRET = os.getenv("BINANCE_API_SECRET")

client = Client(BINANCE_API_KEY, BINANCE_API_SECRET)

logging.basicConfig(level=logging.INFO, format='[%(levelname)s] %(message)s')

app = Flask(__name__)


# ---------------------------------
# –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤ Telegram
# ---------------------------------
def send_telegram(text: str):
    try:
        # –¥—ñ–ª–∏–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞ —à–º–∞—Ç–∫–∏ –¥–æ 3500 —Å–∏–º–≤–æ–ª—ñ–≤
        chunks = [text[i:i+3500] for i in range(0, len(text), 3500)]
        for chunk in chunks:
            resp = requests.post(
                f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage",
                json={"chat_id": CHAT_ID, "text": chunk, "parse_mode": "HTML"},
                timeout=20
            )
            if resp.status_code != 200:
                logging.error(f"Telegram API: {resp.text}")
    except Exception as e:
        logging.error(f"send_telegram error: {e}")


# ---------------------------------
# –ê–Ω–∞–ª—ñ–∑ —Å–∏–≥–Ω–∞–ª—ñ–≤
# ---------------------------------
def analyze_symbol(symbol: str):
    try:
        klines = client.get_klines(symbol=symbol, interval=Client.KLINE_INTERVAL_15MINUTE, limit=150)
        closes = [float(x[4]) for x in klines]
        high = max(closes)
        low = min(closes)
        last_price = closes[-1]

        signals = []

        # Breakouts (long)
        for lvl in [round(low + (high - low) * p, 4) for p in [0.2, 0.4, 0.5, 0.6, 0.8]]:
            if last_price < lvl:
                signals.append(f"üöÄ LONG breakout –±—ñ–ª—è {lvl}")

        # Breakouts (short)
        for lvl in [round(high - (high - low) * p, 4) for p in [0.2, 0.4, 0.5, 0.7]]:
            if last_price > lvl:
                signals.append(f"‚ö° SHORT breakout –±—ñ–ª—è {lvl}")

        # Pre-top (—è–∫—â–æ —Ü—ñ–Ω–∞ –º–∞–π–∂–µ –¥—ñ–π—à–ª–∞ –¥–æ high)
        if abs(last_price - high) / high < 0.01:
            signals.append(f"‚ö†Ô∏è Pre-top –±—ñ–ª—è {round(high, 4)}")

        # Fake breakout (—è–∫—â–æ —Ü—ñ–Ω–∞ –≤—ñ–¥–±–∏–ª–∞—Å—å –≤—ñ–¥ —Ä—ñ–≤–Ω—è)
        if abs(last_price - high) / high < 0.02 and last_price < high:
            signals.append(f"‚≠êÔ∏è Fake breakout –±—ñ–ª—è {round(high, 4)}")

        return signals

    except Exception as e:
        logging.error(f"{symbol} analyze error: {e}")
        return []


# ---------------------------------
# –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
# ---------------------------------
def smart_auto():
    logging.info("–ó–∞–ø—É—Å–∫–∞—é smart_auto()...")
    try:
        tickers = client.get_ticker()
        logging.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ {len(tickers)} –º–æ–Ω–µ—Ç –∑ Binance")

        # —Ñ—ñ–ª—å—Ç—Ä—É—î–º–æ –ø–æ USDT —ñ –æ–±'—î–º—É > 5M
        usdt_pairs = [x for x in tickers if x['symbol'].endswith("USDT") and float(x['quoteVolume']) > 5_000_000]
        logging.info(f"–§—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω—ñ –º–æ–Ω–µ—Ç–∏ (>5M USDT volume): {len(usdt_pairs)}")

        # –±–µ—Ä–µ–º–æ —Ç–æ–ø-20 –∑–∞ —Ä–æ—Å—Ç–æ–º (% –∑–º—ñ–Ω–∞ –∑–∞ 24h)
        top_symbols = sorted(usdt_pairs, key=lambda x: float(x['priceChangePercent']), reverse=True)[:20]
        symbols = [x['symbol'] for x in top_symbols]
        logging.info(f"TOP 20 –º–æ–Ω–µ—Ç –∑–∞ —Ä–æ—Å—Ç–æ–º 24h: {symbols}")

        # –∞–Ω–∞–ª—ñ–∑—É—î–º–æ
        results = []
        for s in symbols:
            sigs = analyze_symbol(s)
            if sigs:
                results.append(f"[SIGNAL] <b>{s}</b> (+{top_symbols[symbols.index(s)]['priceChangePercent']}%):\n" + "\n".join(sigs))
            else:
                results.append(f"[INFO] {s} (+{top_symbols[symbols.index(s)]['priceChangePercent']}%): —Å–∏–≥–Ω–∞–ª—ñ–≤ –Ω–µ–º–∞")

        # —Ñ–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        full_msg = "üìä <b>Smart Auto Scan ‚Äî TOP 20 —Ä–æ—Å—Ç—É (24h)</b>\n\n" + "\n\n".join(results)
        send_telegram(full_msg)

    except Exception as e:
        logging.error(f"smart_auto error: {e}")

# ---------------------------------
# Flask routes
# ---------------------------------
@app.route("/")
def home():
    return "Bot is running", 200


@app.route(f"/telegram_webhook/{TELEGRAM_TOKEN}", methods=["POST"])
def telegram_webhook():
    update = request.get_json()
    if not update:
        return jsonify({"ok": False})

    message = update.get("message", {}).get("text", "")
    chat_id = update.get("message", {}).get("chat", {}).get("id", "")

    if str(chat_id) != str(CHAT_ID):
        return jsonify({"ok": True})

    if message == "/smart_auto":
        send_telegram("‚ö° –í–∏–∫–æ–Ω—É—é /smart_auto ...")
        smart_auto()

    return jsonify({"ok": True})


# ---------------------------------
# –ó–∞–ø—É—Å–∫
# ---------------------------------
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)