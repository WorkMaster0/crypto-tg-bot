import requests
import telebot
import asyncio
import aiohttp
import json
import time
import hmac
import hashlib
import base64
from datetime import datetime
import logging
import threading
import os
from typing import Dict, List, Optional

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
class Config:
    # Telegram
    TELEGRAM_TOKEN = "8489382938:AAHeFFZPODspuEFcSQyjw8lWzYpRRSv9n3g"
    TELEGRAM_CHAT_ID = "6053907025"
    
    # LBank API
    LBANK_API_KEY = "c21d76ba-3252-4372-b7dd-30ac80428363"
    LBANK_SECRET_KEY = "4EC9D3BB56CBD4C42B9E83F0C7B7C1A9"
    LBANK_BASE_URL = "https://api.lbank.info"
    
    # DexScreener API
    DEXSCREENER_API = "https://api.dexscreener.com/latest/dex"
    
    # –¢–æ—Ä–≥–æ–≤—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
    ORDER_VOLUME = 50  # –û–±—Å—è–≥ –≤ USDT
    PRICE_PREMIUM = 0.0001  # 0.01% –≤–∏—â–µ —Ä–∏–Ω–∫–æ–≤–æ—ó —Ü—ñ–Ω–∏
    MIN_TRADE_AMOUNT = 3000  # –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Å—É–º–∞ —É–≥–æ–¥–∏ –¥–ª—è —Ä–µ–∞–∫—Ü—ñ—ó
    
    # –§—ñ–ª—å—Ç—Ä–∏ —Ç–æ–∫–µ–Ω—ñ–≤
    MIN_MARKET_CAP = 3000000  # 3M$ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –∫–∞–ø—ñ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—è
    MAX_MARKET_CAP = 100000000  # 100M$ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫–∞–ø—ñ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—è
    MIN_VOLUME = 500000  # 500K$ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –æ–±—Å—è–≥
    ALLOWED_CHAINS = ["solana", "bsc"]  # –¢—ñ–ª—å–∫–∏ Solana —Ç–∞ BSC
    BLACKLIST_TOKENS = ["shitcoin", "scam", "test", "meme", "fake", "pump", "dump"]

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
bot = telebot.TeleBot(Config.TELEGRAM_TOKEN)

class TokenFilter:
    """–ö–ª–∞—Å –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó —Ç–æ–∫–µ–Ω—ñ–≤"""
    
    @staticmethod
    def is_token_allowed(token_data: Dict) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —Ç–æ–∫–µ–Ω –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –ø—ñ–¥ –∫—Ä–∏—Ç–µ—Ä—ñ—ó"""
        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–∞–ø—ñ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—ó
            market_cap = token_data.get('market_cap', 0)
            if not (Config.MIN_MARKET_CAP <= market_cap <= Config.MAX_MARKET_CAP):
                return False
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–±—Å—è–≥—É —Ç–æ—Ä–≥—ñ–≤
            volume = token_data.get('volume_24h', 0)
            if volume < Config.MIN_VOLUME:
                return False
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–ª–æ–∫—á–µ–π–Ω—É
            chain = token_data.get('chain', '').lower()
            if chain not in Config.ALLOWED_CHAINS:
                return False
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–æ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É
            symbol = token_data.get('symbol', '').lower()
            name = token_data.get('name', '').lower()
            
            for blacklisted in Config.BLACKLIST_TOKENS:
                if blacklisted in symbol or blacklisted in name:
                    return False
            
            # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —è–∫–æ—Å—Ç—ñ
            price_change = abs(token_data.get('price_change_24h', 0))
            if price_change > 50:  # –ë—ñ–ª—å—à–µ 50% –∑–º—ñ–Ω–∞ —Ü—ñ–Ω–∏ –∑–∞ –¥–æ–±—É
                return False
                
            liquidity = token_data.get('liquidity', 0)
            if liquidity < 100000:  # –ú–µ–Ω—à–µ 100K$ –ª—ñ–∫–≤—ñ–¥–Ω–æ—Å—Ç—ñ
                return False
                
            logging.info(f"‚úÖ –¢–æ–∫–µ–Ω {symbol} –ø—Ä–æ–π—à–æ–≤ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—é")
            return True
            
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó —Ç–æ–∫–µ–Ω–∞: {e}")
            return False

class DexScreenerClient:
    """–ö–ª—ñ—î–Ω—Ç –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ DexScreener API"""
    
    @staticmethod
    async def get_recent_trades(chain: str, limit: int = 10) -> List[Dict]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—ñ—Ö —É–≥–æ–¥ –∑ DexScreener"""
        try:
            url = f"{Config.DEXSCREENER_API}/transactions/{chain}"
            async with aiohttp.ClientSession() as session:
                async with session.get(url, timeout=10) as response:
                    if response.status != 200:
                        return []
                    data = await response.json()
                    
                    large_trades = []
                    for trade in data.get('transactions', [])[:limit]:
                        try:
                            amount_usd = float(trade.get('volumeUsd', 0))
                            if amount_usd >= Config.MIN_TRADE_AMOUNT:
                                large_trades.append({
                                    'chain': chain,
                                    'token_address': trade.get('baseToken', {}).get('address', ''),
                                    'token_symbol': trade.get('baseToken', {}).get('symbol', '').upper(),
                                    'amount_usd': amount_usd,
                                    'price': float(trade.get('priceUsd', 0)),
                                    'timestamp': trade.get('timestamp', 0),
                                    'dex_url': trade.get('url', '')
                                })
                        except (ValueError, TypeError):
                            continue
                    
                    return large_trades
                    
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —É–≥–æ–¥ –∑ {chain}: {e}")
            return []
    
    @staticmethod
    async def get_token_info(chain: str, token_address: str) -> Optional[Dict]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª—å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ç–æ–∫–µ–Ω"""
        try:
            url = f"{Config.DEXSCREENER_API}/tokens/{chain}/{token_address}"
            async with aiohttp.ClientSession() as session:
                async with session.get(url, timeout=5) as response:
                    if response.status != 200:
                        return None
                    data = await response.json()
                    
                    pair = data.get('pair', {})
                    if pair:
                        return {
                            'symbol': pair.get('baseToken', {}).get('symbol', '').upper(),
                            'name': pair.get('baseToken', {}).get('name', ''),
                            'price': float(pair.get('priceUsd', 0)),
                            'volume_24h': float(pair.get('volume', {}).get('h24', 0)),
                            'market_cap': float(pair.get('marketCap', 0)),
                            'liquidity': float(pair.get('liquidity', {}).get('usd', 0)),
                            'price_change_24h': float(pair.get('priceChange', {}).get('h24', 0)),
                            'chain': chain
                        }
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ —Ç–æ–∫–µ–Ω–∞: {e}")
        return None

class LBankClient:
    def __init__(self):
        self.api_key = Config.LBANK_API_KEY
        self.secret_key = Config.LBANK_SECRET_KEY
        self.base_url = Config.LBANK_BASE_URL
        
    def _generate_signature(self, params: Dict) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø—ñ–¥–ø–∏—Å—É –¥–ª—è LBank API"""
        query_string = '&'.join([f"{k}={v}" for k, v in sorted(params.items())])
        signature = hmac.new(
            self.secret_key.encode('utf-8'),
            query_string.encode('utf-8'),
            hashlib.sha256
        ).digest()
        return base64.b64encode(signature).decode('utf-8')
    
    async def get_ticker_price(self, symbol: str) -> Optional[float]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó —Ü—ñ–Ω–∏ –∑ LBank"""
        try:
            lbank_symbol = f"{symbol}_usdt"
            url = f"{self.base_url}/v2/ticker.do?symbol={lbank_symbol}"
            
            async with aiohttp.ClientSession() as session:
                async with session.get(url, timeout=5) as response:
                    if response.status != 200:
                        return None
                    data = await response.json()
                    if data.get('result') and 'ticker' in data:
                        return float(data['ticker'][0])
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ü—ñ–Ω–∏ {symbol}: {e}")
        return None
    
    async def place_limit_order(self, symbol: str, price: float, amount: float) -> Dict:
        """–†–æ–∑–º—ñ—â–µ–Ω–Ω—è –ª—ñ–º—ñ—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞"""
        try:
            lbank_symbol = f"{symbol}_usdt"
            params = {
                'api_key': self.api_key,
                'symbol': lbank_symbol,
                'type': 'buy',
                'price': str(price),
                'amount': str(amount),
                'timestamp': str(int(time.time() * 1000))
            }
            
            params['sign'] = self._generate_signature(params)
            
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    f"{self.base_url}/v2/create_order.do",
                    data=params,
                    timeout=5
                ) as response:
                    result = await response.json()
                    return result
                    
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è –æ—Ä–¥–µ—Ä–∞: {e}")
            return {'error': str(e)}

class ArbitrageBot:
    def __init__(self):
        self.lbank_client = LBankClient()
        self.dex_client = DexScreenerClient()
        self.token_filter = TokenFilter()
        self.last_processed = {}
        self.is_scanning = False
        
    async def start_auto_scan(self):
        """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è —É–≥–æ–¥"""
        self.is_scanning = True
        logging.info("üîç –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ—Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è —É–≥–æ–¥ –Ω–∞ Solana —Ç–∞ BSC")
        
        while self.is_scanning:
            try:
                # –û—Ç—Ä–∏–º—É—î–º–æ —É–≥–æ–¥–∏ –∑ –æ–±–æ—Ö –º–µ—Ä–µ–∂
                tasks = [
                    self.dex_client.get_recent_trades("solana"),
                    self.dex_client.get_recent_trades("bsc")
                ]
                
                results = await asyncio.gather(*tasks, return_exceptions=True)
                all_trades = []
                
                for result in results:
                    if isinstance(result, list):
                        all_trades.extend(result)
                
                # –û–±—Ä–æ–±–ª—è—î–º–æ –∫–æ–∂–Ω—É –≤–µ–ª–∏–∫—É —É–≥–æ–¥—É
                for trade in all_trades:
                    await self.process_trade_signal(trade)
                
                # –ü–∞—É–∑–∞ –º—ñ–∂ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è–º–∏
                await asyncio.sleep(10)
                
            except Exception as e:
                logging.error(f"–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è: {e}")
                await asyncio.sleep(30)
    
    async def stop_auto_scan(self):
        """–ó—É–ø–∏–Ω–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è"""
        self.is_scanning = False
        logging.info("‚èπÔ∏è –ó—É–ø–∏–Ω–∫–∞ –∞–≤—Ç–æ—Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è")
    
    async def process_trade_signal(self, trade: Dict):
        """–û–±—Ä–æ–±–∫–∞ —Å–∏–≥–Ω–∞–ª—É –ø—Ä–æ –≤–µ–ª–∏–∫—É —É–≥–æ–¥—É"""
        try:
            token_address = trade['token_address']
            chain = trade['chain']
            
            # –£–Ω–∏–∫–∞—î–º–æ –¥—É–±–ª—é–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–∫–∏
            trade_key = f"{chain}_{token_address}"
            if trade_key in self.last_processed:
                if time.time() - self.last_processed[trade_key] < 300:  # 5 —Ö–≤–∏–ª–∏–Ω
                    return
            
            self.last_processed[trade_key] = time.time()
            
            logging.info(f"üîç –û–±—Ä–æ–±–ª—è—é —É–≥–æ–¥—É: {trade['token_symbol']} –Ω–∞ {chain} –∑–∞ ${trade['amount_usd']}")
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ç–æ–∫–µ–Ω
            token_info = await self.dex_client.get_token_info(chain, token_address)
            if not token_info:
                return
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ç–æ–∫–µ–Ω –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –ø—ñ–¥ —Ñ—ñ–ª—å—Ç—Ä–∏
            if not self.token_filter.is_token_allowed(token_info):
                return
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–Ω–∏–π –Ω–∞ LBank
            lbank_price = await self.lbank_client.get_ticker_price(token_info['symbol'])
            if not lbank_price:
                return
            
            # –†–æ–∑–º—ñ—â—É—î–º–æ –æ—Ä–¥–µ—Ä
            order_price = round(lbank_price * (1 + Config.PRICE_PREMIUM), 6)
            order_amount = round(Config.ORDER_VOLUME / order_price, 8)
            
            order_result = await self.lbank_client.place_limit_order(
                token_info['symbol'],
                order_price,
                order_amount
            )
            
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
            await self.send_trade_notification(trade, token_info, lbank_price, order_price, order_result)
            
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —É–≥–æ–¥–∏: {e}")
    
    async def send_trade_notification(self, trade: Dict, token_info: Dict, 
                                    market_price: float, order_price: float, order_result: Dict):
        """–í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ —É–≥–æ–¥—É"""
        try:
            success = order_result.get('result', False)
            
            message = (
                f"üöÄ *–í–µ–ª–∏–∫–∞ —É–≥–æ–¥–∞ –≤–∏—è–≤–ª–µ–Ω–∞!*\n\n"
                f"üìä *–î–µ—Ç–∞–ª—ñ —É–≥–æ–¥–∏:*\n"
                f"‚Ä¢ –¢–æ–∫–µ–Ω: `{token_info['symbol']}`\n"
                f"‚Ä¢ –ú–µ—Ä–µ–∂–∞: `{trade['chain'].upper()}`\n"
                f"‚Ä¢ –°—É–º–∞: `${trade['amount_usd']:,.2f}`\n"
                f"‚Ä¢ –¶—ñ–Ω–∞: `${trade['price']:.6f}`\n\n"
                f"üìà *–†–∏–Ω–∫–æ–≤—ñ –¥–∞–Ω—ñ:*\n"
                f"‚Ä¢ –ö–∞–ø—ñ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—è: `${token_info['market_cap']:,.0f}`\n"
                f"‚Ä¢ –û–±—Å—è–≥ 24h: `${token_info['volume_24h']:,.0f}`\n"
                f"‚Ä¢ LBank —Ü–µ–Ω–∞: `${market_price:.6f}`\n"
                f"‚Ä¢ –¶—ñ–Ω–∞ –æ—Ä–¥–µ—Ä–∞: `${order_price:.6f}`\n"
                f"‚Ä¢ Premium: `{Config.PRICE_PREMIUM*100:.2f}%`\n\n"
                f"üõí *–û—Ä–¥–µ—Ä –Ω–∞ LBank:*\n"
                f"‚Ä¢ –°—Ç–∞—Ç—É—Å: `{'‚úÖ –£—Å–ø—ñ—à–Ω–æ' if success else '‚ùå –ü–æ–º–∏–ª–∫–∞'}`\n"
                f"‚Ä¢ –ß–∞—Å: `{datetime.now().strftime('%H:%M:%S')}`\n\n"
                f"üîó *[DEX Screener]({trade['dex_url']})*"
            )
            
            bot.send_message(Config.TELEGRAM_CHAT_ID, message, parse_mode="Markdown")
            
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
arbitrage_bot = ArbitrageBot()

# –ö–æ–º–∞–Ω–¥–∏ –¥–ª—è Telegram –±–æ—Ç–∞
@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    help_text = (
        "ü§ñ *DexScreener/LBank Arbitrage Bot*\n\n"
        "–¶–µ–π –±–æ—Ç —Å–∫–∞–Ω—É—î –≤–µ–ª–∏–∫—ñ —É–≥–æ–¥–∏ –Ω–∞ Solana —Ç–∞ BSC:\n"
        "‚Ä¢ –ú–æ–Ω—ñ—Ç–æ—Ä–∏—Ç—å DexScreener –¥–ª—è —É–≥–æ–¥ >$3000\n"
        "‚Ä¢ –§—ñ–ª—å—Ç—Ä—É—î —Ç–æ–∫–µ–Ω–∏ –∑–∞ –∫—Ä–∏—Ç–µ—Ä—ñ—è–º–∏\n"
        "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∫—É–ø—É—î –Ω–∞ LBank\n"
        "‚Ä¢ –¶—ñ–Ω–∞: +0.01% –¥–æ —Ä–∏–Ω–∫–æ–≤–æ—ó\n\n"
        "‚öôÔ∏è *–§—ñ–ª—å—Ç—Ä–∏:*\n"
        f"‚Ä¢ –ö–∞–ø—ñ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—è: ${Config.MIN_MARKET_CAP:,} - ${Config.MAX_MARKET_CAP:,}\n"
        f"‚Ä¢ –û–±—Å—è–≥: >${Config.MIN_VOLUME:,}/24h\n"
        f"‚Ä¢ –ú–µ—Ä–µ–∂—ñ: {', '.join(Config.ALLOWED_CHAINS).upper()}\n"
        f"‚Ä¢ –ú—ñ–Ω. —É–≥–æ–¥–∞: ${Config.MIN_TRADE_AMOUNT}\n\n"
        "üìä *–ö–æ–º–∞–Ω–¥–∏:*\n"
        "/scan_start - –ü–æ—á–∞—Ç–∏ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è\n"
        "/scan_stop - –ó—É–ø–∏–Ω–∏—Ç–∏ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è\n"
        "/status - –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞"
    )
    bot.send_message(message.chat.id, help_text, parse_mode="Markdown")

@bot.message_handler(commands=['scan_start'])
def start_scan(message):
    """–ü–æ—á–∞—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è"""
    def start():
        asyncio.run(arbitrage_bot.start_auto_scan())
    
    if not arbitrage_bot.is_scanning:
        thread = threading.Thread(target=start, daemon=True)
        thread.start()
        bot.reply_to(message, "üîç –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è –∑–∞–ø—É—â–µ–Ω–æ! –®—É–∫–∞—é –≤–µ–ª–∏–∫—ñ —É–≥–æ–¥–∏...")
    else:
        bot.reply_to(message, "‚ö†Ô∏è –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è –≤–∂–µ –∑–∞–ø—É—â–µ–Ω–æ!")

@bot.message_handler(commands=['scan_stop'])
def stop_scan(message):
    """–ó—É–ø–∏–Ω–∏—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è"""
    async def stop():
        await arbitrage_bot.stop_auto_scan()
    
    asyncio.run(stop())
    bot.reply_to(message, "‚èπÔ∏è –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è –∑—É–ø–∏–Ω–µ–Ω–æ!")

@bot.message_handler(commands=['status'])
def show_status(message):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞"""
    status_text = (
        "üìä *–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:*\n\n"
        f"‚Ä¢ –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è: {'‚úÖ –ê–∫—Ç–∏–≤–Ω–µ' if arbitrage_bot.is_scanning else '‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–µ'}\n"
        f"‚Ä¢ –ú–µ—Ä–µ–∂—ñ: {', '.join(Config.ALLOWED_CHAINS).upper()}\n"
        f"‚Ä¢ –û–±—Ä–æ–±–ª–µ–Ω–æ —É–≥–æ–¥: {len(arbitrage_bot.last_processed)}\n"
        f"‚Ä¢ –ú—ñ–Ω. —Å—É–º–∞ —É–≥–æ–¥–∏: ${Config.MIN_TRADE_AMOUNT}\n"
        f"‚Ä¢ –û–±—Å—è–≥ –æ—Ä–¥–µ—Ä–∞: ${Config.ORDER_VOLUME}\n\n"
        f"‚è∞ *–ß–∞—Å:* {datetime.now().strftime('%H:%M:%S')}"
    )
    bot.send_message(message.chat.id, status_text, parse_mode="Markdown")

def run_scanner():
    """–ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–µ—Ä–∞ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ"""
    async def start():
        await arbitrage_bot.start_auto_scan()
    asyncio.run(start())

if __name__ == "__main__":
    logging.info("üöÄ Arbitrage Bot –∑ DexScreener –∑–∞–ø—É—â–µ–Ω–æ!")
    
    # –û—á–∏—â–∞—î–º–æ –≤—Å—ñ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ webhook
    try:
        import requests
        requests.get(f"https://api.telegram.org/bot{Config.TELEGRAM_TOKEN}/deleteWebhook")
        time.sleep(2)
    except Exception as e:
        logging.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—á–∏—Å—Ç–∏—Ç–∏ webhook: {e}")
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Å–∫–∞–Ω–µ—Ä
    def start_scanner():
        async def run():
            await arbitrage_bot.start_auto_scan()
        asyncio.run(run())
    
    scanner_thread = threading.Thread(target=start_scanner, daemon=True)
    scanner_thread.start()
    
    # –°–ø—Ä–æ–±–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–∏ polling
    max_retries = 3
    for attempt in range(max_retries):
        try:
            logging.info(f"–°–ø—Ä–æ–±–∞ {attempt + 1} –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞...")
            bot.infinity_polling()
            break
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É (—Å–ø—Ä–æ–±–∞ {attempt + 1}): {e}")
            if attempt < max_retries - 1:
                time.sleep(5)
            else:
                # –ó–∞–ø—É—Å–∫–∞—î–º–æ —É –≤–µ–±-—Ä–µ–∂–∏–º—ñ
                logging.info("–ó–∞–ø—É—Å–∫ —É –≤–µ–±-—Ä–µ–∂–∏–º—ñ...")
                from flask import Flask
                app = Flask(__name__)
                
                @app.route('/')
                def home():
                    return "ü§ñ Bot is running in web mode", 200
                
                port = int(os.environ.get('PORT', 10000))
                app.run(host='0.0.0.0', port=port)